openapi: "3.0.1"
info:
  title: "apigw-internal-dev"
  version: 1.0.0

servers:
  - url: "https://google.com"
    variables:
      basePath:
        default: "dev"
    x-amazon-apigateway-endpoint-configuration:
      vpcEndpointIds:
        - "vpce-wertrewtr"

paths:

  # Core banking routes ###############################################################################

  # Clients
  
  '/api/v1/core/clients/{clientId}':
    get:
      tags:
        - Clients
      summary: Get client
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aofg"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.clientId: "method.request.path.clientId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/clients/{clientId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: clientId
          in: path
          description: The ID or encoded key of the client to be returned.
          required: true
          schema:
            type: string
        - name: detailsLevel
          in: query
          description: >-
            The level of details to return: `FULL` means the full details of the
            object will be returned (custom field values, address, contact info,
            or any other related objects) and `BASIC` will return only the first
            level elements of the object.
          required: false
          schema:
            type: string
            enum:
              - BASIC
              - FULL
      responses:
        '200':
          description: Client returned.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/Client'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: Client not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
    put:
      tags:
        - Clients
      summary: Update client
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: PUT
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.clientId: "method.request.path.clientId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/clients/{clientId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: clientId
          in: path
          description: The ID or encoded key of the client to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: Client to be updated.
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/Client'
              type: object
      responses:
        '200':
          description: Client updated.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/Client'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: Client not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
    delete:
      tags:
        - Clients
      summary: Delete client
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.clientId: "method.request.path.clientId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/clients/{clientId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: clientId
          in: path
          description: The ID or encoded key of the client to be deleted.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Client deleted.
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: Client not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
    patch:
      tags:
        - Clients
      summary: Partially update client
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.clientId: "method.request.path.clientId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/clients/{clientId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: clientId
          in: path
          description: The ID or encoded key of the client to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: Patch operations to be applied to a resource.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                #$ref: '#/components/schemas/PatchOperation'
                type: object
      responses:
        '204':
          description: Client updated.
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: Client not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/core/clients:
    get:
      tags:
        - Clients
      summary: Get clients
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"

        uri: https://hello.com/api/clients
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: offset
          in: query
          description: >-
            Pagination, index to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: >-
            Pagination, cursor to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            Pagination, the number of elements to retrieve, used in combination
            with offset to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: paginationDetails
          in: query
          description: >-
            Flag specifying whether the pagination  details should be provided
            in response headers. Please note that by default it is disabled
            (OFF), in order to improve the performance of the APIs
          required: false
          schema:
            type: string
            default: 'OFF'
            enum:
              - 'ON'
              - 'OFF'
        - name: detailsLevel
          in: query
          description: >-
            The level of details to return: `FULL` means the full details of the
            object will be returned (custom field values, address, contact info,
            or any other related objects) and `BASIC` will return only the first
            level elements of the object.
          required: false
          schema:
            type: string
            enum:
              - BASIC
              - FULL
        - name: creditOfficerUsername
          in: query
          description: >-
            The username of the credit officer to whom the entities are assigned
            to
          required: false
          schema:
            type: string
        - name: branchId
          in: query
          description: >-
            The id/encodedKey of the branch to which the entities are assigned
            to
          required: false
          schema:
            type: string
        - name: centreId
          in: query
          description: >-
            The id/encodedKey of the centre to which the entities are assigned
            to
          required: false
          schema:
            type: string
        - name: firstName
          in: query
          description: >-
            The first name, personal name, given name, or forename of the
            client.
          required: false
          schema:
            type: string
        - name: lastName
          in: query
          description: 'The last name, surname, or family name of the client.'
          required: false
          schema:
            type: string
        - name: idNumber
          in: query
          description: The ID number of the client's identification document.
          required: false
          schema:
            type: string
        - name: state
          in: query
          description: The state of the client to search for.
          required: false
          schema:
            type: string
            enum:
              - PENDING_APPROVAL
              - INACTIVE
              - ACTIVE
              - EXITED
              - BLACKLISTED
              - REJECTED
        - name: birthDate
          in: query
          description: The birth date of the client to search for.
          required: false
          schema:
            type: string
            format: date
        - name: sortBy
          in: query
          description: >-
            The criteria based on which the records will be sorted. Expected
            format is <field:order>, for example, sortBy =
            field1:ASC,field2:DESC.<br/>Only the following fields can be used:
            firstName, lastName, creationDate, lastModifiedDate<br/>Default
            sorting is done by  creationDate:ASC
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Clients list returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: '#/components/schemas/Client'
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
    post:
      tags:
        - Clients
      summary: Create client
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"

        uri: https://hello.com/api/clients
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: Idempotency-Key
          in: header
          description: >-
            Key that can be used to support idempotency on this POST. Must be a
            valid UUID(version 4 is recommended) string and can only be used
            with the exact same request. Can be used in retry mechanisms to
            prevent double posting.
          required: false
          schema:
            type: string
      requestBody:
        description: Client to be created.
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/Client'
              type: object
      responses:
        '201':
          description: Client created.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/Client'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  '/api/v1/core/clients:search':
    post:
      tags:
        - Clients
      summary: Search clients
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/clients:search
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: offset
          in: query
          description: >-
            Pagination, index to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: >-
            Pagination, cursor to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            Pagination, the number of elements to retrieve, used in combination
            with offset to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: paginationDetails
          in: query
          description: >-
            Flag specifying whether the pagination  details should be provided
            in response headers. Please note that by default it is disabled
            (OFF), in order to improve the performance of the APIs
          required: false
          schema:
            type: string
            default: 'OFF'
            enum:
              - 'ON'
              - 'OFF'
        - name: detailsLevel
          in: query
          description: >-
            The level of details to return: `FULL` means the full details of the
            object will be returned (custom field values, address, contact info,
            or any other related objects) and `BASIC` will return only the first
            level elements of the object.
          required: false
          schema:
            type: string
            enum:
              - BASIC
              - FULL
      requestBody:
        description: The criteria to search clients.
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/ClientSearchCriteria'
              type: object
      responses:
        '200':
          description: Result of client search.
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: '#/components/schemas/Client'
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  '/api/v1/core/clients/{clientId}/role':
    get:
      tags:
        - Clients
      summary: Get client role for client
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.clientId: "method.request.path.clientId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/clients/{clientId}/role
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: clientId
          in: path
          description: The ID or encoded key of the client to be returned.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Client role returned.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ClientRole'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: Client not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  # Deposit Accounts

  '/api/v1/core/accounts/{depositAccountId}/cards':
    get:
      tags:
        - Deposit Accounts
      summary: Get cards associated with an account
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/deposits/{depositAccountId}/cards
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: depositAccountId
          in: path
          description: The ID or encoded key of the deposit account.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The list of cards attached to the account was returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: '#/components/schemas/Card'
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: The deposit account was not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
    post:
      tags:
        - Deposit Accounts
      summary: >-
        Represents the information needed to create and associate a new card to
        an account.
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/deposits/{depositAccountId}/cards
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: Idempotency-Key
          in: header
          description: >-
            Key that can be used to support idempotency on this POST. Must be a
            valid UUID(version 4 is recommended) string and can only be used
            with the exact same request. Can be used in retry mechanisms to
            prevent double posting.
          required: false
          schema:
            type: string
        - name: depositAccountId
          in: path
          description: The ID or encoded key of the deposit account.
          required: true
          schema:
            type: string
      requestBody:
        description: The card to be created.
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/Card'
              type: object
      responses:
        '201':
          description: The card was created.
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: The deposit account was not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '409':
          description: >-
            Operation cannot be performed due to another pending operation that
            locked shared resources.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  '/api/v1/core/accounts/{depositAccountId}/authorizationholds':
    get:
      tags:
        - Deposit Accounts
      summary: >-
        Get authorization holds related to a deposit account, ordered from
        newest to oldest by creation date
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/deposits/{depositAccountId}/authorizationholds
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: depositAccountId
          in: path
          description: The ID or encoded key of the deposit account.
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: >-
            Pagination, index to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: >-
            Pagination, cursor to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            Pagination, the number of elements to retrieve, used in combination
            with offset to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: paginationDetails
          in: query
          description: >-
            Flag specifying whether the pagination  details should be provided
            in response headers. Please note that by default it is disabled
            (OFF), in order to improve the performance of the APIs
          required: false
          schema:
            type: string
            default: 'OFF'
            enum:
              - 'ON'
              - 'OFF'
        - name: status
          in: query
          description: The status of the authorization holds to filter on
          required: false
          schema:
            type: string
            enum:
              - PENDING
              - REVERSED
              - SETTLED
              - EXPIRED
      responses:
        '200':
          description: The list of authorization holds has been returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: '#/components/schemas/GetAuthorizationHold'
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: The deposit account was not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
    post:
      tags:
        - Deposit Accounts
      summary: Create an authorization hold corresponding to a given account
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/deposits/{depositAccountId}/authorizationholds
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: Idempotency-Key
          in: header
          description: >-
            Key that can be used to support idempotency on this POST. Must be a
            valid UUID(version 4 is recommended) string and can only be used
            with the exact same request. Can be used in retry mechanisms to
            prevent double posting.
          required: false
          schema:
            type: string
        - name: depositAccountId
          in: path
          description: The ID or encoded key of the deposit account.
          required: true
          schema:
            type: string
      requestBody:
        description: The authorization hold to be created.
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/AccountAuthorizationHold'
              type: object
      responses:
        '201':
          description: The account authorization hold was successfully created.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/AccountAuthorizationHold'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: The deposit account was not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '409':
          description: >-
            Operation cannot be performed due to another pending operation that
            locked shared resources.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/core/accounts:
    get:
      tags:
        - Deposit Accounts
      summary: Get deposit accounts
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/deposits
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: offset
          in: query
          description: >-
            Pagination, index to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: >-
            Pagination, cursor to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            Pagination, the number of elements to retrieve, used in combination
            with offset to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: paginationDetails
          in: query
          description: >-
            Flag specifying whether the pagination  details should be provided
            in response headers. Please note that by default it is disabled
            (OFF), in order to improve the performance of the APIs
          required: false
          schema:
            type: string
            default: 'OFF'
            enum:
              - 'ON'
              - 'OFF'
        - name: detailsLevel
          in: query
          description: >-
            The level of details to return: `FULL` means the full details of the
            object will be returned (custom field values, address, contact info,
            or any other related objects) and `BASIC` will return only the first
            level elements of the object.
          required: false
          schema:
            type: string
            enum:
              - BASIC
              - FULL
        - name: creditOfficerUsername
          in: query
          description: The username of the credit officer assigned to the deposit accounts.
          required: false
          schema:
            type: string
        - name: branchId
          in: query
          description: >-
            The ID or encoded key of the branch assigned to the deposit
            accounts.
          required: false
          schema:
            type: string
        - name: centreId
          in: query
          description: >-
            The ID or encoded key of the centre assigned to the deposit
            accounts.
          required: false
          schema:
            type: string
        - name: accountState
          in: query
          description: The state to use to filter deposit accounts by.
          required: false
          schema:
            type: string
            enum:
              - PENDING_APPROVAL
              - APPROVED
              - ACTIVE
              - ACTIVE_IN_ARREARS
              - MATURED
              - LOCKED
              - DORMANT
              - CLOSED
              - CLOSED_WRITTEN_OFF
              - WITHDRAWN
              - CLOSED_REJECTED
        - name: accountHolderType
          in: query
          description: The account holder type.
          required: false
          schema:
            type: string
            enum:
              - CLIENT
              - GROUP
        - name: accountHolderId
          in: query
          description: The ID of the account holder.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Deposit accounts list returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: '#/components/schemas/DepositAccount'
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: The deposit account was not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
    post:
      tags:
        - Deposit Accounts
      summary: Create deposit account
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/deposits
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: Idempotency-Key
          in: header
          description: >-
            Key that can be used to support idempotency on this POST. Must be a
            valid UUID(version 4 is recommended) string and can only be used
            with the exact same request. Can be used in retry mechanisms to
            prevent double posting.
          required: false
          schema:
            type: string
      requestBody:
        description: Represents the information to create a deposit account.
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/DepositAccount'
              type: object
      responses:
        '201':
          description: The deposit account has been created.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/DepositAccount'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '409':
          description: >-
            Operation cannot be performed due to another pending operation that
            locked shared resources.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  '/api/v1/core/accounts/{depositAccountId}':
    get:
      tags:
        - Deposit Accounts
      summary: Get deposit account
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/deposits/{depositAccountId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: depositAccountId
          in: path
          description: The ID or encoded key of the deposit account.
          required: true
          schema:
            type: string
        - name: detailsLevel
          in: query
          description: >-
            The level of details to return: `FULL` means the full details of the
            object will be returned (custom field values, address, contact info,
            or any other related objects) and `BASIC` will return only the first
            level elements of the object.
          required: false
          schema:
            type: string
            enum:
              - BASIC
              - FULL
      responses:
        '200':
          description: The deposit account has been returned.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/DepositAccount'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: The deposit account was not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
    put:
      tags:
        - Deposit Accounts
      summary: Update deposit account
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: PUT
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/deposits/{depositAccountId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: depositAccountId
          in: path
          description: The ID or encoded key of the deposit account.
          required: true
          schema:
            type: string
      requestBody:
        description: Represents the information to update a deposit account.
        required: false
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/DepositAccount'
              type: object
      responses:
        '200':
          description: The deposit account has been updated.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/DepositAccount'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: The deposit account was not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '409':
          description: >-
            Operation cannot be performed due to another pending operation that
            locked shared resources.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
    delete:
      tags:
        - Deposit Accounts
      summary: Delete inactive deposit account
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/deposits/{depositAccountId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: depositAccountId
          in: path
          description: The ID or encoded key of the deposit account.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The deposit account has been deleted.
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: The deposit account was not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '409':
          description: >-
            Operation cannot be performed due to another pending operation that
            locked shared resources.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
    patch:
      tags:
        - Deposit Accounts
      summary: Partially update deposit account
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/deposits/{depositAccountId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: depositAccountId
          in: path
          description: The ID or encoded key of the deposit account.
          required: true
          schema:
            type: string
      requestBody:
        description: Patch operations to be applied to a resource.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                #$ref: '#/components/schemas/PatchOperation'
                type: object
      responses:
        '204':
          description: The deposit account has been updated.
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: The deposit account was not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '409':
          description: >-
            Operation cannot be performed due to another pending operation that
            locked shared resources.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  '/api/v1/core/accounts/{depositAccountId}/authorizationholds/{authorizationHoldExternalReferenceId}':
    get:
      tags:
        - Deposit Accounts
      summary: Get account authorization hold
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.path.authorizationHoldExternalReferenceId: "method.request.path.authorizationHoldExternalReferenceId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/deposits/{depositAccountId}/authorizationholds/{authorizationHoldExternalReferenceId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: depositAccountId
          in: path
          description: The ID or encoded key of the deposit account.
          required: true
          schema:
            type: string
        - name: authorizationHoldExternalReferenceId
          in: path
          description: The ID used to reference the authorization hold.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The authorization hold has been returned.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/AccountAuthorizationHold'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: The deposit account was not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
    delete:
      tags:
        - Deposit Accounts
      summary: Reverse account authorization hold
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.path.authorizationHoldExternalReferenceId: "method.request.path.authorizationHoldExternalReferenceId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/deposits/{depositAccountId}/authorizationholds/{authorizationHoldExternalReferenceId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: depositAccountId
          in: path
          description: The ID or encoded key of the deposit account.
          required: true
          schema:
            type: string
        - name: authorizationHoldExternalReferenceId
          in: path
          description: The ID used to reference the authorization hold.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The account authorization hold was successfully reversed.
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: The account or authorization hold was not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '409':
          description: >-
            Operation cannot be performed due to another pending operation that
            locked shared resources.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  '/api/v1/core/accounts:search':
    post:
      tags:
        - Deposit Accounts
      summary: Search deposit accounts
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/deposits:search
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: offset
          in: query
          description: >-
            Pagination, index to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: >-
            Pagination, cursor to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            Pagination, the number of elements to retrieve, used in combination
            with offset to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: paginationDetails
          in: query
          description: >-
            Flag specifying whether the pagination  details should be provided
            in response headers. Please note that by default it is disabled
            (OFF), in order to improve the performance of the APIs
          required: false
          schema:
            type: string
            default: 'OFF'
            enum:
              - 'ON'
              - 'OFF'
        - name: detailsLevel
          in: query
          description: >-
            The level of details to return: `FULL` means the full details of the
            object will be returned (custom field values, address, contact info,
            or any other related objects) and `BASIC` will return only the first
            level elements of the object.
          required: false
          schema:
            type: string
            enum:
              - BASIC
              - FULL
      requestBody:
        description: The criteria to be used to search the deposit accounts.
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/DepositAccountSearchCriteria'
              type: object
      responses:
        '200':
          description: The deposit account search results have been returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: '#/components/schemas/DepositAccount'
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  '/api/v1/core/accounts/{depositAccountId}/changeState':
    post:
      tags:
        - Deposit Accounts
      summary: >-
        Represents the information to post an action, such as approving a
        deposit account.
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/deposits/{depositAccountId}:changeState
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "409":
            statusCode: "409"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: Idempotency-Key
          in: header
          description: >-
            Key that can be used to support idempotency on this POST. Must be a
            valid UUID(version 4 is recommended) string and can only be used
            with the exact same request. Can be used in retry mechanisms to
            prevent double posting.
          required: false
          schema:
            type: string
        - name: depositAccountId
          in: path
          description: The ID or encoded key of the deposit account.
          required: true
          schema:
            type: string
      requestBody:
        description: Represents the action details for a deposit account.
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/DepositAccountAction'
              type: object
      responses:
        '200':
          description: The deposit account action has been posted.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/DepositAccount'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: The deposit account was not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '409':
          description: >-
            Operation cannot be performed due to another pending operation that
            locked shared resources.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  # Deposit Transactions

  /api/v1/core/accounts/{depositAccountId}/transactions:
    get:
      summary: Transaction List All.
      description: Retrieves the transactions with the account identifier and is exists with addition parameters.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/deposits/{depositAccountId}/transactions
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - in: path
          name: depositAccountId
          required: true
          schema:
            type: string
          description: The ID or encoded key of the deposit account used to get all of its transactions.
        - in: query
          name: offset
          schema:
            type: integer
          description: Pagination, index to start searching at when retrieving elements, used in combination with limit to paginate results
        - in: query
          name: limit
          schema:
            type: integer
          description: Pagination, the number of elements to retrieve, used in combination with offset to paginate results
        - in: query
          name: paginationDetails
          schema:
            type: string
          description: Flag specifying whether the pagination details should be provided in response headers. Please note that by default it is disabled (OFF), in order to improve the performance of the APIs
        - in: query
          name: detailsLevel
          schema:
            type: string
          description: The level of details to return - FULL means the full details of the object will be returned (custom field values, address, contact info, or any other related objects) and BASIC will return only the first level elements of the object.

      responses:
        '200':
          description: The list of deposit transactions has been returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object

        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object

  /api/v1/core/accounts/transactions:search:
    post:
      summary: Transaction List Filters.
      description: Retrieves the transactions with the account identifier and is exists with addition parameters.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/deposits/transactions:search
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: Pagination, index to start searching at when retrieving elements, used in combination with limit to paginate results
        - in: query
          name: limit
          schema:
            type: integer
          description: Pagination, the number of elements to retrieve, used in combination with offset to paginate results
        - in: query
          name: paginationDetails
          schema:
            type: string
          description: Flag specifying whether the pagination details should be provided in response headers. Please note that by default it is disabled (OFF), in order to improve the performance of the APIs
        - in: query
          name: detailsLevel
          schema:
            type: string
          description: The level of details to return - FULL means the full details of the object will be returned (custom field values, address, contact info, or any other related objects) and BASIC will return only the first level elements of the object.

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filterCriteria:
                  type: array
                  items:
                    type: object
                    properties:
                      field:
                        type: string
                      operator:
                        type: string
                      values:
                        type: array
                        items:
                          type: string
                sortingCriteria:
                  type: object
                  properties:
                    field:
                      type: string
                    order:
                      type: string
              required:
                - filterCriteria

      responses:
        '200':
          description: The results of a deposit transaction search.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object

  '/api/v1/core/accounts/{depositAccountId}/withdrawal-transactions':
    post:
      tags:
        - DepositTransactions
      summary: Create withdrawal transaction
      description: ''
      operationId: makeWithdrawal
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/deposits/{depositAccountId}/withdrawal-transactions
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: Idempotency-Key
          in: header
          description: >-
            Key that can be used to support idempotency on this POST. Must be a
            valid UUID(version 4 is recommended) string and can only be used
            with the exact same request. Can be used in retry mechanisms to
            prevent double posting.
          required: false
          schema:
            type: string
        - name: depositAccountId
          in: path
          description: >-
            The ID or encoded key of the deposit that the transaction will be
            created for.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/DepositTransactionInput'
              type: object
      responses:
        '201':
          description: The withdrawal transaction has been created.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/DepositTransaction'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: The deposit account was not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '409':
          description: >-
            Operation cannot be performed due to another pending operation that
            locked shared resources.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  '/api/v1/core/accounts/transactions/{depositTransactionId}/adjust':
    post:
      tags:
        - DepositTransactions
      summary: >-
        Adjust a deposit transaction, which may bulk adjust multiple
        transactions
      description: ''
      operationId: adjust
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositTransactionId: "method.request.path.depositTransactionId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/deposits/transactions/{depositTransactionId}:adjust
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: Idempotency-Key
          in: header
          description: >-
            Key that can be used to support idempotency on this POST. Must be a
            valid UUID(version 4 is recommended) string and can only be used
            with the exact same request. Can be used in retry mechanisms to
            prevent double posting.
          required: false
          schema:
            type: string
        - name: depositTransactionId
          in: path
          description: The ID or encoded key of the deposit transaction.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/DepositTransactionAdjustmentDetails'
              type: object
      responses:
        '200':
          description: The deposit transaction has been adjusted.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/DepositTransaction'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: The deposit transaction was not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '409':
          description: >-
            Operation cannot be performed due to another pending operation that
            locked shared resources.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  '/api/v1/core/accounts/{depositAccountId}/deposit-transactions':
    post:
      tags:
        - DepositTransactions
      summary: Create deposit transaction
      description: ''
      operationId: makeDeposit
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/deposits/{depositAccountId}/deposit-transactions
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: Idempotency-Key
          in: header
          description: >-
            Key that can be used to support idempotency on this POST. Must be a
            valid UUID(version 4 is recommended) string and can only be used
            with the exact same request. Can be used in retry mechanisms to
            prevent double posting.
          required: false
          schema:
            type: string
        - name: depositAccountId
          in: path
          description: >-
            The ID or encoded key of the deposit that the transaction will be
            created for.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Represents the information needed to create a deposit transaction.
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/DepositTransactionInput'
              type: object
      responses:
        '201':
          description: The deposit transaction has been created.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/DepositTransaction'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: Not found
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '409':
          description: >-
            Operation cannot be performed due to another pending operation that
            locked shared resources.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  # Groups

  /api/v1/core/groups:
    get:
      summary: Get groups List.
      description: Returns all the Groups by filters.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/groups
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - in: query
          name: offset
          description: Pagination, index to start searching at when retrieving elements, used in combination with limit to paginate results
          schema:
            type: integer
        - in: query
          name: limit
          description: Pagination, the number of elements to retrieve, used in combination with offset to paginate results
          schema:
            type: integer
        - in: query
          name: paginationDetails
          description: Flag specifying whether the pagination details should be provided in response headers. Please note that by default it is disabled (OFF), in order to improve the performance of the APIs
          schema:
            type: string
        - in: query
          name: detailsLevel
          description: The level of details to return - FULL means the full details of the object will be returned (custom field values, address, contact info, or any other related objects) and BASIC will return only the first level elements of the object.
          schema:
            type: string
        - in: query
          name: creditOfficerUsername
          description: The username of the credit officer to whom the entities are assigned to.
          schema:
            type: string
        - in: query
          name: branchId
          description: The id/encodedKey of the branch to which the entities are assigned to.
          schema:
            type: string
        - in: query
          name: centreId
          description: The id/encodedKey of the centre to which the entities are assigned to.
          schema:
            type: string
        - in: query
          name: sortBy
          description: The criteria based on which the records will be sorted. Expected format is, for example, sortBy = field1:ASC,field2:DESC. Only the following fields can be used - creationDate, lastModifiedDate, groupName. Default sorting is done by creationDate:DESC.
          schema:
            type: string

      responses:
        '200':
          description: Groups list returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object

        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object

  /api/v1/core/groups:search:
    post:
      summary: Search groups.
      description: Retrieves the groups with filter criteria.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/groups:search
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: Pagination, index to start searching at when retrieving elements, used in combination with limit to paginate results
        - in: query
          name: limit
          schema:
            type: integer
          description: Pagination, the number of elements to retrieve, used in combination with offset to paginate results
        - in: query
          name: paginationDetails
          schema:
            type: string
          description: Flag specifying whether the pagination details should be provided in response headers. Please note that by default it is disabled (OFF), in order to improve the performance of the APIs
        - in: query
          name: detailsLevel
          schema:
            type: string
          description: The level of details to return - FULL means the full details of the object will be returned (custom field values, address, contact info, or any other related objects) and BASIC will return only the first level elements of the object.

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filterCriteria:
                  type: array
                  items:
                    type: object
                    properties:
                      field:
                        type: string
                      operator:
                        type: string
                      secondValue:
                        type: string
                      value:
                        type: string
                      values:
                        type: array
                        items:
                          type: string
                sortingCriteria:
                  type: object
                  properties:
                    field:
                      type: string
                    order:
                      type: string
              required:
                - filterCriteria

      responses:
        '200':
          description: Result of group search.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object

  # Loans

  "/api/v1/core/loanproducts/{loanProductId}":
    get:
      tags:
        - Loan Products
      summary: Get loan product
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.loanProductId: "method.request.path.loanProductId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/loanproducts/{loanProductId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: getById
      parameters:
        - name: loanProductId
          in: path
          description: The ID or encoded key of the loan product to be returned.
          required: true
          schema:
            type: string
        - name: detailsLevel
          in: query
          description: 'The level of details to return: `FULL` means the full details
              of the object will be returned (custom field values, address, contact info,
              or any other related objects) and `BASIC` will return only the first level
              elements of the object.'
          required: false
          schema:
            type: string
            enum:
              - BASIC
              - FULL
      responses:
        '200':
          description: Loan product returned.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/LoanProduct"
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan product not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object

  "/api/v1/core/loanproducts":
    get:
      tags:
        - Loan Products
      summary: Get loan products
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/loanproducts
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: getAll
      parameters:
        - name: offset
          in: query
          description: Pagination, index to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: Pagination, cursor to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Pagination, the number of elements to retrieve, used in combination
            with offset to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: paginationDetails
          in: query
          description: Flag specifying whether the pagination  details should be provided
            in response headers. Please note that by default it is disabled (OFF), in
            order to improve the performance of the APIs
          required: false
          schema:
            type: string
            default: 'OFF'
            enum:
              - 'ON'
              - 'OFF'
        - name: sortBy
          in: query
          description: 'The criteria based on which the records will be sorted. Expected
              format is <field:order>, for example, sortBy = field1:ASC,field2:DESC.<br/>Only
              the following fields can be used: ID, productName, creationDate, lastModifiedDate<br/>Default
              sorting is done by creationDate:DESC'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Loan products returned.
          headers:
            Items-Limit:
              schema:
                type: integer
                format: int32
              description: Pagination details, the requested page size
            Items-Offset:
              description: Pagination details, the index of the first returned item
              schema:
                type: integer
                format: int32
            Items-Total:
              schema:
                type: integer
                format: int32
              description: Pagination details, the total available items
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: "#/components/schemas/LoanProduct"
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object

  "/api/v1/core/loans:search":
    post:
      tags:
        - LoanAccountsSearch
      summary: Search loan accounts
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/loans:search
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: search
      parameters:
        - name: offset
          in: query
          description: Pagination, index to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: Pagination, cursor to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Pagination, the number of elements to retrieve, used in combination
            with offset to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: paginationDetails
          in: query
          description: Flag specifying whether the pagination  details should be provided
            in response headers. Please note that by default it is disabled (OFF), in
            order to improve the performance of the APIs
          required: false
          schema:
            type: string
            default: 'OFF'
            enum:
              - 'ON'
              - 'OFF'
        - name: detailsLevel
          in: query
          description: 'The level of details to return: `FULL` means the full details
          of the object will be returned (custom field values, address, contact info,
          or any other related objects) and `BASIC` will return only the first level
          elements of the object.'
          required: false
          schema:
            type: string
            enum:
              - BASIC
              - FULL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              #$ref: "#/components/schemas/LoanAccountSearchCriteria"
              type: object
      responses:
        '200':
          description: Result of loan account search.
          headers:
            Items-Limit:
              schema:
                type: integer
                format: int32
              description: Pagination details, the requested page size
            Items-Offset:
              description: Pagination details, the index of the first returned item
              schema:
                type: integer
                format: int32
            Items-Total:
              schema:
                type: integer
                format: int32
              description: Pagination details, the total available items
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object

  "/api/v1/core/loans/{loanAccountId}":
    get:
      tags:
        - Loan Accounts
      summary: Get loan account
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.loanAccountId: "method.request.path.loanAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/loans/{loanAccountId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: getById
      parameters:
        - name: loanAccountId
          in: path
          description: The ID or encoded key of the loan account.
          required: true
          schema:
            type: string
        - name: detailsLevel
          in: query
          description: 'The level of details to return: `FULL` means the full details
            of the object will be returned (custom field values, address, contact info,
            or any other related objects) and `BASIC` will return only the first level
            elements of the object.'
          required: false
          schema:
            type: string
            enum:
              - BASIC
              - FULL
      responses:
        '200':
          description: Loan account returned.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/LoanAccount"
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
    put:
      tags:
        - Loan Accounts
      summary: Update loan account
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: PUT
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.loanAccountId: "method.request.path.loanAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/loans/{loanAccountId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: update
      parameters:
        - name: loanAccountId
          in: path
          description: The ID or encoded key of the loan account.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              #$ref: "#/components/schemas/LoanAccount"
              type: object
      responses:
        '200':
          description: Loan account updated.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/LoanAccount"
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
    delete:
      tags:
        - Loan Accounts
      summary: Delete loan account
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.loanAccountId: "method.request.path.loanAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/loans/{loanAccountId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: delete
      parameters:
        - name: loanAccountId
          in: path
          description: The ID or encoded key of the loan account.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Loan account deleted.
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
    patch:
      tags:
        - Loan Accounts
      summary: Partially update loan account
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.loanAccountId: "method.request.path.loanAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/loans/{loanAccountId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: patch
      parameters:
        - name: loanAccountId
          in: path
          description: The ID or encoded key of the loan account.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                #$ref: "#/components/schemas/PatchOperation"
                type: object
      responses:
        '204':
          description: Loan account updated.
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object

  "/api/v1/core/loans/{loanAccountId}/authorizationholds":
    get:
      tags:
        - Loan Accounts
      summary: Get authorization holds related to a loan account, ordered from newest
        to oldest by creation date
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.loanAccountId: "method.request.path.loanAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/loans/{loanAccountId}/authorizationholds
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: getAllAuthorizationHolds
      parameters:
        - name: loanAccountId
          in: path
          description: The ID or encoded key of the loan account.
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: Pagination, index to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: Pagination, cursor to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Pagination, the number of elements to retrieve, used in combination
            with offset to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: paginationDetails
          in: query
          description: Flag specifying whether the pagination  details should be provided
            in response headers. Please note that by default it is disabled (OFF), in
            order to improve the performance of the APIs
          required: false
          schema:
            type: string
            default: 'OFF'
            enum:
              - 'ON'
              - 'OFF'
        - name: status
          in: query
          description: The status of the authorization holds to filter on
          required: false
          schema:
            type: string
            enum:
              - PENDING
              - REVERSED
              - SETTLED
              - EXPIRED
      responses:
        '200':
          description: The list of authorization holds has been returned.
          headers:
            Items-Limit:
              schema:
                type: integer
                format: int32
              description: Pagination details, the requested page size
            Items-Offset:
              description: Pagination details, the index of the first returned item
              schema:
                type: integer
                format: int32
            Items-Total:
              schema:
                type: integer
                format: int32
              description: Pagination details, the total available items
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: "#/components/schemas/GetAuthorizationHold"
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object

  "/api/v1/core/loans/{loanAccountId}/cards":
    get:
      tags:
        - Loan Accounts
      summary: Get cards associated with an account
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.loanAccountId: "method.request.path.loanAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/loans/{loanAccountId}/cards
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: getAllCards
      parameters:
        - name: loanAccountId
          in: path
          description: The ID or encoded key of the loan account.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The list of cards attached to the account was returned.
          headers:
            Items-Limit:
              schema:
                type: integer
                format: int32
              description: Pagination details, the requested page size
            Items-Offset:
              description: Pagination details, the index of the first returned item
              schema:
                type: integer
                format: int32
            Items-Total:
              schema:
                type: integer
                format: int32
              description: Pagination details, the total available items
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: "#/components/schemas/Card"
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
    post:
      tags:
        - Loan Accounts
      summary: Represents the information needed to create and associate a new card
        to an account.
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.loanAccountId: "method.request.path.loanAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/loans/{loanAccountId}/cards
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: createCard
      parameters:
        - name: Idempotency-Key
          in: header
          description: Key that can be used to support idempotency on this POST. Must
            be a valid UUID(version 4 is recommended) string and can only be used with
            the exact same request. Can be used in retry mechanisms to prevent double
            posting.
          required: false
          schema:
            type: string
        - name: loanAccountId
          in: path
          description: The ID or encoded key of the loan account.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              #$ref: "#/components/schemas/Card"
              type: object
      responses:
        '201':
          description: The card was created.
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object

  "/api/v1/core/loans":
    get:
      tags:
        - Loan Accounts
      summary: Get loan accounts
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/loans
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: getAll
      parameters:
        - name: offset
          in: query
          description: Pagination, index to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: Pagination, cursor to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Pagination, the number of elements to retrieve, used in combination
            with offset to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: paginationDetails
          in: query
          description: Flag specifying whether the pagination  details should be provided
            in response headers. Please note that by default it is disabled (OFF), in
            order to improve the performance of the APIs
          required: false
          schema:
            type: string
            default: 'OFF'
            enum:
              - 'ON'
              - 'OFF'
        - name: detailsLevel
          in: query
          description: 'The level of details to return: `FULL` means the full details
          of the object will be returned (custom field values, address, contact info,
          or any other related objects) and `BASIC` will return only the first level
          elements of the object.'
          required: false
          schema:
            type: string
            enum:
              - BASIC
              - FULL
        - name: creditOfficerUsername
          in: query
          description: The username of the credit officer to whom the entities are assigned
            to
          required: false
          schema:
            type: string
        - name: branchId
          in: query
          description: The id/encodedKey of the branch to which the entities are assigned
            to
          required: false
          schema:
            type: string
        - name: centreId
          in: query
          description: The id/encodedKey of the centre to which the entities are assigned
            to
          required: false
          schema:
            type: string
        - name: accountState
          in: query
          description: The state of the loan account to search for
          required: false
          schema:
            type: string
            enum:
              - PARTIAL_APPLICATION
              - PENDING_APPROVAL
              - APPROVED
              - ACTIVE
              - ACTIVE_IN_ARREARS
              - CLOSED
        - name: accountHolderType
          in: query
          description: 'The type of the account holder: CLIENT/GROUP'
          required: false
          schema:
            type: string
            enum:
              - CLIENT
              - GROUP
        - name: accountHolderId
          in: query
          description: The id of the account holder
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: 'The criteria based on which the records will be sorted. Expected
          format is <field:order>, for example, sortBy = field1:ASC,field2:DESC.<br/>Only
          the following fields can be used: id, loanName, creationDate, lastModifiedDate<br/>Default
          sorting is done by creationDate:ASC'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Loan accounts list returned.
          headers:
            Items-Limit:
              schema:
                type: integer
                format: int32
              description: Pagination details, the requested page size
            Items-Offset:
              description: Pagination details, the index of the first returned item
              schema:
                type: integer
                format: int32
            Items-Total:
              schema:
                type: integer
                format: int32
              description: Pagination details, the total available items
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: "#/components/schemas/LoanAccount"
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
    post:
      tags:
        - Loan Accounts
      summary: Create loan account
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/loans
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: create
      parameters:
        - name: Idempotency-Key
          in: header
          description: Key that can be used to support idempotency on this POST. Must
            be a valid UUID(version 4 is recommended) string and can only be used with
            the exact same request. Can be used in retry mechanisms to prevent double
            posting.
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              #$ref: "#/components/schemas/LoanAccount"
              type: object
      responses:
        '201':
          description: Loan account created.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/LoanAccount"
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object

  "/api/v1/core/loans/{loanAccountId}/plannedfees/{plannedInstallmentFeeKey}":
    delete:
      tags:
        - Loan Account Planned Fees
      summary: Delete planned fee
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.loanAccountId: "method.request.path.loanAccountId"
          integration.request.path.plannedInstallmentFeeKey: "method.request.path.plannedInstallmentFeeKey"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/loans/{loanAccountId}/plannedfees/{plannedInstallmentFeeKey}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: deletePlannedFees
      parameters:
        - name: loanAccountId
          in: path
          description: The ID or encoded key of the loan account.
          required: true
          schema:
            type: string
        - name: plannedInstallmentFeeKey
          in: path
          description: The encoded key of the planned installment fee to be deleted.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Loan account planned installment fee was deleted.
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object

  "/api/v1/core/loans/transactions:search":
    post:
      tags:
        - Loan Transactions
      summary: Search loan transactions
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/loans/transactions:search
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: search
      parameters:
        - name: offset
          in: query
          description: Pagination, index to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: Pagination, cursor to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Pagination, the number of elements to retrieve, used in combination
            with offset to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: paginationDetails
          in: query
          description: Flag specifying whether the pagination  details should be provided
            in response headers. Please note that by default it is disabled (OFF), in
            order to improve the performance of the APIs
          required: false
          schema:
            type: string
            default: 'OFF'
            enum:
              - 'ON'
              - 'OFF'
        - name: detailsLevel
          in: query
          description: 'The level of details to return: `FULL` means the full details
            of the object will be returned (custom field values, address, contact info,
            or any other related objects) and `BASIC` will return only the first level
            elements of the object.'
          required: false
          schema:
            type: string
            enum:
              - BASIC
              - FULL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              #$ref: "#/components/schemas/LoanTransactionSearchCriteria"
              type: object
      responses:
        '200':
          description: Result of a loan transaction search.
          headers:
            Items-Next-Cursor:
              schema:
                type: string
              description: The next cursor to be used by the subsequent calls
            Items-Limit:
              schema:
                type: integer
                format: int32
              description: Pagination details, the requested page size
            Items-Offset:
              schema:
                type: integer
                format: int32
              description: Pagination details, the index of the first returned item
            Items-Total:
              schema:
                type: integer
                format: int32
              description: Pagination details, the total available items
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: "#/components/schemas/LoanTransaction"
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object

  "/api/v1/core/loans/transactions/{loanTransactionId}":
    get:
      tags:
        - Loan Transactions
      summary: Get loan transaction
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/loans/transactions/{loanTransactionId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: getById
      parameters:
        - name: loanTransactionId
          in: path
          description: The ID or encoded key of the loan transaction to be returned.
          required: true
          schema:
            type: string
        - name: detailsLevel
          in: query
          description: 'The level of details to return: `FULL` means the full details
            of the object will be returned (custom field values, address, contact info,
            or any other related objects) and `BASIC` will return only the first level
            elements of the object.'
          required: false
          schema:
            type: string
            enum:
              - BASIC
              - FULL
      responses:
        '200':
          description: Loan transaction returned.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/LoanTransaction"
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object

  "/api/v1/core/loans/{loanAccountId}/transactions":
    get:
      tags:
        - Loan Transactions
      summary: Get loan transactions
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.loanAccountId: "method.request.path.loanAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/loans/{loanAccountId}/transactions
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: getAll
      parameters:
        - name: loanAccountId
          in: path
          description: The ID or encoded key of the loan account.
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: Pagination, index to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: Pagination, cursor to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Pagination, the number of elements to retrieve, used in combination
            with offset to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: paginationDetails
          in: query
          description: Flag specifying whether the pagination  details should be provided
            in response headers. Please note that by default it is disabled (OFF), in
            order to improve the performance of the APIs
          required: false
          schema:
            type: string
            default: 'OFF'
            enum:
              - 'ON'
              - 'OFF'
        - name: detailsLevel
          in: query
          description: 'The level of details to return: `FULL` means the full details
            of the object will be returned (custom field values, address, contact info,
            or any other related objects) and `BASIC` will return only the first level
            elements of the object.'
          required: false
          schema:
            type: string
            enum:
              - BASIC
              - FULL
      responses:
        '200':
          description: Loan transactions list returned.
          headers:
            Items-Limit:
              schema:
                type: integer
                format: int32
              description: Pagination details, the requested page size
            Items-Offset:
              schema:
                type: integer
                format: int32
              description: Pagination details, the index of the first returned item
            Items-Total:
              schema:
                type: integer
                format: int32
              description: Pagination details, the total available items
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: "#/components/schemas/LoanTransaction"
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object

  "/api/v1/core/loans/{loanAccountId}/schedule":
    get:
      tags:
        - Loan Account Schedule
      summary: Get loan account schedule
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.loanAccountId: "method.request.path.loanAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/loans/{loanAccountId}/schedule
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: getScheduleForLoanAccount
      parameters:
        - name: loanAccountId
          in: path
          description: The ID or encoded key of the loan account.
          required: true
          schema:
            type: string
        - name: detailsLevel
          in: query
          description: 'The level of details to return: `FULL` means the full details
            of the object will be returned (custom field values, address, contact info,
            or any other related objects) and `BASIC` will return only the first level
            elements of the object.'
          required: false
          schema:
            type: string
            enum:
              - BASIC
              - FULL
      responses:
        '200':
          description: Loan account schedule returned by the loan account ID or encoded
            key.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/LoanAccountSchedule"
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
    put:
      tags:
        - Loan Account Schedule
      summary: Update loan account schedule
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: PUT
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.loanAccountId: "method.request.path.loanAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/loans/{loanAccountId}/schedule
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: editSchedule
      parameters:
        - name: loanAccountId
          in: path
          description: The ID or encoded key of the loan account.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                #$ref: "#/components/schemas/Installment"
                type: object
      responses:
        '200':
          description: Updated loan account schedule.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/LoanAccountSchedule"
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object

  # GL

  /api/v1/core/gljournalentries:
    get:
      tags:
        - Journal Entries
      summary: Get general ledger journal entries
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/gljournalentries
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: offset
          in: query
          description: >-
            Pagination, index to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: >-
            Pagination, cursor to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            Pagination, the number of elements to retrieve, used in combination
            with offset to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: paginationDetails
          in: query
          description: >-
            Flag specifying whether the pagination  details should be provided
            in response headers. Please note that by default it is disabled
            (OFF), in order to improve the performance of the APIs
          required: false
          schema:
            type: string
            default: 'OFF'
            enum:
              - 'ON'
              - 'OFF'
        - name: from
          in: query
          description: The booking date to search from for general ledger journal entries.
          required: true
          schema:
            type: string
            format: date
        - name: to
          in: query
          description: The booking date to search to for general ledger journal entries.
          required: true
          schema:
            type: string
            format: date
        - name: branchId
          in: query
          description: The branch ID to filter general ledger journal entries by.
          required: false
          schema:
            type: string
        - name: glAccountId
          in: query
          description: >-
            The general ledger account ID to filter general ledger journal
            entries by.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: General ledger journal entries list returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: '#/components/schemas/GLJournalEntry'
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
    post:
      tags:
        - Journal Entries
      summary: Create general ledger journal entries.
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/gljournalentries
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: Idempotency-Key
          in: header
          description: >-
            Key that can be used to support idempotency on this POST. Must be a
            valid UUID(version 4 is recommended) string and can only be used
            with the exact same request. Can be used in retry mechanisms to
            prevent double posting.
          required: false
          schema:
            type: string
      requestBody:
        required: true
        description: Represents the information to create general ledger journal entries.
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/PostGLJournalEntriesDTO'
              type: object
      responses:
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  '/api/v1/core/gljournalentries:search':
    post:
      tags:
        - Journal Entries
      summary: Search for general ledger journal entries
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/gljournalentries:search
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: offset
          in: query
          description: >-
            Pagination, index to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: >-
            Pagination, cursor to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            Pagination, the number of elements to retrieve, used in combination
            with offset to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: paginationDetails
          in: query
          description: >-
            Flag specifying whether the pagination  details should be provided
            in response headers. Please note that by default it is disabled
            (OFF), in order to improve the performance of the APIs
          required: false
          schema:
            type: string
            default: 'OFF'
            enum:
              - 'ON'
              - 'OFF'
      requestBody:
        required: true
        description: >-
          Represents the filtering criteria and sorting criterion to search
          for general ledger journal entries.
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/GLJournalEntrySearchCriteria'
              type: object
      responses:
        '200':
          description: The general ledger journal entry search returned values.
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: '#/components/schemas/GLJournalEntry'
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  # Cards

  /api/v1/core/cards/{cardReferenceToken}/authorizationholds/{externalReferenceId}:
    get:
      summary: Redirects the request to the external card processing service.
      description: This endpoint redirects the request to the external card processing service to get card authorization hold.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.cardReferenceToken: "method.request.path.cardReferenceToken"
          integration.request.path.authorizationHoldExternalReferenceId: "method.request.path.authorizationHoldExternalReferenceId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/cards/{cardReferenceToken}/authorizationholds/{authorizationHoldExternalReferenceId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: cardReferenceToken
          in: path
          required: true
          schema:
            type: string
          description: "Unique identifier for the card reference token"
          example: "card-token-12345"
        - name: authorizationHoldExternalReferenceId
          in: path
          required: true
          schema:
            type: string
          description: "External reference ID for the authorization hold"
          example: "auth-hold-ext-ref-98765"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/GetAuthorizationHold'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
    delete:
      summary: Redirects the request to the external card processing service.
      description: This endpoint redirects the request to the external card processing service to delete card authorization hold.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.cardReferenceToken: "method.request.path.cardReferenceToken"
          integration.request.path.authorizationHoldExternalReferenceId: "method.request.path.authorizationHoldExternalReferenceId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/cards/{cardReferenceToken}/authorizationholds/{authorizationHoldExternalReferenceId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: cardReferenceToken
          in: path
          required: true
          schema:
            type: string
          description: "Unique identifier for the card reference token"
          example: "card-token-12345"
        - name: authorizationHoldExternalReferenceId
          in: path
          required: true
          schema:
            type: string
          description: "External reference ID for the authorization hold"
          example: "auth-hold-ext-ref-98765"
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
    patch:
      summary: Redirects the request to the external card processing service.
      description: This endpoint redirects the request to the external card processing service to delete card authorization hold.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.cardReferenceToken: "method.request.path.cardReferenceToken"
          integration.request.path.authorizationHoldExternalReferenceId: "method.request.path.authorizationHoldExternalReferenceId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/cards/{cardReferenceToken}/authorizationholds/{authorizationHoldExternalReferenceId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: cardReferenceToken
          in: path
          required: true
          schema:
            type: string
          description: "Unique identifier for the card reference token"
          example: "card-token-12345"
        - name: authorizationHoldExternalReferenceId
          in: path
          required: true
          schema:
            type: string
          description: "External reference ID for the authorization hold"
          example: "auth-hold-ext-ref-98765"
      requestBody:
        description: Request body for operation
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/PatchOperation'
              type: object
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object

  /api/v1/core/cards/{cardReferenceToken}/authorizationholds/{externalReferenceId}/increase:
    post:
      summary: Redirects the request to the external card processing service.
      description: This endpoint redirects the request to the external card processing service to increase authorization hold amount.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.cardReferenceToken: "method.request.path.cardReferenceToken"
          integration.request.path.authorizationHoldExternalReferenceId: "method.request.path.authorizationHoldExternalReferenceId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/cards/{cardReferenceToken}/authorizationholds/{authorizationHoldExternalReferenceId}:increase
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: cardReferenceToken
          in: path
          required: true
          schema:
            type: string
          description: "Unique identifier for the card reference token"
          example: "card-token-12345"
        - name: authorizationHoldExternalReferenceId
          in: path
          required: true
          schema:
            type: string
          description: "External reference ID for the authorization hold"
          example: "auth-hold-ext-ref-98765"
      requestBody:
        description: Request body for transaction
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/AuthorizationHoldAmountAdjustmentRequest'
              type: object
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  advice:
                    type: boolean
                    description: "Indicates whether advice is needed for the transaction"
                    example: true
                  amount:
                    type: number
                    description: "The amount associated with the transaction"
                    example: 0
                  currencyCode:
                    type: string
                    description: "The currency code of the transaction"
                    example: "USD"
                  externalReferenceId:
                    type: string
                    description: "The external reference ID associated with the transaction"
                    example: "ext-ref-98765"
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/core/cards/{cardReferenceToken}/authorizationholds/{externalReferenceId}/decrease:
    post:
      summary: Redirects the request to the external card processing service.
      description: This endpoint redirects the request to the external card processing service to decreases the amount of an authorization hold. If the amount is greater or equal to the authorization hold amount, then the authorization hold is reversed.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.cardReferenceToken: "method.request.path.cardReferenceToken"
          integration.request.path.authorizationHoldExternalReferenceId: "method.request.path.authorizationHoldExternalReferenceId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/cards/{cardReferenceToken}/authorizationholds/{authorizationHoldExternalReferenceId}:decrease
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: cardReferenceToken
          in: path
          required: true
          schema:
            type: string
          description: "Unique identifier for the card reference token"
          example: "card-token-12345"
        - name: authorizationHoldExternalReferenceId
          in: path
          required: true
          schema:
            type: string
          description: "External reference ID for the authorization hold"
          example: "auth-hold-ext-ref-98765"
      requestBody:
        description: Request body for transaction advice
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/AuthorizationHoldAmountAdjustmentRequest'
              type: object
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  advice:
                    type: boolean
                    description: "Indicates whether advice was provided for the transaction"
                    example: true
                  amount:
                    type: number
                    description: "The amount involved in the transaction"
                    example: 0
                  currencyCode:
                    type: string
                    description: "The currency code used in the transaction"
                    example: "USD"
                  externalReferenceId:
                    type: string
                    description: "The external reference ID for tracking the transaction"
                    example: "ext-ref-98765"
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/core/cards/{cardReferenceToken}/authorizationholds:
    post:
      summary: Redirects the request to the external card processing service.
      description: This endpoint redirects the request to the external card processing service to create an authorization hold corresponding to a given card.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.cardReferenceToken: "method.request.path.cardReferenceToken"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/cards/{cardReferenceToken}/authorizationholds
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: cardReferenceToken
          in: path
          required: true
          schema:
            type: string
          description: "Unique identifier for the card reference token"
          example: "card-token-12345"
      requestBody:
        description: Request body for authorization hold
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/AuthorizationHold'
              type: object
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/AuthorizationHold'
                type: object
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/core/cards/ehi:
    post:
      summary: Redirects the request to the external card processing service.
      description: This endpoint redirects the request to the external card processing service to create an authorization hold corresponding to a given card.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "9n57qb"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/json'"
        uri: https://chello.com/api/v1/cards/ehi
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      requestBody:
        description: Request body for authorization hold
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/AuthorizationHold'
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/AuthorizationHold'
                type: object
                additionalProperties: true
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  # Streaming

  /api/v1/core/subscriptions:
    post:
      description: This endpoint creates a subscription for event_types
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/v1/subscriptions
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/core/subscriptions/{subscription_id}/events:
    get:
      description: This endpoint starts a new stream for reading events from this subscription. The data will be automatically rebalanced between streams of one subscription
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.subscription_id: "method.request.path.subscription_id"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://hello.com/api/v1/subscriptions/{subscription_id}/events
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Access forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: Subscription not found
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  # Payment provider routes ####################################################################

  /api/v1/payment/validate/iban:
    post:
      summary: Validate an IBAN (advanced validation)
      description: Validates an IBAN (ISO-13616 International Bank Account Number), checking the country code, the checksum and that the length of the IBAN is correct for the country. In addition to the standard IBAN validation, the advanced validation request also deconstructs the IBAN and validates the account details.
      # x-amazon-apigateway-integration:
      #   httpMethod: POST
      #   payloadFormatVersion: 1.0
      #   type: HTTP_PROXY
      #   uri: https://???/v1/api/ValidateIbanAdvanced
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            #set($context.requestOverride.path.body = $input.body)
            #set($inputRoot = $input.path('$'))
            #if($inputRoot.Iban == 'TR350006200023400009073271')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.Iban == 'TR350006200023400009073272')
              {
                "statusCode": 200
              }
            #else
              {
                "statusCode": 400
              }
            #end
        responses:
          '200':
            statusCode: 200
            responseTemplates:
              application/json: |
                #set($body = $context.requestOverride.path.body)
                #if($util.parseJson($body).Iban == 'TR350006200023400009073271')
                  {
                    "InputIban": "TR350006200023400009073271",
                    "AdditionalValidationInfo": false,
                    "AdditionalValidationInfoText": null,
                    "OutputCountryCode": null,
                    "OutputCountryName": null,
                    "OutputIban": "TR350006200023400009073271",
                    "OutputBban": "0006200023400009073271",
                    "OutputAccountNumber": "0023400009073271",
                    "BankBranch": {
                      "BranchTitle": "",
                      "BranchCode": "",
                      "RoutingNumber": "",
                      "InstitutionTitle": "",
                      "BranchAddress": "",
                      "Bic": "",
                      "OverridingProcessingBank": "TURKIYE GARANTI BANKASI A.S.",
                      "OverridingSwiftBic": "TGBATRISXXX"
                    },
                    "InvalidIssue": null,
                    "Valid": true,
                    "InvalidReason": null,
                    "InvalidParameter": null
                  }
                #elseif($util.parseJson($body).Iban == 'TR350006200023400009073272')
                  {
                    "InputIban": "TR350006200023400009073272",
                    "AdditionalValidationInfo": false,
                    "AdditionalValidationInfoText": null,
                    "OutputCountryCode": null,
                    "OutputCountryName": null,
                    "OutputIban": "TR350006200023400009073272",
                    "OutputBban": "0006200023400009073271",
                    "OutputAccountNumber": "0023400009073271",
                    "BankBranch": {
                      "BranchTitle": "",
                      "BranchCode": "",
                      "RoutingNumber": "",
                      "InstitutionTitle": "",
                      "BranchAddress": "",
                      "Bic": "",
                      "OverridingProcessingBank": "TURKIYE GARANTI BANKASI A.S.",
                      "OverridingSwiftBic": "TGBATRISXXX"
                    },
                    "InvalidIssue": 6,
                    "Valid": false,
                    "InvalidReason": "(FAIL 02bc) = The Bank Identifier could not be found.",
                    "InvalidParameter": "iban"
                  }  
                #end
          '400':
            statusCode: 400
            responseTemplates:
              application/json: |
                {
                  "Message": "Bad Request"
                }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ApiKey
                - Iban
              properties:
                ApiKey:
                  type: string
                  description: The API key, fixed format and provided at sign up.
                Iban:
                  type: string
                  description: The IBAN to validate.
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  InputIban:
                    type: string
                    description: The IBAN that was passed into the validate operation.
                  AdditionalValidationInfo:
                    type: boolean
                    description: Indicates whether this valid result has further information regarding the result.
                  AdditionalValidationInfoText:
                    type: string
                    description: The further information text regarding this valid result.
                  OutputCountryCode:
                    type: string
                    description: The returned Country code.
                  OutputCountryName:
                    type: string
                    description: The returned Country Name.
                  OutputIban:
                    type: string
                    description: The returned IBAN.
                  OutputBban:
                    type: string
                    description: The returned BBAN.
                  OutputAccountNumber:
                    type: string
                    description: The returned Account Number.
                  BankBranch:
                    type: object
                    description: Class containing all Bank Branch details for the given input data.
                    properties:
                      BranchTitle:
                        type: string
                        description: The Branch Title.
                      BranchCode:
                        type: string
                        description: The Bank Branch Code.
                      RoutingNumber:
                        type: string
                        description: The Routing Number.
                      InstitutionTitle:
                        type: string
                        description: The Institution Title that the Branch belongs to.
                      BranchAddress:
                        type: string
                        description: The Address of the Branch.
                      Bic:
                        type: string
                        description: The BIC for the Branch.
                      OverridingProcessingBank:
                        type: string
                        description: The Override processing Bank.
                      OverridingSwiftBic:
                        type: string
                        description: The Override SWIFT BIC.
                  InvalidIssue:
                    type: number
                    enum:
                      - 0
                      - 1
                      - 2
                      - 3
                      - 4
                      - 5
                      - 6
                      - 7
                      - 8
                      - 9
                      - 10
                      - 11
                      - 12
                      - 13
                      - -1
                    description: Enum value indicating any the reason for validation failure
                  Valid:
                    type: boolean
                    description: Whether the validation operation deemed the data valid.
                  InvalidReason:
                    type: string
                    description: If not valid, a human readable description of the reason.
                  InvalidParameter:
                    type: string
                    description: If not valid, the input parameter which was responsible. Empty if a single parameter cannot be attributed.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '401':
          description: Returned if the given verifier requires authentication and the user is currently not authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
  /api/v1/payment/validate/bban:
    post:
      summary: Validate a BBAN
      description: Validates a BBAN (Basic Bank Account Number) against the provided IBAN country. The BBAN format is validated and then deconstructed so that its constituent account details can also be verified
      # x-amazon-apigateway-integration:
      #   httpMethod: POST
      #   payloadFormatVersion: 1.0
      #   type: HTTP_PROXY
      #   uri: https://???/v1/api/ValidateBban
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            #set($context.requestOverride.path.body = $input.body)
            #set($inputRoot = $input.path('$'))
            #if($inputRoot.BBan == 'LOYD30919700875502')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.BBan == 'LOYD30919700875503')
              {
                "statusCode": 200
              }
            #else
              {
                "statusCode": 400
              }
            #end
        responses:
          '200':
            statusCode: 200
            responseTemplates:
              application/json: |
                #set($body = $context.requestOverride.path.body)
                #if($util.parseJson($body).BBan == 'LOYD30919700875502')
                  {
                    "InputCountryCode": "GB",
                    "InputBban": "LOYD30919700875502",
                    "AdditionalValidationInfo": false,
                    "AdditionalValidationInfoText": null,
                    "OutputCountryCode": "GB",
                    "OutputCountryName": "UNITED KINGDOM",
                    "OutputIban": "GB24LOYD30919700875502",
                    "OutputBban": "LOYD30919700875502",
                    "OutputAccountNumber": "00875502",
                    "BankBranch": {
                      "BranchTitle": "(CHICHESTER - 309197)",
                      "BranchCode": "LOYD309197",
                      "RoutingNumber": "309197",
                      "InstitutionTitle": "LLOYDS BANK PLC",
                      "BranchAddress": "10 EAST STREET, CHICHESTER, UNITED KINGDOM, PO191HJ",
                      "Bic": "LOYDGB21233",
                      "OverridingProcessingBank": "LLOYDS BANK PLC",
                      "OverridingSwiftBic": "LOYDGB21233"
                    },
                    "InvalidIssue": 0,
                    "Valid": true,
                    "InvalidReason": "",
                    "InvalidParameter": ""
                  }
                #elseif($util.parseJson($body).BBan == 'LOYD30919700875503')
                  {
                    "InputCountryCode": "GB",
                    "InputBban": "LOYD30919700875503",
                    "AdditionalValidationInfo": false,
                    "AdditionalValidationInfoText": null,
                    "OutputCountryCode": "GB",
                    "OutputCountryName": "UNITED KINGDOM",
                    "OutputIban": "GB24LOYD30919700875503",
                    "OutputBban": "LOYD30919700875503",
                    "OutputAccountNumber": "00875502",
                    "BankBranch": {
                      "BranchTitle": "(CHICHESTER - 309197)",
                      "BranchCode": "LOYD309197",
                      "RoutingNumber": "309197",
                      "InstitutionTitle": "LLOYDS BANK PLC",
                      "BranchAddress": "10 EAST STREET, CHICHESTER, UNITED KINGDOM, PO191HJ",
                      "Bic": "LOYDGB21233",
                      "OverridingProcessingBank": "LLOYDS BANK PLC",
                      "OverridingSwiftBic": "LOYDGB21233"
                    },
                    "InvalidIssue": 0,
                    "Valid": false,
                    "InvalidReason": "Invalid Reason",
                    "InvalidParameter": "Invalid Parameter"
                  }
                #end
          '400':
            statusCode: 400
            responseTemplates:
              application/json: |
                {
                  "Message": "Bad Request"
                }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ApiKey
                - CountryCode
                - BBan
              properties:
                ApiKey:
                  type: string
                  description: The API key, fixed format and provided at sign up.
                CountryCode:
                  type: string
                  description: The country code
                BBan:
                  type: string
                  description: The BBAN
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  InputCountryCode:
                    type: string
                    description: The Country code that was passed into the validate operation.
                  InputBban:
                    type: string
                    description: The BBAN that was passed into the validate operation.
                  AdditionalValidationInfo:
                    type: boolean
                    description: Indicates whether this valid result has further information regarding the result.
                  AdditionalValidationInfoText:
                    type: string
                    description: The further information text regarding this valid result.
                  OutputCountryCode:
                    type: string
                    description: The returned Country code.
                  OutputCountryName:
                    type: string
                    description: The returned Country Name.
                  OutputIban:
                    type: string
                    description: The returned IBAN.
                  OutputBban:
                    type: string
                    description: The returned BBAN.
                  OutputAccountNumber:
                    type: string
                    description: The returned Account Number.
                  BankBranch:
                    type: object
                    description: Class containing all Bank Branch details for the given input data.
                    properties:
                      BranchTitle:
                        type: string
                        description: The Branch Title.
                      BranchCode:
                        type: string
                        description: The Bank Branch Code.
                      RoutingNumber:
                        type: string
                        description: The Routing Number.
                      InstitutionTitle:
                        type: string
                        description: The Institution Title that the Branch belongs to.
                      BranchAddress:
                        type: string
                        description: The Address of the Branch.
                      Bic:
                        type: string
                        description: The BIC for the Branch.
                      OverridingProcessingBank:
                        type: string
                        description: The Override processing Bank.
                      OverridingSwiftBic:
                        type: string
                        description: The Override SWIFT BIC.
                  InvalidIssue:
                    type: number
                    enum:
                      - 0
                      - 1
                      - 2
                      - 3
                      - 4
                      - 5
                      - 6
                      - 7
                      - 8
                      - 9
                      - 10
                      - 11
                      - 12
                      - 13
                      - -1
                    description: Enum value indicating any the reason for validation failure
                  Valid:
                    type: boolean
                    description: Whether the validation operation deemed the data valid.
                  InvalidReason:
                    type: string
                    description: If not valid, a human readable description of the reason.
                  InvalidParameter:
                    type: string
                    description: If not valid, the input parameter which was responsible. Empty if a single parameter cannot be attributed.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '401':
          description: Returned if the given verifier requires authentication and the user is currently not authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
  /api/v1/payment/validate/domestic-account:
    post:
      summary: Validate a domestic account
      description: Validates a domestic account details against the provided IBAN country, checking that the bank branch exists and that the account passes the appropriate modulus check for the institution. It also returns, where possible, a converted IBAN (ISO-13616 International Bank Account Number) and BBAN (Basic Bank Account Number) for the account and bank branch administrative details.
      # x-amazon-apigateway-integration:
      #   httpMethod: POST
      #   payloadFormatVersion: 1.0
      #   type: HTTP_PROXY
      #   uri: https://???/v1/api/ValidateDomesticAccount
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            #set($context.requestOverride.path.body = $input.body)
            #set($inputRoot = $input.path('$'))
            #if($inputRoot.AccountNumber == '0875529')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.AccountNumber == '0875530')
              {
                "statusCode": 200
              }
            #else
              {
                "statusCode": 400
              }
            #end
        responses:
          '200':
            statusCode: 200
            responseTemplates:
              application/json: |
                #set($body = $context.requestOverride.path.body)
                #if($util.parseJson($body).AccountNumber == '0875529')
                  {
                    "InputCountryCode": "GB",
                    "InputBankIdentifier": "309197",
                    "InputAccountNumber": "0875529",
                    "AdditionalValidationInfo": false,
                    "AdditionalValidationInfoText": null,
                    "OutputCountryCode": "GB",
                    "OutputCountryName": "UNITED KINGDOM",
                    "OutputIban": "GB71LOYD30919700875529",
                    "OutputBban": "LOYD30919700875529",
                    "OutputAccountNumber": "00875529",
                    "BankBranch": {
                      "BranchTitle": "(CHICHESTER - 309197)",
                      "BranchCode": "LOYD309197",
                      "RoutingNumber": "309197",
                      "InstitutionTitle": "LLOYDS BANK PLC",
                      "BranchAddress": "10 EAST STREET, CHICHESTER, UNITED KINGDOM, PO191HJ",
                      "Bic": "LOYDGB21233",
                      "OverridingProcessingBank": "LLOYDS BANK PLC",
                      "OverridingSwiftBic": "LOYDGB21233"
                    },
                    "InvalidIssue": 0,
                    "Valid": true,
                    "InvalidReason": "",
                    "InvalidParameter": ""
                  }
                #elseif($util.parseJson($body).AccountNumber == '0875530')
                  {
                    "InputCountryCode": "GB",
                    "InputBankIdentifier": "309197",
                    "InputAccountNumber": "0875530",
                    "AdditionalValidationInfo": false,
                    "AdditionalValidationInfoText": null,
                    "OutputCountryCode": "GB",
                    "OutputCountryName": "UNITED KINGDOM",
                    "OutputIban": "GB71LOYD30919700875530",
                    "OutputBban": "LOYD30919700875530",
                    "OutputAccountNumber": "00875530",
                    "BankBranch": {
                      "BranchTitle": "(CHICHESTER - 309197)",
                      "BranchCode": "LOYD309197",
                      "RoutingNumber": "309197",
                      "InstitutionTitle": "LLOYDS BANK PLC",
                      "BranchAddress": "10 EAST STREET, CHICHESTER, UNITED KINGDOM, PO191HJ",
                      "Bic": "LOYDGB21233",
                      "OverridingProcessingBank": "LLOYDS BANK PLC",
                      "OverridingSwiftBic": "LOYDGB21233"
                    },
                    "InvalidIssue": 0,
                    "Valid": false,
                    "InvalidReason": "Invalid Reason",
                    "InvalidParameter": "Invalid Parameter"
                  }
                #end
          '400':
            statusCode: 400
            responseTemplates:
              application/json: |
                {
                  "Message": "Bad Request"
                }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ApiKey
                - CountryCode
                - BankIdentifier
                - AccountNumber
              properties:
                ApiKey:
                  type: string
                  description: The API key, fixed format and provided at sign up.
                CountryCode:
                  type: string
                  description: The country code.
                BankIdentifier:
                  type: string
                  description: The bank identifier.
                AccountNumber:
                  type: string
                  description: The account number.
                AdditionalData:
                  type: string
                  description: Any additional data.
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  InputCountryCode:
                    type: string
                    description: The Country code that was passed into the validate operation.
                  InputBankIdentifier:
                    type: string
                    description: The Bank Branch Code or Institution Title passed into the validate operation.
                  InputAccountNumber:
                    type: string
                    description: The Account Number passed into the validate operation.
                  AdditionalValidationInfo:
                    type: boolean
                    description: Indicates whether this valid result has further information regarding the result.
                  AdditionalValidationInfoText:
                    type: string
                    description: The further information text regarding this valid result.
                  OutputCountryCode:
                    type: string
                    description: The returned Country code.
                  OutputCountryName:
                    type: string
                    description: The returned Country Name.
                  OutputIban:
                    type: string
                    description: The returned IBAN.
                  OutputBban:
                    type: string
                    description: The returned BBAN.
                  OutputAccountNumber:
                    type: string
                    description: The returned Account Number.
                  BankBranch:
                    type: object
                    description: Class containing all Bank Branch details for the given input data.
                    properties:
                      BranchTitle:
                        type: string
                        description: The Branch Title.
                      BranchCode:
                        type: string
                        description: The Bank Branch Code.
                      RoutingNumber:
                        type: string
                        description: The Routing Number.
                      InstitutionTitle:
                        type: string
                        description: The Institution Title that the Branch belongs to.
                      BranchAddress:
                        type: string
                        description: The Address of the Branch.
                      Bic:
                        type: string
                        description: The BIC for the Branch.
                      OverridingProcessingBank:
                        type: string
                        description: The Override processing Bank.
                      OverridingSwiftBic:
                        type: string
                        description: The Override SWIFT BIC.
                  InvalidIssue:
                    type: number
                    enum:
                      - 0
                      - 1
                      - 2
                      - 3
                      - 4
                      - 5
                      - 6
                      - 7
                      - 8
                      - 9
                      - 10
                      - 11
                      - 12
                      - 13
                      - -1
                    description: Enum value indicating any the reason for validation failure
                  Valid:
                    type: boolean
                    description: Whether the validation operation deemed the data valid.
                  InvalidReason:
                    type: string
                    description: If not valid, a human readable description of the reason.
                  InvalidParameter:
                    type: string
                    description: If not valid, the input parameter which was responsible. Empty if a single parameter cannot be attributed.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '401':
          description: Returned if the given verifier requires authentication and the user is currently not authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
  /api/v1/payment/validate/international-account:
    post:
      summary: Validate an account using international server
      description: Validates an account using the provided account details, returning a full response from the international server.
      # x-amazon-apigateway-integration:
      #   httpMethod: POST
      #   payloadFormatVersion: 1.0
      #   type: HTTP_PROXY
      #   uri: https://???/v1/api/InternationalValidate
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            #set($context.requestOverride.path.body = $input.body)
            #set($inputRoot = $input.path('$'))
            #if($inputRoot.AccountNumber == 'TR350006200023400009073271')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.AccountNumber == 'TR350006200023400009073272')
              {
                "statusCode": 200
              }
            #else
              {
                "statusCode": 400
              }
            #end
        responses:
          '200':
            statusCode: 200
            responseTemplates:
              application/json: |
                #set($body = $context.requestOverride.path.body)
                #if($util.parseJson($body).AccountNumber == 'TR350006200023400009073271')
                  {
                    "InputCountryCode": "",
                    "InputBankIdentifier": "",
                    "InputAccountNumber": "TR350006200023400009073271",
                    "ErrorMessageDescription": "",
                    "Response": {
                      "Unabridged": {
                        "CountryCode": "TR",
                        "NationalId": null,
                        "AccountNumber": "TR350006200023400009073271",
                        "RecommendedNatId": null,
                        "RecommendedAcct": "TR350006200023400009073271",
                        "RecommendedBIC": "TGBATRISXXX",
                        "Status": "FAIL",
                        "Comment": "The bank code you entered cannot be found (02bc)",
                        "Ref": null,
                        "Group": null,
                        "BranchDetails": null,
                        "PaymentBicDetails": {
                          "BranchTypeLabel": "IBAN BIC Branch",
                          "BankName": "TURKIYE GARANTI BANKASI A.S.",
                          "Branch": "EFT MERKEZI",
                          "Addrc": "GENEL MUDURLUK AYTAR CAD. 2 NISPETIYE MAH. ZINCIRLIKUYU, ISTANBUL, ISTANBUL, TURKEY, 34340",
                          "Country": "TURKEY",
                          "CodeDetails": {
                            "CodeName1": "BIC",
                            "CodeValue1": "TGBATRISXXX",
                            "CodeName2": "CHIPS",
                            "CodeValue2": "003111",
                            "CodeName3": "BIC-4",
                            "CodeValue3": "TGBA",
                            "CodeName4": "Banka Kodu",
                            "CodeValue4": "006299999"
                          },
                          "AdditionalData": {
                            "SsiAvailable": "Y",
                            "PayServiceAvailable": "N",
                            "ContactsAvailable": "N",
                            "MessageAvailable": "Y",
                            "HolidayAvailable": "Y"
                          }
                        },
                        "AccountDetails": {
                          "Iban": "TR350006200023400009073271",
                          "Bban": "0006200023400009073271",
                          "Domestic": "0023400009073271"
                        },
                        "Bic8": null,
                        "DataStore": null,
                        "NoBranch": "No",
                        "PayBranchType": "I",
                        "FreeToken": null
                      }
                    }
                  }
                #elseif($util.parseJson($body).AccountNumber == 'TR350006200023400009073272')
                  {
                    "InputCountryCode": "",
                    "InputBankIdentifier": "",
                    "InputAccountNumber": "TR350006200023400009073272",
                    "ErrorMessageDescription": "Error Message",
                    "Response": {
                      "Unabridged": {
                        "CountryCode": "TR",
                        "NationalId": null,
                        "AccountNumber": "TR350006200023400009073272",
                        "RecommendedNatId": null,
                        "RecommendedAcct": "TR350006200023400009073272",
                        "RecommendedBIC": "TGBATRISXXX",
                        "Status": "FAIL",
                        "Comment": "The bank code you entered cannot be found (02bc)",
                        "Ref": null,
                        "Group": null,
                        "BranchDetails": null,
                        "PaymentBicDetails": {
                          "BranchTypeLabel": "IBAN BIC Branch",
                          "BankName": "TURKIYE GARANTI BANKASI A.S.",
                          "Branch": "EFT MERKEZI",
                          "Addrc": "GENEL MUDURLUK AYTAR CAD. 2 NISPETIYE MAH. ZINCIRLIKUYU, ISTANBUL, ISTANBUL, TURKEY, 34340",
                          "Country": "TURKEY",
                          "CodeDetails": {
                            "CodeName1": "BIC",
                            "CodeValue1": "TGBATRISXXX",
                            "CodeName2": "CHIPS",
                            "CodeValue2": "003111",
                            "CodeName3": "BIC-4",
                            "CodeValue3": "TGBA",
                            "CodeName4": "Banka Kodu",
                            "CodeValue4": "006299999"
                          },
                          "AdditionalData": {
                            "SsiAvailable": "Y",
                            "PayServiceAvailable": "N",
                            "ContactsAvailable": "N",
                            "MessageAvailable": "Y",
                            "HolidayAvailable": "Y"
                          }
                        },
                        "AccountDetails": {
                          "Iban": "TR350006200023400009073272",
                          "Bban": "0006200023400009073272",
                          "Domestic": "0023400009073272"
                        },
                        "Bic8": null,
                        "DataStore": null,
                        "NoBranch": "No",
                        "PayBranchType": "I",
                        "FreeToken": null
                      }
                    }
                  }
                #end
          '400':
            statusCode: 400
            responseTemplates:
              application/json: |
                {
                  "Message": "Bad Request"
                }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ApiKey
                - CountryCode
                - BankIdentifier
                - AccountNumber
              properties:
                ApiKey:
                  type: string
                  description: The API key, fixed format and provided at sign up.
                CountryCode:
                  type: string
                  description: The country code.
                BankIdentifier:
                  type: string
                  description: The bank identifier.
                AccountNumber:
                  type: string
                  description: The account number.
                AdditionalData:
                  type: string
                  description: Any additional data.
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  InputCountryCode:
                    type: string
                    description: The Country code that was passed into the validate operation.
                  InputBankIdentifier:
                    type: string
                    description: The Bank Branch Code or Institution Title passed into the validate operation.
                  InputAccountNumber:
                    type: string
                    description: The Account Number passed into the validate operation.
                  ErrorMessageDescription:
                    type: string
                    description: Contains an error message describing why the call to the validation server cannot be completed.
                  Response:
                    type: object
                    properties:
                      Unabridged:
                        type: object
                        properties:
                          CountryCode:
                            type: string
                            description: The ISO 3166-1 alpha-2 Country Code of the Country.
                          NationalId:
                            type: string
                            description: National Id
                          AccountNumber:
                            type: string
                            description: Account Number
                          RecommendedNatId:
                            type: string
                            description: Recommended National Id
                          RecommendedAcct:
                            type: string
                            description: Recommended Account
                          RecommendedBIC:
                            type: string
                            description: Recommended BIC
                          Status:
                            type: string
                            description: Status
                          Comment:
                            type: string
                            description: Comment
                          Ref:
                            type: string
                            description: Reference
                          Group:
                            type: string
                            description: Group
                          BranchDetails:
                            type: string
                            description: Branch Details
                          PaymentBicDetails:
                            type: object
                            properties:
                              BranchTypeLabel:
                                type: string
                                description: Branch Type Label
                              BankName:
                                type: string
                                description: Bank Name
                              Branch:
                                type: string
                                description: Branch
                              Addrc:
                                type: string
                                description: Address
                              Country:
                                type: string
                                description: Country
                              CodeDetails:
                                type: object
                                properties:
                                  CodeName1:
                                    type: string
                                    description: First Code Name
                                  CodeValue1:
                                    type: string
                                    description: First Code Value
                                  CodeName2:
                                    type: string
                                    description: Second Code Name
                                  CodeValue2:
                                    type: string
                                    description: Second Code Value
                                  CodeName3:
                                    type: string
                                    description: Third Code Name
                                  CodeValue3:
                                    type: string
                                    description: Third Code Value
                                  CodeName4:
                                    type: string
                                    description: Fourth Code Name
                                  CodeValue4:
                                    type: string
                                    description: Fourth Code Value
                              AdditionalData:
                                type: object
                                properties:
                                  SsiAvailable:
                                    type: string
                                    description: Ssi Available
                                  PayServiceAvailable:
                                    type: string
                                    description: Pay Service Available
                                  ContactsAvailable:
                                    type: string
                                    description: Contacts Available
                                  MessageAvailable:
                                    type: string
                                    description: Message Available
                                  HolidayAvailable:
                                    type: string
                                    description: Holiday Available
                          AccountDetails:
                            type: object
                            properties:
                              Iban:
                                type: string
                                description: Iban
                              Bban:
                                type: string
                                description: Bban
                              Domestic:
                                type: string
                                description: Domestic
                          Bic8:
                            type: string
                            description: Bic8
                          DataStore:
                            type: string
                            description: DataStore
                          NoBranch:
                            type: string
                            description: No Branch
                          PayBranchType:
                            type: string
                            description: Pay Branch Type
                          FreeToken:
                            type: string
                            description: FreeToken
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '401':
          description: Returned if the given verifier requires authentication and the user is currently not authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
  /api/v1/payment/validate/uk-account:
    post:
      summary: UK Account Validation
      description: Validate a UK account to check a bank account and sort code details against the Extended Industry Sort Code Directory (EISCD) to ensure that the bank branch exists, and to confirm the validity of the account number for that sort code algorithmically. Account details are automatically transposed where appropriate and building society roll number requirements are also validated.
      # x-amazon-apigateway-integration:
      #   httpMethod: POST
      #   payloadFormatVersion: 1.0
      #   type: HTTP_PROXY
      #   uri: https://???/v1/api/ValidateUKBankAccount
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            #set($context.requestOverride.path.body = $input.body)
            #set($inputRoot = $input.path('$'))
            #if($inputRoot.AccountNumber == '70221236')            
              {
                "statusCode": 200
              }
            #elseif($inputRoot.AccountNumber == '70221237')
              {
                "statusCode": 200
              }
            #else
              {
                "statusCode": 400
              }
            #end
        responses:
          '200':
            statusCode: 200
            responseTemplates:
              application/json: |
                #set($body = $context.requestOverride.path.body)
                #if($util.parseJson($body).AccountNumber == '70221236')         
                  {
                    "AccountDetailsInput": {
                      "SortCode": "209448",
                      "AccountNumber": "70221236",
                      "BuildingSocietyRollNumber": ""
                    },
                    "AccountDetailsOutput": {
                      "SortCode": "209448",
                      "AccountNumber": "70221236",
                      "BuildingSocietyRollNumber": ""
                    },
                    "AccountIBAN": "GB05BARC20944870221236",
                    "AccountTranscribed": false,
                    "UKBankBranch": {
                      "BankBIC": "",
                      "BranchBIC": "",
                      "BankCode": "0934",
                      "BankName": "BARCLAYS BANK PLC",
                      "BankOfficeTitle": "WESTMINSTER ABBEY",
                      "BranchName": "Victoria Street 2",
                      "OfficeTitle": "WESTMINSTER ABBEY",
                      "ContactAddress1": "",
                      "ContactAddress2": "",
                      "ContactAddress3": "",
                      "ContactAddress4": "",
                      "ContactAddressCity": "Leicester",
                      "ContactAddressCounty": "Leicestershire",
                      "ContactAddressPostCode": "LE87 2BB",
                      "ContactAddressPostCountry": "UNITED KINGDOM",
                      "ContactPhoneNumber": "0845 7555555",
                      "SortCode": "209448",
                      "DateLastChanged": "2008-09-23",
                      "TransactionInfo": {
                        "BacsCredits": true,
                        "BacsDebits": true,
                        "FasterPaymentsService": true,
                        "ChapsSterling": true,
                        "DirectDebitInstructions": true,
                        "UnpaidChequeClaims": true,
                        "DividendInterest": true,
                        "BuildingSocietyInterest": true
                      },
                      "ChapsBankBIC": "BARCGB22",
                      "ChapsBranchBIC": "XXX"
                    },
                    "RequiresBuildingSocietyRollNumber": false,
                    "BuildingSocietyRollNumberTranscribed": false,
                    "InvalidIssue": 0,
                    "Valid": true,
                    "InvalidReason": "",
                    "InvalidParameter": ""
                  }
                #elseif($util.parseJson($body).AccountNumber == '70221237')
                  {
                    "AccountDetailsInput": {
                      "SortCode": "209448",
                      "AccountNumber": "70221237",
                      "BuildingSocietyRollNumber": ""
                    },
                    "AccountDetailsOutput": {
                      "SortCode": "209448",
                      "AccountNumber": "70221237",
                      "BuildingSocietyRollNumber": ""
                    },
                    "AccountIBAN": "GB05BARC20944870221237",
                    "AccountTranscribed": false,
                    "UKBankBranch": {
                      "BankBIC": "",
                      "BranchBIC": "",
                      "BankCode": "0934",
                      "BankName": "BARCLAYS BANK PLC",
                      "BankOfficeTitle": "WESTMINSTER ABBEY",
                      "BranchName": "Victoria Street 2",
                      "OfficeTitle": "WESTMINSTER ABBEY",
                      "ContactAddress1": "",
                      "ContactAddress2": "",
                      "ContactAddress3": "",
                      "ContactAddress4": "",
                      "ContactAddressCity": "Leicester",
                      "ContactAddressCounty": "Leicestershire",
                      "ContactAddressPostCode": "LE87 2BB",
                      "ContactAddressPostCountry": "UNITED KINGDOM",
                      "ContactPhoneNumber": "0845 7555555",
                      "SortCode": "209448",
                      "DateLastChanged": "2008-09-23",
                      "TransactionInfo": {
                        "BacsCredits": true,
                        "BacsDebits": true,
                        "FasterPaymentsService": true,
                        "ChapsSterling": true,
                        "DirectDebitInstructions": true,
                        "UnpaidChequeClaims": true,
                        "DividendInterest": true,
                        "BuildingSocietyInterest": true
                      },
                      "ChapsBankBIC": "BARCGB22",
                      "ChapsBranchBIC": "XXX"
                    },
                    "RequiresBuildingSocietyRollNumber": false,
                    "BuildingSocietyRollNumberTranscribed": false,
                    "InvalidIssue": 0,
                    "Valid": false,
                    "InvalidReason": "Invalid Reason",
                    "InvalidParameter": "Invalid Parameter"
                  }
                #end
          '400':
            statusCode: 400
            responseTemplates:
              application/json: |
                {
                  "Message": "Bad Request"
                }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ApiKey
                - SortCode
                - AccountNumber
              properties:
                ApiKey:
                  type: string
                  description: The API key, fixed format and provided at sign up.
                SortCode:
                  type: string
                  description: The sort code.
                AccountNumber:
                  type: string
                  description: The account number.
                BuildingSocietyRollNumber:
                  type: string
                  description: The building society roll number.
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  AccountDetailsInput:
                    type: object
                    description: A sortcode and account number combination.
                    properties:
                      SortCode:
                        type: string
                        description: Sortcode
                      AccountNumber:
                        type: string
                        description: Account number
                      BuildingSocietyRollNumber:
                        type: string
                        description: Building Socity Roll number.
                  AccountDetailsOutput:
                    type: object
                    description: A sortcode and account number combination.
                    properties:
                      SortCode:
                        type: string
                        description: Sortcode
                      AccountNumber:
                        type: string
                        description: Account number
                      BuildingSocietyRollNumber:
                        type: string
                        description: Building Socity Roll number.
                  AccountIBAN:
                    type: string
                    description: IBAN corresponding to the UK bank account. Blank if no IBAN could be calculated.
                  AccountTranscribed:
                    type: boolean
                    description: True if the account number was transcribed.
                  UKBankBranch:
                    type: object
                    description: UK Bank branch information
                    properties:
                      BankBIC:
                        type: string
                        description: The BIC bank, that when combined with the BIC branch field, makes up the BIC for the bank office.
                      BranchBIC:
                        type: string
                        description: The BIC branch, that when combined with the BIC bank field, makes up the BIC for the bank office.
                      BankCode:
                        type: string
                        description: Bank Code
                      BankName:
                        type: string
                        description: The full name of owning bank.
                      BankOfficeTitle:
                        type: string
                        description: The title of the bank branch.
                      BranchName:
                        type: string
                        description: The full name of the bank branch.
                      OfficeTitle:
                        type: string
                        description: The title of the branch.
                      ContactAddress1:
                        type: string
                        description: Addressee name for the bank office
                      ContactAddress2:
                        type: string
                        description: Postal name for the bank office.
                      ContactAddress3:
                        type: string
                        description: Address line one of the bank office.
                      ContactAddress4:
                        type: string
                        description: Address line two of the bank office.
                      ContactAddressCity:
                        type: string
                        description: City or town of the bank office.
                      ContactAddressCounty:
                        type: string
                        description: Area or country of the bank office.
                      ContactAddressPostCode:
                        type: string
                        description: Postal code outcode of the bank office.
                      ContactAddressPostCountry:
                        type: string
                        description: Country of the bank office.
                      ContactPhoneNumber:
                        type: string
                        description: The telephone number of the bank office.
                      SortCode:
                        type: string
                        description: The sort code of the bank office.
                      DateLastChanged:
                        type: string
                        format: date-time
                        description: The date on which this record was last changed
                      TransactionInfo:
                        type: object
                        description: Class which holds information about which types of transaction are allowed on a particular sortcode.
                        properties:
                          BacsCredits:
                            type: boolean
                            description: Bank Giro Credit payments can be sent to this sort code.
                          BacsDebits:
                            type: boolean
                            description: Direct Debits can be set up on this sort code.
                          FasterPaymentsService:
                            type: boolean
                            description: Faster Payments can be sent to this sort code.
                          ChapsSterling:
                            type: boolean
                            description: CHAPS Payments can be sent to this sort code.
                          DirectDebitInstructions:
                            type: boolean
                            description: AUDDIS Direct Debit Instructions can be sent to this sort code
                          UnpaidChequeClaims:
                            type: boolean
                            description: Claims for unpaid cheques can be sent to this sort code
                          DividendInterest:
                            type: boolean
                            description: Dividend interest payments can be sent to this sort code
                          BuildingSocietyInterest:
                            type: boolean
                            description: Building Society interest payments can be sent to this sort code
                      ChapsBankBIC:
                        type: string
                        description: The Chaps BIC bank, that when combined with the Chaps BIC branch field, makes up the Chaps Routing BIC for the bank office.
                      ChapsBranchBIC:
                        type: string
                        description: The Chaps BIC branch, that when combined with the Chaps BIC bank field, makes up the Chaps Routing BIC for the bank office.
                  RequiresBuildingSocietyRollNumber:
                    type: boolean
                    description: Whether the supplied Account details require a Building Society Roll number.
                  BuildingSocietyRollNumberTranscribed:
                    type: boolean
                    description: Whether the Building Society Roll number was transcribed during validation.
                  InvalidIssue:
                    type: number
                    description: Enum value indicating any the reason for validation failure
                    enum:
                      - 0
                      - 1
                      - 2
                      - 3
                      - 4
                      - 5
                      - 6
                      - 7
                      - 8
                      - 9
                      - 10
                      - 11
                      - 12
                      - 13
                  Valid:
                    type: boolean
                    description: Whether the validation operation deemed the data valid.
                  InvalidReason:
                    type: string
                    description: If not valid, a human readable description of the reason.
                  InvalidParameter:
                    type: string
                    description: If not valid, the input parameter which was responsible. Empty if a single parameter cannot be attributed.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '401':
          description: Returned if the given verifier requires authentication and the user is currently not authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
  /api/v1/payment/confirmation-of-payee/requester:
    post:
      summary: Account Name Verification
      description: Make a CoP request to verify that payee name matches their account details. Suitable match indicator and/or reason code and correct name will be returned according to Pay.UK specifications.
      # x-amazon-apigateway-integration:
      #   httpMethod: POST
      #   payloadFormatVersion: 1.0
      #   type: HTTP_PROXY
      #   uri: https://???/pay.uk/v2.0/confirmation-payee/name-verification
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            #set($context.requestOverride.path.body = $input.body)
            #set($inputRoot = $input.path('$'))
            #if($inputRoot.Data.Identification == '44002200000000')                            
              {
                "statusCode": 200
              }
            #elseif($inputRoot.Data.Identification == '44002200000001')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.Data.Identification == '44002200000002')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.Data.Identification == '44002200000003')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.Data.Identification == '44002200000004')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.Data.Identification == '44002200000005')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.Data.Identification == '44002200000006')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.Data.Identification == '44002200000007')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.Data.Identification == '44002200000008')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.Data.Identification == '44002200000009')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.Data.Identification == '44002200000010')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.Data.Identification == '44002200000011')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.Data.Identification == '44002200000012')
              {
                "statusCode": 200
              }
            #else
              {
                "statusCode": 400
              }
            #end
        responses:
          '200':
            statusCode: 200
            responseTemplates:
              application/json: |
                #set($body = $context.requestOverride.path.body)
                #if($util.parseJson($body).Data.Identification == '44002200000000')                          
                  {
                    "Data": {
                      "VerificationReport": {
                        "Matched": true
                      }
                    },
                    "Links": {
                      "Self": "/name-verification"
                    }
                  }
                #elseif($util.parseJson($body).Data.Identification == '44002200000001')
                  {
                    "Data": {
                      "VerificationReport": {
                        "Matched": false,
                        "ReasonCode": "ANNM",
                        "Name": "William Falkner"
                      }
                    }
                  }
                #elseif($util.parseJson($body).Data.Identification == '44002200000002')
                  {
                    "Data": {
                      "VerificationReport": {
                        "Matched": false,
                        "ReasonCode": "MBAM",
                        "Name": "William Falkner"
                      }
                    }
                  }
                #elseif($util.parseJson($body).Data.Identification == '44002200000003')
                  {
                    "Data": {
                      "VerificationReport": {
                        "Matched": false,
                        "ReasonCode": "BANM",
                        "Name": "William Falkner"
                      }
                    }
                  }
                #elseif($util.parseJson($body).Data.Identification == '44002200000004')
                  {
                    "Data": {
                      "VerificationReport": {
                        "Matched": false,
                        "ReasonCode": "PANM",
                        "Name": "William Falkner"
                      }
                    }
                  }
                #elseif($util.parseJson($body).Data.Identification == '44002200000005')
                  {
                    "Data": {
                      "VerificationReport": {
                        "Matched": false,
                        "ReasonCode": "BAMM",
                        "Name": "William Falkner"
                      }
                    }
                  }
                #elseif($util.parseJson($body).Data.Identification == '44002200000006')
                  {
                    "Data": {
                      "VerificationReport": {
                        "Matched": false,
                        "ReasonCode": "PAMM",
                        "Name": "William Falkner"
                      }
                    }
                  }
                #elseif($util.parseJson($body).Data.Identification == '44002200000007')
                  {
                    "Data": {
                      "VerificationReport": {
                        "Matched": false,
                        "ReasonCode": "AC01",
                        "Name": "William Falkner"
                      }
                    }
                  }
                #elseif($util.parseJson($body).Data.Identification == '44002200000008')
                  {
                    "Data": {
                      "VerificationReport": {
                        "Matched": false,
                        "ReasonCode": "IVCR",
                        "Name": "William Falkner"
                      }
                    }
                  }
                #elseif($util.parseJson($body).Data.Identification == '44002200000009')
                  {
                    "Data": {
                      "VerificationReport": {
                        "Matched": false,
                        "ReasonCode": "ACNS",
                        "Name": "William Falkner"
                      }
                    }
                  }
                #elseif($util.parseJson($body).Data.Identification == '44002200000010')
                  {
                    "Data": {
                      "VerificationReport": {
                        "Matched": false,
                        "ReasonCode": "OPTO",
                        "Name": "William Falkner"
                      }
                    }
                  }
                #elseif($util.parseJson($body).Data.Identification == '44002200000011')
                  {
                    "Data": {
                      "VerificationReport": {
                        "Matched": false,
                        "ReasonCode": "CASS",
                        "Name": "William Falkner"
                      }
                    }
                  }
                #elseif($util.parseJson($body).Data.Identification == '44002200000012')
                  {
                    "Data": {
                      "VerificationReport": {
                        "Matched": false,
                        "ReasonCode": "SCNS",
                        "Name": "William Falkner"
                      }
                    }
                  }
                #end
          '400':
            statusCode: 400
            responseTemplates:
              application/json: |
                {
                  "Code": "400 Bad request",
                  "Message": "There is a problem with one or more of the request fields. MI Reference: 473",
                  "Errors": [
                    {
                      "ErrorCode": "UK.OBIE.Field.Missing",
                      "Message": "This field must be a supported value.",
                      "Path": "data.accountType"
                    },
                    {
                      "ErrorCode": "UK.OBIE.Field.Invalid",
                      "Message": "This field must match "^\d{14}|\d{6}$"",
                      "Path": "data.identification"
                    }
                  ]
                }
      parameters:
        - in: header
          name: x-fapi-interaction-id
          required: true
          schema:
            type: string
            example: UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Data:
                  type: object
                  properties:
                    SchemeName:
                      type: string
                      description: Scheme name
                      enum:
                        - SortCodeAccountNumber
                    AccountType:
                      type: string
                      description: Account type
                      enum:
                        - Business
                        - Personal
                    Identification:
                      type: string
                      description: Main identification
                    Name:
                      type: string
                      description: Payee name
                    SecondaryIdentification:
                      type: string
                      description: Secondary identification
      responses:
        '200':
          description: Account name verification report
          content:
            application/json:
              schema:
                type: object
                properties:
                  Data:
                    type: object
                    properties:
                      VerificationReport:
                        type: object
                        description: Provides the verification report
                        properties:
                          Matched:
                            type: boolean
                            description: Indicates the match result
                          ReasonCode:
                            type: string
                            description: Reason code
                            enum:
                              - ANNM
                              - AC01
                              - MBAM
                              - OPTO
                              - ACNS
                              - IVCR
                              - BANM
                              - PANM
                              - BAMM
                              - PAMM
                              - CASS
                              - SCNS
                          Name:
                            type: string
                            description: Name
                      Links:
                        type: object
                        description: Links relevant to the payload
                        properties:
                          Self:
                            type: string
                            description: Self
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
  /api/v1/payment/validate/payee-match-decision:
    post:
      summary: Verify payee’s name with a match decision
      description: Verifies if a UK personal bank account is associated with a given payee name and returns a match decision.
      # x-amazon-apigateway-integration:
      #   httpMethod: POST
      #   payloadFormatVersion: 1.0
      #   type: HTTP_PROXY
      #   uri: https://???/v1/api/VerifyPayeeWithMatch
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            #set($context.requestOverride.path.body = $input.body)
            #set($inputRoot = $input.path('$'))
            #if($inputRoot.AccountNumber == '00007338')            
              {
                "statusCode": 200
              }
            #elseif($inputRoot.AccountNumber == '00007339')
              {
                "statusCode": 200
              }
            #else
              {
                "statusCode": 400
              }
            #end
        responses:
          '200':
            statusCode: 200
            responseTemplates:
              application/json: |
                #set($body = $context.requestOverride.path.body)
                #if($util.parseJson($body).AccountNumber == '00007338')
                  {
                    "MatchStatus": "match",
                    "Conditions": [],
                    "AccountStatus": "Open"
                  }
                #elseif($util.parseJson($body).AccountNumber == '00007339')
                  {
                    "MatchStatus": "noMatch",
                    "Conditions": [],
                    "AccountStatus": "Closed"
                  }
                #end
          '400':
            statusCode: 400
            responseTemplates:
              application/json: |
                {
                  "Message": "Bad Request"
                }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - FirstName
                - Surname
                - SortCode
                - AccountNumber
                - ApiKey
              properties:
                PossibleMatchMin:
                  type: number
                  description: The lowest value at which a possible match will be returned in the 0- 9 range, where the default value is 4. If supplied, MatchMin must also be supplied, and the value must be less than MatchMin.
                MatchMin:
                  type: number
                  description: The lowest value at which a match will returned in the 0 - 9 range, where the default value is 6. If supplied, PossibleMatchMin must also be supplied, and the value must be greater than PossibleMatchMin.
                FirstName:
                  type: string
                  description: First name.
                Surname:
                  type: string
                  description: Surname.
                Dob:
                  type: string
                  format: date-time
                  description: Date of birth in yyyy-mm-ddT00:00:00 format, optional, but without a DOB the highest personal score returned is a 7.
                SortCode:
                  type: string
                  description: Sort code.
                AccountNumber:
                  type: string
                  description: Account number.
                ApiKey:
                  type: string
                  description: The API key, fixed format and provided at sign up.
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  MatchStatus:
                    type: string
                    description: Match Status - match, nomatch or possiblematch
                    enum:
                      - match
                      - nomatch
                      - possiblematch
                  Conditions:
                    type: array
                    items:
                      type: object
                      description: A list of conditions that apply to the account checked.
                      properties:
                        code:
                          type: string
                          description: Condition code
                        severity:
                          type: string
                          description: Condition severity
                        value:
                          type: string
                          description: Condition value
                  AccountStatus:
                    type: string
                    description: Status, either Open, Closed, Deceased, NonExistant, NotSingle, NoMatch, NoPersonalOrAddressDataAvailable, ErrorInConditions or ErrorInProcessingRequest.
                    enum:
                      - Open
                      - Closed
                      - Deceased
                      - NonExistant
                      - NotSingle
                      - NoMatch
                      - NoPersonalOrAddressDataAvailable
                      - ErrorInConditions
                      - ErrorInProcessingRequest
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
  /api/v1/payment/validate/payee-match-score:
    post:
      summary: Verify payee’s name with a match score
      description: Verifies if a UK personal bank account is associated with a given payee name and address and returns a match score.
      # x-amazon-apigateway-integration:
      #   httpMethod: POST
      #   payloadFormatVersion: 1.0
      #   type: HTTP_PROXY
      #   uri: https://???/v1/api/VerifyPayeeWithScore
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            #set($context.requestOverride.path.body = $input.body)
            #set($inputRoot = $input.path('$'))
            #if($inputRoot.AccountNumber == '00007338')           
              {
                "statusCode": 200
              }
            #elseif($inputRoot.AccountNumber == '00007339')
              {
                "statusCode": 200
              }
            #else
              {
                "statusCode": 400
              }
            #end
        responses:
          '200':
            statusCode: 200
            responseTemplates:
              application/json: |
                #set($body = $context.requestOverride.path.body)
                #if($util.parseJson($body).AccountNumber == '00007338')        
                  {
                    "MatchScore": 9,
                    "Conditions": [],
                    "AccountStatus": "Open"
                  }
                #elseif($util.parseJson($body).AccountNumber == '00007339')
                  {
                    "MatchScore": 0,
                    "Conditions": [],
                    "AccountStatus": "Closed"
                  }
                #end
          '400':
            statusCode: 400
            responseTemplates:
              application/json: |
                {
                  "Message": "Bad Request"
                }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - FirstName
                - Surname
                - SortCode
                - AccountNumber
                - ApiKey
              properties:
                FirstName:
                  type: string
                  description: First name.
                Surname:
                  type: string
                  description: Surname.
                Dob:
                  type: string
                  format: date-time
                  description: Date of birth in yyyy-mm-ddT00:00:00 format, optional, but without a DOB the highest personal score returned is a 7.
                SortCode:
                  type: string
                  description: Sort code.
                AccountNumber:
                  type: string
                  description: Account number.
                ApiKey:
                  type: string
                  description: The API key, fixed format and provided at sign up.
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  MatchScore:
                    type: number
                    description: Match Score - score between 0 and 9, where 9 is an exact match and 1 or less is no match.
                  Conditions:
                    type: array
                    items:
                      type: object
                      description: A list of conditions that apply to the account checked.
                      properties:
                        code:
                          type: string
                          description: Condition code
                        severity:
                          type: string
                          description: Condition severity
                        value:
                          type: string
                          description: Condition value
                  AccountStatus:
                    type: string
                    description: Status, either Open, Closed, Deceased, NonExistant, NotSingle, NoMatch, NoPersonalOrAddressDataAvailable, ErrorInConditions or ErrorInProcessingRequest.
                    enum:
                      - Open
                      - Closed
                      - Deceased
                      - NonExistant
                      - NotSingle
                      - NoMatch
                      - NoPersonalOrAddressDataAvailable
                      - ErrorInConditions
                      - ErrorInProcessingRequest
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
  /api/v1/payment/fee:
    get:
      summary: Get the fees for the transaction
      description: Get the fees based on the user and payment type.
      # x-amazon-apigateway-integration:
      #   httpMethod: POST
      #   payloadFormatVersion: 1.0
      #   type: HTTP_PROXY
      #   uri: https://???
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            #if($input.params('PaymentMechanism') == 'InternalTransfer')
              {
                "statusCode": 200
              }
            #elseif($input.params('PaymentMechanism') == 'Intrabank')
              {
                "statusCode": 200
              }
            #elseif($input.params('PaymentMechanism') == 'Faster')
              {
                "statusCode": 200
              }
            #elseif($input.params('PaymentMechanism') == 'Faster')
              {
                "statusCode": 200
              }
            #elseif($input.params('PaymentMechanism') == 'CHAPS')
              {
                "statusCode": 200
              }
            #elseif($input.params('PaymentMechanism') == 'SWIFT')
              {
                "statusCode": 200
              }
            #elseif($input.params('PaymentMechanism') == 'SEPA')
              {
                "statusCode": 200              
              }            
            #else
              {
                "statusCode": 400
              }
            #end
        responses:
          '200':
            statusCode: 200
            responseTemplates:
              application/json: |
                #if($input.params('PaymentMechanism') == 'InternalTransfer')
                  {
                    "Fees": [
                      {
                        "Type" : "InternalTransfer"
                        "Amount": 0.00
                      }
                    ]
                  }
                #elseif($input.params('PaymentMechanism') == 'Intrabank')
                  {
                    "Fees": [
                      {
                        "Type" : "Intrabank"
                        "Amount": 0.00
                      }
                    ]
                  }
                #elseif($input.params('PaymentMechanism') == 'Faster' && $input.params('IsManual') == true)
                  {
                    "Fees": [
                      {
                        "Type" : "Faster"
                        "Amount": 0.00
                      },
                      {
                        "Type" : "ManualPayment"
                        "Amount": 50.00
                      }
                    ]
                  }    
                #elseif($input.params('PaymentMechanism') == 'Faster' && $input.params('IsManualStandingOrder') == true)
                  {
                    "Fees": [
                      {
                        "Type" : "Faster"
                        "Amount": 0.00
                      },
                      {
                        "Type" : "ManualStandingOrder"
                        "Amount": 50.00
                      }
                    ]
                  }               
                #elseif($input.params('PaymentMechanism') == 'Faster')
                  {
                    "Fees": [
                      {
                        "Type" : "Faster"
                        "Amount": 0.00
                      }
                    ]
                  }  
                #elseif($input.params('PaymentMechanism') == 'CHAPS')
                  {
                      "Pricing": [
                        {
                          "Type" : "CHAPS"
                          "Amount": 25.00
                        }
                      ]
                  }  
                #elseif($input.params('PaymentMechanism') == 'SWIFT')
                  {
                      "Pricing": [
                        {
                          "Type" : "SWIFT"
                          "Amount": 25.00
                        }
                      ]
                  }
                #elseif($input.params('PaymentMechanism') == 'SEPA')
                  {
                      "Pricing": [
                        {
                          "Type" : "SEPA"
                          "Amount": 15.00
                        }
                      ]
                  }            
                #elseif($input.path('$.responseType') == 'ManualPaymentSuccessResponse')
                  {
                      "Pricing": [
                        {
                          "Type" : "ManualPayment"
                          "Amount": 50.00
                        }
                      ]
                  }
                #elseif($input.path('$.responseType') == 'ManualStandingOrderSuccessResponse')
                  {
                      "Pricing": [
                        {
                          "Type" : "ManualStandingOrder"
                          "Amount": 50.00
                        }
                      ]
                  }
                #elseif($input.path('$.responseType') == 'FasterManualPaymentSuccessResponse')
                  {
                      "Pricing": [
                        {
                          "Type" : "Faster"
                          "Amount": 0.00
                        },
                        {
                          "Type" : "ManualPayment"
                          "Amount": 50.00
                        }
                      ]
                  }
                #end
          '400':
            statusCode: 400
            responseTemplates:
              application/json: |
                {
                  "Message": "Bad Request"
                }
      parameters:
        - in: query
          name: AccountNumber
          required: true
          schema:
            type: string
            description: Client account number
        - in: query
          name: PaymentMechanism
          required: true
          schema:
            type: string
            enum:
              - InternalTransfer
              - Intrabank
              - Faster
              - CHAPS
              - SWIFT
              - SEPA
            description: enum with the payment mechanism
        - in: query
          name: Amount
          required: true
          schema:
            type: number
            description: Transaction amount
        - in: query
          name: Currency
          required: true
          schema:
            type: string
            description: Currency for the amounts
        - in: query
          name: IsManual
          required: true
          schema:
            type: boolean
            description: Indicates that this is a manual payment
        - in: query
          name: IsManualStandingOrder
          required: true
          schema:
            type: boolean
            description: Indicates that this is a manual standing order
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  Fees:
                    type: array
                    items:
                      type: object
                      description: A list of fees that apply to the account checked.
                      properties:
                        Type:
                          type: string
                          description: Fee type
                        Amount:
                          type: number
                          description: Fee amount
  /api/v1/fx/rates:
    get:
      summary: Get the FX rate
      description: Get the FX rate to convert currencies
      # x-amazon-apigateway-integration:
      #   httpMethod: POST
      #   payloadFormatVersion: 1.0
      #   type: HTTP_PROXY
      #   uri: https://???
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            #if($input.params('FromCurrency') == 'GBP' && $input.params('ToCurrency') == 'EUR')
              {
                "statusCode": 200              
              }
            #elseif($input.params('FromCurrency') == 'EUR' && $input.params('ToCurrency') == 'GBP')
              {
                "statusCode": 200              
              }   
            #elseif($input.params('FromCurrency') == 'GBP' && $input.params('ToCurrency') == 'USD')
              {
                "statusCode": 200              
              }   
            #elseif($input.params('FromCurrency') == 'USD' && $input.params('ToCurrency') == 'GBP')
              {
                "statusCode": 200              
              }   
            #elseif($input.params('FromCurrency') == 'GBP' && $input.params('ToCurrency') == 'ESP')
              {
                "statusCode": 200              
              }   
            #elseif($input.params('FromCurrency') == 'ESP' && $input.params('ToCurrency') == 'GBP')
              {
                "statusCode": 200              
              }                     
            #else
              {
                "statusCode": 400
              }
            #end
        responses:
          '200':
            statusCode: 200
            responseTemplates:
              application/json: |
                #set($Double = 0.0)
                #set($inputAmount = $Double.parseDouble($input.params('Amount')))
                #if($input.params('FromCurrency') == 'GBP' && $input.params('ToCurrency') == 'EUR')
                  #set($exchangeRate = 1.19)
                  #set($multiplied = $inputAmount * $exchangeRate)
                  #set($firstPart = $multiplied.toString().split('\.')[0])
                  #set($secondPart = $multiplied.toString().split('\.')[1] + "00")
                  #set($truncated = $firstPart + "." + $secondPart.substring(0,2))
                  {
                    "Rate": {
                      "ExchangeRate": $exchangeRate,
                      "ConvertedAmount": $truncated
                    }
                  }
                #elseif($input.params('FromCurrency') == 'EUR' && $input.params('ToCurrency') == 'GBP')
                  #set($exchangeRate = 0.8400)
                  #set($multiplied = $inputAmount * $exchangeRate)
                  #set($firstPart = $multiplied.toString().split('\.')[0])
                  #set($secondPart = $multiplied.toString().split('\.')[1] + "00")
                  #set($truncated = $firstPart + "." + $secondPart.substring(0,2))
                  {
                    "Rate": {
                      "ExchangeRate": $exchangeRate,
                      "ConvertedAmount": $truncated
                    }
                  }
                #elseif($input.params('FromCurrency') == 'GBP' && $input.params('ToCurrency') == 'USD')
                  #set($exchangeRate = 1.3100)
                  #set($multiplied = $inputAmount * $exchangeRate)
                  #set($firstPart = $multiplied.toString().split('\.')[0])
                  #set($secondPart = $multiplied.toString().split('\.')[1] + "00")
                  #set($truncated = $firstPart + "." + $secondPart.substring(0,2))
                  {
                    "Rate": {
                      "ExchangeRate": $exchangeRate,
                      "ConvertedAmount": $truncated
                    }
                  }
                #elseif($input.params('FromCurrency') == 'USD' && $input.params('ToCurrency') == 'GBP')
                  #set($exchangeRate = 0.7600)
                  #set($multiplied = $inputAmount * $exchangeRate)
                  #set($firstPart = $multiplied.toString().split('\.')[0])
                  #set($secondPart = $multiplied.toString().split('\.')[1] + "00")
                  #set($truncated = $firstPart + "." + $secondPart.substring(0,2))
                  {
                    "Rate": {
                      "ExchangeRate": $exchangeRate,
                      "ConvertedAmount": $truncated
                    }
                  }
                #elseif($input.params('FromCurrency') == 'GBP' && $input.params('ToCurrency') == 'ESP')
                  #set($exchangeRate = 1.1900)
                  #set($multiplied = $inputAmount * $exchangeRate)
                  #set($firstPart = $multiplied.toString().split('\.')[0])
                  #set($secondPart = $multiplied.toString().split('\.')[1] + "00")
                  #set($truncated = $firstPart + "." + $secondPart.substring(0,2))
                  {
                    "Rate": {
                      "ExchangeRate": $exchangeRate,
                      "ConvertedAmount": $truncated
                    }
                  }
                #elseif($input.params('FromCurrency') == 'ESP' && $input.params('ToCurrency') == 'GBP')
                  #set($exchangeRate = 0.8400)
                  #set($multiplied = $inputAmount * $exchangeRate)
                  #set($firstPart = $multiplied.toString().split('\.')[0])
                  #set($secondPart = $multiplied.toString().split('\.')[1] + "00")
                  #set($truncated = $firstPart + "." + $secondPart.substring(0,2))
                  {
                    "Rate": {
                      "ExchangeRate": $exchangeRate,
                      "ConvertedAmount": $truncated
                    }
                  }                                     
                #end
          '400':
            statusCode: 400
            responseTemplates:
              application/json: |
                {
                  "Message": "Bad Request"
                }
      parameters:
        - in: query
          name: AccountNumber
          required: true
          schema:
            type: string
            description: Client account number
        - in: query
          name: FromCurrency
          required: true
          schema:
            type: string
            description: Currency to convert from.
            example: GBP
        - in: query
          name: ToCurrency
          required: true
          schema:
            type: string
            description: Currency to convert to.
            example: USD
        - in: query
          name: Amount
          required: true
          schema:
            type: number
            description: Amount to be converted.
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  Rate:
                    type: object
                    properties:
                      ExchangeRate:
                        type: number
                        description: Exchange rate between currencies
                      ConvertedAmount:
                        type: number
                        description: Converted amount based on the exchange rate

  # Cards provider routes ####################################################################

  /api/v1/cards/token:
    post:
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "https://hrllo.com/connect/token"
        type: "http"
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorised.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Not Found.
          content:
            application/json:
              schema:
                type: object
        '405':
          description: Method Not Allowed.
          content:
            application/json:
              schema:
                type: object
        '409':
          description: Conflict.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                type: object

  /api/v1/cards/{publicToken}/pin:
    get:
      summary: Redirects the request to the external PIN processing service.
      description: This endpoint redirects the request to the external card processing service to modify the card PIN.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        requestParameters:
          integration.request.path.publicToken: "method.request.path.publicToken"
        uri: https://hello.com/sandbox/api/v1/cards/{publicToken}/pin
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: publicToken
          in: path
          required: true
          description: Public token associated with the card
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorised.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Not Found.
          content:
            application/json:
              schema:
                type: object
        '405':
          description: Method Not Allowed.
          content:
            application/json:
              schema:
                type: object
        '409':
          description: Conflict.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                type: object
    post:
      summary: Redirects the request to the external PIN processing service.
      description: This endpoint redirects the request to the external card processing service to modify the card PIN.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        requestParameters:
          integration.request.path.publicToken: "method.request.path.publicToken"
        uri: https://hello.com/sandbox/api/v1/cards/{publicToken}/pin
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: publicToken
          in: path
          required: true
          description: Public token associated with the card
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  pin:
                    type: string
                    example: "123456"
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Public Token was not found.
          content:
            application/json:
              schema:
                type: object

  /api/v1/cards/{publicToken}/status:
    get:
      summary: Redirects the request to the external PIN processing service.
      description: This endpoint redirects the request to the external card processing service to obtain the card status.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        requestParameters:
          integration.request.path.publicToken: "method.request.path.publicToken"
        uri: https://hello.com/sandbox/api/v1/cards/{publicToken}/status
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: publicToken
          in: path
          required: true
          description: Public token associated with the card
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorised.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Not Found.
          content:
            application/json:
              schema:
                type: object
        '405':
          description: Method Not Allowed.
          content:
            application/json:
              schema:
                type: object
        '409':
          description: Conflict.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                type: object
    put:
      summary: Redirects the request to the external PIN processing service.
      description: This endpoint redirects the request to the external card processing service to modify the card status.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: PUT
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        requestParameters:
          integration.request.path.publicToken: "method.request.path.publicToken"
        uri: https://hello.com/sandbox/api/v1/cards/{publicToken}/status
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cardStatusCode:
                  type: string
                  nullable: true
                  description: Card status code.
                status:
                  type: string
                  nullable: true
                  description: Card status.
                updatedBy:
                  type: string
                  nullable: true
                  description: User who updated the information.
                description:
                  type: string
                  nullable: true
                  description: Update Description.
                validityDate:
                  type: string
                  format: date-time
                  nullable: true
                  description: Expiration date.
      parameters:
        - name: publicToken
          in: path
          required: true
          description: Public token associated with the card
          schema:
            type: string

      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Active"
                  cardStatusCode:
                    type: string
                    example: "00"
                  cardStatusDescription:
                    type: string
                    example: "00 (Active)"
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object

        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object

        '404':
          description: Public Token was not found.
          content:
            application/json:
              schema:
                type: object

  /api/v1/cards/{publicToken}/pin/unblock:
    post:
      summary: Redirects the request to the external PIN processing service.
      description: This endpoint redirects the request to the external card processing service to unblock the card PIN.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        requestParameters:
          integration.request.path.publicToken: "method.request.path.publicToken"
        uri: https://hello.com/sandbox/api/v1/cards/{publicToken}/pin/unblock
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: publicToken
          in: path
          required: true
          description: Public token associated with the card
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object

        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object

        '404':
          description: Public Token was not found.
          content:
            application/json:
              schema:
                type: object

  /api/v1/cards/{publicToken}/replace:
    post:
      summary: Redirects the request to the external PIN processing service.
      description: This endpoint redirects the request to the external card processing service to replace a card.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        requestParameters:
          integration.request.path.publicToken: "method.request.path.publicToken"
        uri: https://hello.com/sandbox/api/v1/cards/{publicToken}/replace
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                moveBalance:
                  type: boolean
                  nullable: true
                  description: If true then the balance will move to the new card.
                moveLimitAccumulators:
                  type: boolean
                  nullable: true
                  description: If true then the limit accumulators will move to the new card.
                moveChildCards:
                  type: boolean
                  nullable: true
                  description: If true then the child cards associated with the card will move to the new card.
                moveExpiryDate:
                  type: boolean
                  nullable: true
                  description: Optional field - if true, then move the same expiry date to the new card.
                expiryDate:
                  type: string
                  format: date-time
                  nullable: true
                  description: Optional field - if provided, card is set to the new Expiry Date. Otherwise default from program is used. Should not be set when MoveExpiryDate is true. Format YYYY-MM..
                freetext1:
                  type: string
                  nullable: true
                  description: Additional fulfilment data used for transferring extra information to the card manufacturer.
                freetext2:
                  type: string
                  nullable: true
                  description: Additional fulfilment data used for transferring extra information to the card manufacturer.
      parameters:
        - name: publicToken
          in: path
          required: true
          description: Public token associated with the card
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  publicToken:
                    type: string
                    example: "5678901234"
                  customerReference:
                    type: string
                    example: "sales"
                  embossName:
                    type: string
                    example: "Joseph Bloggs"
                  maskedPan:
                    type: string
                    example: "123456******3456"
                  startDate:
                    type: string
                    format: date
                    example: "2022-06-06"
                  expiryDate:
                    type: string
                    format: date
                    example: "2025-06-06"
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object

        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object

        '404':
          description: Public Token was not found.
          content:
            application/json:
              schema:
                type: object

  /api/v1/cards/{publicToken}/card-type:
    put:
      summary: Redirects the request to the external card processing service.
      description: This endpoint redirects the request to the external card processing service to modify the card type.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: PUT
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        requestParameters:
          integration.request.path.publicToken: "method.request.path.publicToken"
        uri: https://hello.com/sandbox/api/v1/cards/{publicToken}/replace
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: publicToken
          in: path
          required: true
          description: Public token associated with the card
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cardType:
                  type: string
                  description:
                    Card Type ("Physical" or "Virtual").
                moveExpiryDate:
                  type: boolean
                  nullable: true
                  description: Indicates if the expiration date will be changed.
                newExpiryDate:
                  type: string
                  format: date-time
                  nullable: true
                  description: New card expiration date.
                manufacturingDetails:
                  type: object
                  nullable: true
                  properties:
                    deliveryMethod:
                      type: string
                      description: Card delivery method.
                    carrierType:
                      type: string
                      description: Type of transport for delivery.
                      minLength: 0
                      maxLength: 30
                    language:
                      type: string
                      nullable: true
                      description: Customization language.
                    thermalLine1:
                      type: string
                      nullable: true
                      description: Free text field which can be used for transferring extra information to be printed on the card.
                    thermalLine2:
                      type: string
                      nullable: true
                      description: Free text field which can be used for transferring extra information to be printed on the card.
                    embossLine4:
                      type: string
                      nullable: true
                      description: Embossed card line 4. Actual maximum length will depend on the card design.
                    vanityName:
                      type: string
                      nullable: true
                      description: Can add an additional title to the card holder name (for example "Company Director").
                    imageDetails:
                      type: object
                      nullable: true
                      properties:
                        imageId:
                          type: string
                          description: Identifies the card manufacturer's image file that will be printed on the face of the card.
                          minLength: 0
                          maxLength: 16
                        logoFrontId:
                          type: string
                          nullable: true
                          description: Identifies the card manufacturer's logo file that will be printed on the face of the card.
                        logoBackId:
                          type: string
                          nullable: true
                          description: Identifies the card manufacturer's logo file that will be printed on the back of the card, if supported.
              required:
                - cardType
                - manufacturingDetails
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  cardType:
                    type: string
                    example: "Physical"
                  expiryDate:
                    type: string
                    format: date-time
                    example: "2024-10-02T18:01:22.617Z"
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object

        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object

        '404':
          description: Public Token was not found.
          content:
            application/json:
              schema:
                type: object

  /api/v1/cards:
    post:
      summary: Redirects the request to the external card processing service.
      description: This endpoint redirects the request to the external card processing service to create a new card.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        uri: https://hello.com/sandbox/api/v1/cards/{publicToken}/replace
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cardType:
                  type: string
                  description: Type of the card.
                cardProduct:
                  type: integer
                  description: Unique identifier for the card product.
                customerReference:
                  type: string
                  description: Reference number for the customer.
                activateNow:
                  type: boolean
                  description: Flag indicating if the card should be activated immediately.
                freetext1:
                  type: string
                  description: Comments for the card manufacturer.
                freetext2:
                  type: string
                  description: Additional comments for the card manufacturer.
                nameOnCard:
                  type: string
                  description: Name to be printed on the card.
                isSingleUse:
                  type: boolean
                  description: Indicates if the card is for single use only.
                isNonReloadable:
                  type: boolean
                  description: Indicates if the card is non-reloadable.
                cardHolder:
                  type: object
                  properties:
                    title:
                      type: string
                      description: Title of the card holder.
                    firstName:
                      type: string
                      description: First name of the card holder.
                    middleName:
                      type: string
                      description: Middle name of the card holder.
                    lastName:
                      type: string
                      description: Last name of the card holder.
                    dateOfBirth:
                      type: string
                      format: date
                      description: Date of birth of the card holder.
                    mobile:
                      type: string
                      description: Mobile number of the card holder.
                    email:
                      type: string
                      format: email
                      description: Email address of the card holder.
                address:
                  type: object
                  properties:
                    addressLine1:
                      type: string
                      description: First line of the address.
                    addressLine2:
                      type: string
                      description: Second line of the address (optional).
                    city:
                      type: string
                      description: City of the address.
                    postCode:
                      type: string
                      description: Postal code of the address.
                    country:
                      type: string
                      description: Country code of the address.
                fulfilment:
                  type: object
                  properties:
                    addressLine1:
                      type: string
                      description: First line of the fulfilment address.
                    addressLine2:
                      type: string
                      description: Second line of the fulfilment address (optional).
                    city:
                      type: string
                      description: City of the fulfilment address.
                    postCode:
                      type: string
                      description: Postal code of the fulfilment address.
                    country:
                      type: string
                      description: Country code of the fulfilment address.
                manufacturingDetails:
                  type: object
                  properties:
                    cardManufacturer:
                      type: string
                      description: Name of the card manufacturer.
                    deliveryMethod:
                      type: integer
                      description: Method of delivery (e.g., 0 for standard, 1 for express).
                    carrierType:
                      type: string
                      description: Type of carrier used for delivery.
                    quantity:
                      type: integer
                      description: Quantity of cards to be manufactured.
                    language:
                      type: string
                      description: Language preference for card details.
                    thermalLine1:
                      type: string
                      description: First line of thermal printing details.
                    thermalLine2:
                      type: string
                      description: Second line of thermal printing details.
                    embossLine4:
                      type: string
                      description: Details for the embossing line on the card.
                    vanityName:
                      type: string
                      description: Custom name or vanity name for the card.
                    imageDetails:
                      type: object
                      properties:
                        imageId:
                          type: string
                          description: ID for the card image.
                        logoFrontId:
                          type: string
                          description: ID for the front logo of the card.
                        logoBackId:
                          type: string
                          description: ID for the back logo of the card.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  publicToken:
                    type: string
                    example: "5678901234"
                  customerReference:
                    type: string
                    example: "sales"
                  embossName:
                    type: string
                    example: "Joseph Bloggs"
                  maskedPan:
                    type: string
                    example: "123456******3456"
                  startDate:
                    type: string
                    format: date
                    example: "2022-06-06"
                  expiryDate:
                    type: string
                    format: date
                    example: "2025-06-06"
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object

        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object

        '404':
          description: Public Token was not found.
          content:
            application/json:
              schema:
                type: object

  # Risk assessment ###############################################################################

  /api/v1/riskassesment/Accounts/v1/RunStrategy:
    post:
      tags:
        - Run Strategy - Transaction monitoring
      summary: Transaction monitoring
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://www.google.com/TruAccountAPI/rest/Accounts/v1/RunStrategy
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: runStrategy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accountStrategyId:
                  type: integer
                accountId:
                  type: integer
                application:
                  type: object
                  properties:
                    applicationDateTime:
                      type: string
                      format: date-time
                    country:
                      type: string
                    deviceId:
                      type: string
                    clientDecision:
                      type: string
                    clientDecisionReason:
                      type: string
                    clientApplicationPurpose:
                      type: string
                    processCode:
                      type: string
                    processReason:
                      type: string
                person:
                  type: array
                  items:
                    type: object
                    properties:
                      role:
                        type: string
                      isPrimary:
                        type: boolean
                      clientReference:
                        type: string
                      annualIncome:
                        type: integer
                      dateOfBirth:
                        type: string
                      emailAddress:
                        type: string
                      firstName:
                        type: string
                      middleNames:
                        type: string
                      lastName:
                        type: string
                      gender:
                        type: string
                      mobilePhoneNumber:
                        type: string
                      residentialAddress:
                        type: array
                        items:
                          type: object
                          properties:
                            addressLine1:
                              type: string
                            addressLine2:
                              type: string
                            addressLine3:
                              type: string
                            zipPostcode:
                              type: string
                            country:
                              type: string
                      finance:
                        type: object
                        properties:
                          bankAccount:
                            type: array
                            items:
                              type: object
                              properties:
                                sortCode:
                                  type: string
                                accountNumber:
                                  type: string
                      action:
                        type: string
                financialAccount:
                  type: object
                  properties:
                    clientReference:
                      type: string
                    sortCode:
                      type: string
                    accountNumber:
                      type: string
                    dateOpened:
                      type: string
                      format: date
                    productName:
                      type: string
                    productCode:
                      type: string
                    paymentType:
                      type: string
                    paymentSubtype:
                      type: string
                    countryOfTransaction:
                      type: string
                    financialTransaction:
                      type: array
                      items:
                        type: object
                        properties:
                          clientReference:
                            type: string
                          sortCode:
                            type: string
                          accountNumber:
                            type: string
                          accountHolder:
                            type: string
                          creditOrDebit:
                            type: string
                          currencyCode:
                            type: string
                          paymentType:
                            type: string
                          paymentSubtype:
                            type: string
                          amount:
                            type: number
                          paymentReference:
                            type: string
                          balance:
                            type: number
                          IBAN:
                            type: string
                          effectiveDateTime:
                            type: string
                            format: date-time
                          countryOfTransaction:
                            type: string

      responses:
        '200':
          description: Success to run startegy
          content:
            application/json:
              schema:
                type: object
                properties:
                  accountId:
                    type: integer
                  status:
                    type: object
                    properties:
                      code:
                        type: string
                      label:
                        type: string
                  decision:
                    type: object
                  Applications:
                    type: array
                    items:
                      type: object
                      properties:
                        uid:
                          type: string
                        auditReference:
                          type: string
                        runId:
                          type: integer
                        journeyId:
                          type: object
                          properties:
                            id:
                              type: integer
                            name:
                              type: string
                        organisationId:
                          type: object
                          properties:
                            id:
                              type: integer
                        country:
                          type: string
                        user:
                          type: object


  # Migration routes #############################################################################

  /api/v1/migration/core/loans/{loanAccountId}/changeState:
    post:
      tags:
        - migration-controller
      summary: Change State
      description: 'Change loan account state'
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "9n57qb"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.loanAccountId: "method.request.path.loanAccountId"
          integration.request.header.Accept: "'application/json'"
        tlsConfig:
          insecureSkipVerification: true
        uri: https://hello.com/api/v1/migration/core/loans/{loanAccountId}:changeState

        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: produceEvent_1
      parameters:
        - name: loanAccountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/LoansChangeStateDTO'
              type: object
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/LoansChangeStateResponseDTO'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/migration/core/loans/{loanAccountId}/disbursement-transactions:
    post:
      tags:
        - migration-controller
      summary: Disbursement transactions
      description: 'Disbursement Transactions'
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "9n57qb"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.loanAccountId: "method.request.path.loanAccountId"
          integration.request.header.Accept: "'application/json'"
        tlsConfig:
          insecureSkipVerification: true
        uri: https://hello.com/api/v1/migration/core/loans/{loanAccountId}/disbursement-transactions
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: produceEvent_2
      parameters:
        - name: loanAccountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/LoansDisbursementTransactionDTO'
              type: object
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/LoansDisbursementTransactionResponseDTO'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/migration/core/loans:
    post:
      tags:
        - migration-controller
      summary: Create loan account
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "9n57qb"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/json'"
        tlsConfig:
          insecureSkipVerification: true
        uri: https://hello.com/api/v1/migration/core/loans
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: produceEvent
      requestBody:
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/LoansDTO'
              type: object
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/LoansResponseDTO'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/migration/core/group:
    post:
      tags:
        - migration-controller
      summary: Groups
      description: 'Create Group'
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "9n57qb"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/json'"
        tlsConfig:
          insecureSkipVerification: true
        uri: https://hello.com/api/v1/migration/core/group
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: produceEvent_3
      requestBody:
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/GroupDTO'
              type: object
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/GroupResponseDTO'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/migration/core/deposits:
    post:
      tags:
        - migration-controller
      summary: Deposits
      description: 'Create Deposit account'
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "9n57qb"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/json'"
        tlsConfig:
          insecureSkipVerification: true
        uri: https://hello.com/api/v1/migration/core/deposits
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: produceEvent_4
      requestBody:
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/DepositsDTO'
              type: object
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/DepositsResponseDTO'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/migration/core/deposits/{depositAccountId}/startMaturity:
    post:
      tags:
        - migration-controller
      summary: Start Maturity
      description: 'Start Maturity'
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "9n57qb"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/json'"
        tlsConfig:
          insecureSkipVerification: true
        uri: https://hello.com/api/v1/migration/core/deposits/{depositAccountId}:startMaturity
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: produceEvent_5
      parameters:
        - name: depositAccountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/DepositsMaturity'
              type: object
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/DepositsMaturityResponse'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/migration/core/deposits/{depositAccountId}/withdrawal-transactions:
    post:
      tags:
        - migration-controller
      summary: Withdrawal Transactions
      description: 'Withdrawal Transactions'
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "9n57qb"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/json'"
        tlsConfig:
          insecureSkipVerification: true
        uri: https://hello.com/api/v1/migration/core/deposits/{depositAccountId}/withdrawal-transactions
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: produceEvent_6
      parameters:
        - name: depositAccountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/WithdrawalTransactionsDTO'
              type: object
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/WithdrawalTransactionsResponseDTO'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/migration/core/deposits/{depositAccountId}/deposit-transactions:
    post:
      tags:
        - migration-controller
      summary: Deposit Transactions
      description: 'Deposit Transactions'
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "9n57qb"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/json'"
        tlsConfig:
          insecureSkipVerification: true
        uri: https://hello.com/api/v1/migration/core/deposits/{depositAccountId}/deposit-transactions
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: produceEvent_7
      parameters:
        - name: depositAccountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/DepositsTransactionsDTO'
              type: object
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/DepositsTransactionsResponseDTO'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/migration/core/depositproducts:
    post:
      tags:
        - migration-controller
      summary: Deposit products
      description: 'Deposit products'
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "9n57qb"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/json'"
        tlsConfig:
          insecureSkipVerification: true
        uri: https://hello.com/api/v1/migration/core/depositproducts
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: produceEvent_8
      requestBody:
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/DepositProductsDTO'
              type: object
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/DepositProductResponseDTO'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/migration/core/client:
    post:
      tags:
        - migration-controller
      summary: Create Client
      description: 'Create Client'
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "9n57qb"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/json'"
        tlsConfig:
          insecureSkipVerification: true
        uri: https://hello.com/api/v1/migration/core/client
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: produceEvent_9
      requestBody:
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/ClientDTO'
              type: object
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ClientResponseDTO'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  # CRM routes ###############################################################################

  # Customers

  '/api/v1/crm/customers/{customerId}':
    get:
      tags:
        - Customers
      summary: Get customer
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.customerId: "method.request.path.customerId"
        uri: https://hello.com/api/data/v9.2/contacts({customerId})
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: customerId
          in: path
          description: The ID or encoded key of the customer to be returned.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Customer returned.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/Customer'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: Customer not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object



x-amazon-apigateway-policy:
  Version: "2012-10-17"
  Statement:
    - Effect: "Deny"
      Principal: "*"
      Action: "execute-api:Invoke"
      Resource: "arn:aws:execute-api:eu-west-2:34564575467:wgre/*/*/*"
      Condition:
        StringNotEquals:
          aws:SourceVpce: "vpce-016c6c170901db103"
    - Effect: "Allow"
      Principal: "*"
      Action: "execute-api:Invoke"
      Resource: "arn:aws:execute-api:eu-west-2:5637645784568:dfsagsdfgdf/*/*/*"

x-amazon-apigateway-request-validators:
  Validate body:
    validateRequestParameters: false
    validateRequestBody: true
  Validate body, query string parameters, and headers:
    validateRequestParameters: true
    validateRequestBody: true
