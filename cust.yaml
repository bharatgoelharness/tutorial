openapi: "3.0.1"
info:
  title: "apigw-internal-dev"
  version: 1.0.0

servers:
  - url: "https://lpkq11sdei.execute-api.eu-west-2.amazonaws.com/{basePath}"
    variables:
      basePath:
        default: "dev"
    x-amazon-apigateway-endpoint-configuration:
      vpcEndpointIds:
        - "vpce-016c6c170901db103"

paths:

  # Core banking routes ###############################################################################

  # Clients
  
  '/api/v1/core/clients/{clientId}':
    get:
      tags:
        - Clients
      summary: Get client
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.clientId: "method.request.path.clientId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/clients/{clientId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: clientId
          in: path
          description: The ID or encoded key of the client to be returned.
          required: true
          schema:
            type: string
        - name: detailsLevel
          in: query
          description: >-
            The level of details to return: `FULL` means the full details of the
            object will be returned (custom field values, address, contact info,
            or any other related objects) and `BASIC` will return only the first
            level elements of the object.
          required: false
          schema:
            type: string
            enum:
              - BASIC
              - FULL
      responses:
        '200':
          description: Client returned.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/Client'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: Client not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
    put:
      tags:
        - Clients
      summary: Update client
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: PUT
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.clientId: "method.request.path.clientId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/clients/{clientId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: clientId
          in: path
          description: The ID or encoded key of the client to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: Client to be updated.
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/Client'
              type: object
      responses:
        '200':
          description: Client updated.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/Client'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: Client not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
    delete:
      tags:
        - Clients
      summary: Delete client
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.clientId: "method.request.path.clientId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/clients/{clientId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: clientId
          in: path
          description: The ID or encoded key of the client to be deleted.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Client deleted.
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: Client not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
    patch:
      tags:
        - Clients
      summary: Partially update client
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.clientId: "method.request.path.clientId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/clients/{clientId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: clientId
          in: path
          description: The ID or encoded key of the client to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: Patch operations to be applied to a resource.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                #$ref: '#/components/schemas/PatchOperation'
                type: object
      responses:
        '204':
          description: Client updated.
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: Client not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/core/clients:
    get:
      tags:
        - Clients
      summary: Get clients
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"

        uri: https://gibts3.sandbox.mambu.com/api/clients
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: offset
          in: query
          description: >-
            Pagination, index to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: >-
            Pagination, cursor to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            Pagination, the number of elements to retrieve, used in combination
            with offset to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: paginationDetails
          in: query
          description: >-
            Flag specifying whether the pagination  details should be provided
            in response headers. Please note that by default it is disabled
            (OFF), in order to improve the performance of the APIs
          required: false
          schema:
            type: string
            default: 'OFF'
            enum:
              - 'ON'
              - 'OFF'
        - name: detailsLevel
          in: query
          description: >-
            The level of details to return: `FULL` means the full details of the
            object will be returned (custom field values, address, contact info,
            or any other related objects) and `BASIC` will return only the first
            level elements of the object.
          required: false
          schema:
            type: string
            enum:
              - BASIC
              - FULL
        - name: creditOfficerUsername
          in: query
          description: >-
            The username of the credit officer to whom the entities are assigned
            to
          required: false
          schema:
            type: string
        - name: branchId
          in: query
          description: >-
            The id/encodedKey of the branch to which the entities are assigned
            to
          required: false
          schema:
            type: string
        - name: centreId
          in: query
          description: >-
            The id/encodedKey of the centre to which the entities are assigned
            to
          required: false
          schema:
            type: string
        - name: firstName
          in: query
          description: >-
            The first name, personal name, given name, or forename of the
            client.
          required: false
          schema:
            type: string
        - name: lastName
          in: query
          description: 'The last name, surname, or family name of the client.'
          required: false
          schema:
            type: string
        - name: idNumber
          in: query
          description: The ID number of the client's identification document.
          required: false
          schema:
            type: string
        - name: state
          in: query
          description: The state of the client to search for.
          required: false
          schema:
            type: string
            enum:
              - PENDING_APPROVAL
              - INACTIVE
              - ACTIVE
              - EXITED
              - BLACKLISTED
              - REJECTED
        - name: birthDate
          in: query
          description: The birth date of the client to search for.
          required: false
          schema:
            type: string
            format: date
        - name: sortBy
          in: query
          description: >-
            The criteria based on which the records will be sorted. Expected
            format is <field:order>, for example, sortBy =
            field1:ASC,field2:DESC.<br/>Only the following fields can be used:
            firstName, lastName, creationDate, lastModifiedDate<br/>Default
            sorting is done by  creationDate:ASC
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Clients list returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: '#/components/schemas/Client'
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
    post:
      tags:
        - Clients
      summary: Create client
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"

        uri: https://gibts3.sandbox.mambu.com/api/clients
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: Idempotency-Key
          in: header
          description: >-
            Key that can be used to support idempotency on this POST. Must be a
            valid UUID(version 4 is recommended) string and can only be used
            with the exact same request. Can be used in retry mechanisms to
            prevent double posting.
          required: false
          schema:
            type: string
      requestBody:
        description: Client to be created.
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/Client'
              type: object
      responses:
        '201':
          description: Client created.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/Client'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  '/api/v1/core/clients:search':
    post:
      tags:
        - Clients
      summary: Search clients
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/clients:search
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: offset
          in: query
          description: >-
            Pagination, index to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: >-
            Pagination, cursor to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            Pagination, the number of elements to retrieve, used in combination
            with offset to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: paginationDetails
          in: query
          description: >-
            Flag specifying whether the pagination  details should be provided
            in response headers. Please note that by default it is disabled
            (OFF), in order to improve the performance of the APIs
          required: false
          schema:
            type: string
            default: 'OFF'
            enum:
              - 'ON'
              - 'OFF'
        - name: detailsLevel
          in: query
          description: >-
            The level of details to return: `FULL` means the full details of the
            object will be returned (custom field values, address, contact info,
            or any other related objects) and `BASIC` will return only the first
            level elements of the object.
          required: false
          schema:
            type: string
            enum:
              - BASIC
              - FULL
      requestBody:
        description: The criteria to search clients.
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/ClientSearchCriteria'
              type: object
      responses:
        '200':
          description: Result of client search.
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: '#/components/schemas/Client'
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  '/api/v1/core/clients/{clientId}/role':
    get:
      tags:
        - Clients
      summary: Get client role for client
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.clientId: "method.request.path.clientId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/clients/{clientId}/role
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: clientId
          in: path
          description: The ID or encoded key of the client to be returned.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Client role returned.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ClientRole'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: Client not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  # Deposit Accounts

  '/api/v1/core/accounts/{depositAccountId}/cards':
    get:
      tags:
        - Deposit Accounts
      summary: Get cards associated with an account
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/deposits/{depositAccountId}/cards
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: depositAccountId
          in: path
          description: The ID or encoded key of the deposit account.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The list of cards attached to the account was returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: '#/components/schemas/Card'
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: The deposit account was not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
    post:
      tags:
        - Deposit Accounts
      summary: >-
        Represents the information needed to create and associate a new card to
        an account.
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/deposits/{depositAccountId}/cards
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: Idempotency-Key
          in: header
          description: >-
            Key that can be used to support idempotency on this POST. Must be a
            valid UUID(version 4 is recommended) string and can only be used
            with the exact same request. Can be used in retry mechanisms to
            prevent double posting.
          required: false
          schema:
            type: string
        - name: depositAccountId
          in: path
          description: The ID or encoded key of the deposit account.
          required: true
          schema:
            type: string
      requestBody:
        description: The card to be created.
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/Card'
              type: object
      responses:
        '201':
          description: The card was created.
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: The deposit account was not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '409':
          description: >-
            Operation cannot be performed due to another pending operation that
            locked shared resources.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  '/api/v1/core/accounts/{depositAccountId}/authorizationholds':
    get:
      tags:
        - Deposit Accounts
      summary: >-
        Get authorization holds related to a deposit account, ordered from
        newest to oldest by creation date
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/deposits/{depositAccountId}/authorizationholds
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: depositAccountId
          in: path
          description: The ID or encoded key of the deposit account.
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: >-
            Pagination, index to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: >-
            Pagination, cursor to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            Pagination, the number of elements to retrieve, used in combination
            with offset to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: paginationDetails
          in: query
          description: >-
            Flag specifying whether the pagination  details should be provided
            in response headers. Please note that by default it is disabled
            (OFF), in order to improve the performance of the APIs
          required: false
          schema:
            type: string
            default: 'OFF'
            enum:
              - 'ON'
              - 'OFF'
        - name: status
          in: query
          description: The status of the authorization holds to filter on
          required: false
          schema:
            type: string
            enum:
              - PENDING
              - REVERSED
              - SETTLED
              - EXPIRED
      responses:
        '200':
          description: The list of authorization holds has been returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: '#/components/schemas/GetAuthorizationHold'
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: The deposit account was not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
    post:
      tags:
        - Deposit Accounts
      summary: Create an authorization hold corresponding to a given account
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/deposits/{depositAccountId}/authorizationholds
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: Idempotency-Key
          in: header
          description: >-
            Key that can be used to support idempotency on this POST. Must be a
            valid UUID(version 4 is recommended) string and can only be used
            with the exact same request. Can be used in retry mechanisms to
            prevent double posting.
          required: false
          schema:
            type: string
        - name: depositAccountId
          in: path
          description: The ID or encoded key of the deposit account.
          required: true
          schema:
            type: string
      requestBody:
        description: The authorization hold to be created.
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/AccountAuthorizationHold'
              type: object
      responses:
        '201':
          description: The account authorization hold was successfully created.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/AccountAuthorizationHold'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: The deposit account was not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '409':
          description: >-
            Operation cannot be performed due to another pending operation that
            locked shared resources.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/core/accounts:
    get:
      tags:
        - Deposit Accounts
      summary: Get deposit accounts
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/deposits
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: offset
          in: query
          description: >-
            Pagination, index to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: >-
            Pagination, cursor to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            Pagination, the number of elements to retrieve, used in combination
            with offset to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: paginationDetails
          in: query
          description: >-
            Flag specifying whether the pagination  details should be provided
            in response headers. Please note that by default it is disabled
            (OFF), in order to improve the performance of the APIs
          required: false
          schema:
            type: string
            default: 'OFF'
            enum:
              - 'ON'
              - 'OFF'
        - name: detailsLevel
          in: query
          description: >-
            The level of details to return: `FULL` means the full details of the
            object will be returned (custom field values, address, contact info,
            or any other related objects) and `BASIC` will return only the first
            level elements of the object.
          required: false
          schema:
            type: string
            enum:
              - BASIC
              - FULL
        - name: creditOfficerUsername
          in: query
          description: The username of the credit officer assigned to the deposit accounts.
          required: false
          schema:
            type: string
        - name: branchId
          in: query
          description: >-
            The ID or encoded key of the branch assigned to the deposit
            accounts.
          required: false
          schema:
            type: string
        - name: centreId
          in: query
          description: >-
            The ID or encoded key of the centre assigned to the deposit
            accounts.
          required: false
          schema:
            type: string
        - name: accountState
          in: query
          description: The state to use to filter deposit accounts by.
          required: false
          schema:
            type: string
            enum:
              - PENDING_APPROVAL
              - APPROVED
              - ACTIVE
              - ACTIVE_IN_ARREARS
              - MATURED
              - LOCKED
              - DORMANT
              - CLOSED
              - CLOSED_WRITTEN_OFF
              - WITHDRAWN
              - CLOSED_REJECTED
        - name: accountHolderType
          in: query
          description: The account holder type.
          required: false
          schema:
            type: string
            enum:
              - CLIENT
              - GROUP
        - name: accountHolderId
          in: query
          description: The ID of the account holder.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Deposit accounts list returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: '#/components/schemas/DepositAccount'
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: The deposit account was not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
    post:
      tags:
        - Deposit Accounts
      summary: Create deposit account
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/deposits
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: Idempotency-Key
          in: header
          description: >-
            Key that can be used to support idempotency on this POST. Must be a
            valid UUID(version 4 is recommended) string and can only be used
            with the exact same request. Can be used in retry mechanisms to
            prevent double posting.
          required: false
          schema:
            type: string
      requestBody:
        description: Represents the information to create a deposit account.
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/DepositAccount'
              type: object
      responses:
        '201':
          description: The deposit account has been created.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/DepositAccount'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '409':
          description: >-
            Operation cannot be performed due to another pending operation that
            locked shared resources.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  '/api/v1/core/accounts/{depositAccountId}':
    get:
      tags:
        - Deposit Accounts
      summary: Get deposit account
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/deposits/{depositAccountId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: depositAccountId
          in: path
          description: The ID or encoded key of the deposit account.
          required: true
          schema:
            type: string
        - name: detailsLevel
          in: query
          description: >-
            The level of details to return: `FULL` means the full details of the
            object will be returned (custom field values, address, contact info,
            or any other related objects) and `BASIC` will return only the first
            level elements of the object.
          required: false
          schema:
            type: string
            enum:
              - BASIC
              - FULL
      responses:
        '200':
          description: The deposit account has been returned.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/DepositAccount'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: The deposit account was not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
    put:
      tags:
        - Deposit Accounts
      summary: Update deposit account
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: PUT
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/deposits/{depositAccountId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: depositAccountId
          in: path
          description: The ID or encoded key of the deposit account.
          required: true
          schema:
            type: string
      requestBody:
        description: Represents the information to update a deposit account.
        required: false
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/DepositAccount'
              type: object
      responses:
        '200':
          description: The deposit account has been updated.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/DepositAccount'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: The deposit account was not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '409':
          description: >-
            Operation cannot be performed due to another pending operation that
            locked shared resources.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
    delete:
      tags:
        - Deposit Accounts
      summary: Delete inactive deposit account
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/deposits/{depositAccountId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: depositAccountId
          in: path
          description: The ID or encoded key of the deposit account.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The deposit account has been deleted.
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: The deposit account was not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '409':
          description: >-
            Operation cannot be performed due to another pending operation that
            locked shared resources.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
    patch:
      tags:
        - Deposit Accounts
      summary: Partially update deposit account
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/deposits/{depositAccountId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: depositAccountId
          in: path
          description: The ID or encoded key of the deposit account.
          required: true
          schema:
            type: string
      requestBody:
        description: Patch operations to be applied to a resource.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                #$ref: '#/components/schemas/PatchOperation'
                type: object
      responses:
        '204':
          description: The deposit account has been updated.
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: The deposit account was not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '409':
          description: >-
            Operation cannot be performed due to another pending operation that
            locked shared resources.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  '/api/v1/core/accounts/{depositAccountId}/authorizationholds/{authorizationHoldExternalReferenceId}':
    get:
      tags:
        - Deposit Accounts
      summary: Get account authorization hold
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.path.authorizationHoldExternalReferenceId: "method.request.path.authorizationHoldExternalReferenceId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/deposits/{depositAccountId}/authorizationholds/{authorizationHoldExternalReferenceId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: depositAccountId
          in: path
          description: The ID or encoded key of the deposit account.
          required: true
          schema:
            type: string
        - name: authorizationHoldExternalReferenceId
          in: path
          description: The ID used to reference the authorization hold.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The authorization hold has been returned.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/AccountAuthorizationHold'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: The deposit account was not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
    delete:
      tags:
        - Deposit Accounts
      summary: Reverse account authorization hold
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.path.authorizationHoldExternalReferenceId: "method.request.path.authorizationHoldExternalReferenceId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/deposits/{depositAccountId}/authorizationholds/{authorizationHoldExternalReferenceId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: depositAccountId
          in: path
          description: The ID or encoded key of the deposit account.
          required: true
          schema:
            type: string
        - name: authorizationHoldExternalReferenceId
          in: path
          description: The ID used to reference the authorization hold.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The account authorization hold was successfully reversed.
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: The account or authorization hold was not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '409':
          description: >-
            Operation cannot be performed due to another pending operation that
            locked shared resources.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  '/api/v1/core/accounts:search':
    post:
      tags:
        - Deposit Accounts
      summary: Search deposit accounts
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/deposits:search
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: offset
          in: query
          description: >-
            Pagination, index to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: >-
            Pagination, cursor to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            Pagination, the number of elements to retrieve, used in combination
            with offset to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: paginationDetails
          in: query
          description: >-
            Flag specifying whether the pagination  details should be provided
            in response headers. Please note that by default it is disabled
            (OFF), in order to improve the performance of the APIs
          required: false
          schema:
            type: string
            default: 'OFF'
            enum:
              - 'ON'
              - 'OFF'
        - name: detailsLevel
          in: query
          description: >-
            The level of details to return: `FULL` means the full details of the
            object will be returned (custom field values, address, contact info,
            or any other related objects) and `BASIC` will return only the first
            level elements of the object.
          required: false
          schema:
            type: string
            enum:
              - BASIC
              - FULL
      requestBody:
        description: The criteria to be used to search the deposit accounts.
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/DepositAccountSearchCriteria'
              type: object
      responses:
        '200':
          description: The deposit account search results have been returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: '#/components/schemas/DepositAccount'
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  '/api/v1/core/accounts/{depositAccountId}/changeState':
    post:
      tags:
        - Deposit Accounts
      summary: >-
        Represents the information to post an action, such as approving a
        deposit account.
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/deposits/{depositAccountId}:changeState
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "409":
            statusCode: "409"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: Idempotency-Key
          in: header
          description: >-
            Key that can be used to support idempotency on this POST. Must be a
            valid UUID(version 4 is recommended) string and can only be used
            with the exact same request. Can be used in retry mechanisms to
            prevent double posting.
          required: false
          schema:
            type: string
        - name: depositAccountId
          in: path
          description: The ID or encoded key of the deposit account.
          required: true
          schema:
            type: string
      requestBody:
        description: Represents the action details for a deposit account.
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/DepositAccountAction'
              type: object
      responses:
        '200':
          description: The deposit account action has been posted.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/DepositAccount'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: The deposit account was not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '409':
          description: >-
            Operation cannot be performed due to another pending operation that
            locked shared resources.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  # Deposit Transactions

  /api/v1/core/accounts/{depositAccountId}/transactions:
    get:
      summary: Transaction List All.
      description: Retrieves the transactions with the account identifier and is exists with addition parameters.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/deposits/{depositAccountId}/transactions
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - in: path
          name: depositAccountId
          required: true
          schema:
            type: string
          description: The ID or encoded key of the deposit account used to get all of its transactions.
        - in: query
          name: offset
          schema:
            type: integer
          description: Pagination, index to start searching at when retrieving elements, used in combination with limit to paginate results
        - in: query
          name: limit
          schema:
            type: integer
          description: Pagination, the number of elements to retrieve, used in combination with offset to paginate results
        - in: query
          name: paginationDetails
          schema:
            type: string
          description: Flag specifying whether the pagination details should be provided in response headers. Please note that by default it is disabled (OFF), in order to improve the performance of the APIs
        - in: query
          name: detailsLevel
          schema:
            type: string
          description: The level of details to return - FULL means the full details of the object will be returned (custom field values, address, contact info, or any other related objects) and BASIC will return only the first level elements of the object.

      responses:
        '200':
          description: The list of deposit transactions has been returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object

        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object

  /api/v1/core/accounts/transactions:search:
    post:
      summary: Transaction List Filters.
      description: Retrieves the transactions with the account identifier and is exists with addition parameters.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/deposits/transactions:search
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: Pagination, index to start searching at when retrieving elements, used in combination with limit to paginate results
        - in: query
          name: limit
          schema:
            type: integer
          description: Pagination, the number of elements to retrieve, used in combination with offset to paginate results
        - in: query
          name: paginationDetails
          schema:
            type: string
          description: Flag specifying whether the pagination details should be provided in response headers. Please note that by default it is disabled (OFF), in order to improve the performance of the APIs
        - in: query
          name: detailsLevel
          schema:
            type: string
          description: The level of details to return - FULL means the full details of the object will be returned (custom field values, address, contact info, or any other related objects) and BASIC will return only the first level elements of the object.

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filterCriteria:
                  type: array
                  items:
                    type: object
                    properties:
                      field:
                        type: string
                      operator:
                        type: string
                      values:
                        type: array
                        items:
                          type: string
                sortingCriteria:
                  type: object
                  properties:
                    field:
                      type: string
                    order:
                      type: string
              required:
                - filterCriteria

      responses:
        '200':
          description: The results of a deposit transaction search.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object

  '/api/v1/core/accounts/{depositAccountId}/withdrawal-transactions':
    post:
      tags:
        - DepositTransactions
      summary: Create withdrawal transaction
      description: ''
      operationId: makeWithdrawal
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/deposits/{depositAccountId}/withdrawal-transactions
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: Idempotency-Key
          in: header
          description: >-
            Key that can be used to support idempotency on this POST. Must be a
            valid UUID(version 4 is recommended) string and can only be used
            with the exact same request. Can be used in retry mechanisms to
            prevent double posting.
          required: false
          schema:
            type: string
        - name: depositAccountId
          in: path
          description: >-
            The ID or encoded key of the deposit that the transaction will be
            created for.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/DepositTransactionInput'
              type: object
      responses:
        '201':
          description: The withdrawal transaction has been created.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/DepositTransaction'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: The deposit account was not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '409':
          description: >-
            Operation cannot be performed due to another pending operation that
            locked shared resources.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  '/api/v1/core/accounts/transactions/{depositTransactionId}/adjust':
    post:
      tags:
        - DepositTransactions
      summary: >-
        Adjust a deposit transaction, which may bulk adjust multiple
        transactions
      description: ''
      operationId: adjust
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositTransactionId: "method.request.path.depositTransactionId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/deposits/transactions/{depositTransactionId}:adjust
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: Idempotency-Key
          in: header
          description: >-
            Key that can be used to support idempotency on this POST. Must be a
            valid UUID(version 4 is recommended) string and can only be used
            with the exact same request. Can be used in retry mechanisms to
            prevent double posting.
          required: false
          schema:
            type: string
        - name: depositTransactionId
          in: path
          description: The ID or encoded key of the deposit transaction.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/DepositTransactionAdjustmentDetails'
              type: object
      responses:
        '200':
          description: The deposit transaction has been adjusted.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/DepositTransaction'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: The deposit transaction was not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '409':
          description: >-
            Operation cannot be performed due to another pending operation that
            locked shared resources.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  '/api/v1/core/accounts/{depositAccountId}/deposit-transactions':
    post:
      tags:
        - DepositTransactions
      summary: Create deposit transaction
      description: ''
      operationId: makeDeposit
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/deposits/{depositAccountId}/deposit-transactions
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: Idempotency-Key
          in: header
          description: >-
            Key that can be used to support idempotency on this POST. Must be a
            valid UUID(version 4 is recommended) string and can only be used
            with the exact same request. Can be used in retry mechanisms to
            prevent double posting.
          required: false
          schema:
            type: string
        - name: depositAccountId
          in: path
          description: >-
            The ID or encoded key of the deposit that the transaction will be
            created for.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Represents the information needed to create a deposit transaction.
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/DepositTransactionInput'
              type: object
      responses:
        '201':
          description: The deposit transaction has been created.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/DepositTransaction'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: Not found
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '409':
          description: >-
            Operation cannot be performed due to another pending operation that
            locked shared resources.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  # Groups

  /api/v1/core/groups:
    get:
      summary: Get groups List.
      description: Returns all the Groups by filters.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/groups
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - in: query
          name: offset
          description: Pagination, index to start searching at when retrieving elements, used in combination with limit to paginate results
          schema:
            type: integer
        - in: query
          name: limit
          description: Pagination, the number of elements to retrieve, used in combination with offset to paginate results
          schema:
            type: integer
        - in: query
          name: paginationDetails
          description: Flag specifying whether the pagination details should be provided in response headers. Please note that by default it is disabled (OFF), in order to improve the performance of the APIs
          schema:
            type: string
        - in: query
          name: detailsLevel
          description: The level of details to return - FULL means the full details of the object will be returned (custom field values, address, contact info, or any other related objects) and BASIC will return only the first level elements of the object.
          schema:
            type: string
        - in: query
          name: creditOfficerUsername
          description: The username of the credit officer to whom the entities are assigned to.
          schema:
            type: string
        - in: query
          name: branchId
          description: The id/encodedKey of the branch to which the entities are assigned to.
          schema:
            type: string
        - in: query
          name: centreId
          description: The id/encodedKey of the centre to which the entities are assigned to.
          schema:
            type: string
        - in: query
          name: sortBy
          description: The criteria based on which the records will be sorted. Expected format is, for example, sortBy = field1:ASC,field2:DESC. Only the following fields can be used - creationDate, lastModifiedDate, groupName. Default sorting is done by creationDate:DESC.
          schema:
            type: string

      responses:
        '200':
          description: Groups list returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object

        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object

  /api/v1/core/groups:search:
    post:
      summary: Search groups.
      description: Retrieves the groups with filter criteria.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/groups:search
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: Pagination, index to start searching at when retrieving elements, used in combination with limit to paginate results
        - in: query
          name: limit
          schema:
            type: integer
          description: Pagination, the number of elements to retrieve, used in combination with offset to paginate results
        - in: query
          name: paginationDetails
          schema:
            type: string
          description: Flag specifying whether the pagination details should be provided in response headers. Please note that by default it is disabled (OFF), in order to improve the performance of the APIs
        - in: query
          name: detailsLevel
          schema:
            type: string
          description: The level of details to return - FULL means the full details of the object will be returned (custom field values, address, contact info, or any other related objects) and BASIC will return only the first level elements of the object.

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filterCriteria:
                  type: array
                  items:
                    type: object
                    properties:
                      field:
                        type: string
                      operator:
                        type: string
                      secondValue:
                        type: string
                      value:
                        type: string
                      values:
                        type: array
                        items:
                          type: string
                sortingCriteria:
                  type: object
                  properties:
                    field:
                      type: string
                    order:
                      type: string
              required:
                - filterCriteria

      responses:
        '200':
          description: Result of group search.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object

  # Loans

  "/api/v1/core/loanproducts/{loanProductId}":
    get:
      tags:
        - Loan Products
      summary: Get loan product
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.loanProductId: "method.request.path.loanProductId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/loanproducts/{loanProductId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: getById
      parameters:
        - name: loanProductId
          in: path
          description: The ID or encoded key of the loan product to be returned.
          required: true
          schema:
            type: string
        - name: detailsLevel
          in: query
          description: 'The level of details to return: `FULL` means the full details
              of the object will be returned (custom field values, address, contact info,
              or any other related objects) and `BASIC` will return only the first level
              elements of the object.'
          required: false
          schema:
            type: string
            enum:
              - BASIC
              - FULL
      responses:
        '200':
          description: Loan product returned.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/LoanProduct"
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan product not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object

  "/api/v1/core/loanproducts":
    get:
      tags:
        - Loan Products
      summary: Get loan products
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/loanproducts
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: getAll
      parameters:
        - name: offset
          in: query
          description: Pagination, index to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: Pagination, cursor to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Pagination, the number of elements to retrieve, used in combination
            with offset to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: paginationDetails
          in: query
          description: Flag specifying whether the pagination  details should be provided
            in response headers. Please note that by default it is disabled (OFF), in
            order to improve the performance of the APIs
          required: false
          schema:
            type: string
            default: 'OFF'
            enum:
              - 'ON'
              - 'OFF'
        - name: sortBy
          in: query
          description: 'The criteria based on which the records will be sorted. Expected
              format is <field:order>, for example, sortBy = field1:ASC,field2:DESC.<br/>Only
              the following fields can be used: ID, productName, creationDate, lastModifiedDate<br/>Default
              sorting is done by creationDate:DESC'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Loan products returned.
          headers:
            Items-Limit:
              schema:
                type: integer
                format: int32
              description: Pagination details, the requested page size
            Items-Offset:
              description: Pagination details, the index of the first returned item
              schema:
                type: integer
                format: int32
            Items-Total:
              schema:
                type: integer
                format: int32
              description: Pagination details, the total available items
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: "#/components/schemas/LoanProduct"
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object

  "/api/v1/core/loans:search":
    post:
      tags:
        - LoanAccountsSearch
      summary: Search loan accounts
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/loans:search
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: search
      parameters:
        - name: offset
          in: query
          description: Pagination, index to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: Pagination, cursor to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Pagination, the number of elements to retrieve, used in combination
            with offset to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: paginationDetails
          in: query
          description: Flag specifying whether the pagination  details should be provided
            in response headers. Please note that by default it is disabled (OFF), in
            order to improve the performance of the APIs
          required: false
          schema:
            type: string
            default: 'OFF'
            enum:
              - 'ON'
              - 'OFF'
        - name: detailsLevel
          in: query
          description: 'The level of details to return: `FULL` means the full details
          of the object will be returned (custom field values, address, contact info,
          or any other related objects) and `BASIC` will return only the first level
          elements of the object.'
          required: false
          schema:
            type: string
            enum:
              - BASIC
              - FULL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              #$ref: "#/components/schemas/LoanAccountSearchCriteria"
              type: object
      responses:
        '200':
          description: Result of loan account search.
          headers:
            Items-Limit:
              schema:
                type: integer
                format: int32
              description: Pagination details, the requested page size
            Items-Offset:
              description: Pagination details, the index of the first returned item
              schema:
                type: integer
                format: int32
            Items-Total:
              schema:
                type: integer
                format: int32
              description: Pagination details, the total available items
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object

  "/api/v1/core/loans/{loanAccountId}":
    get:
      tags:
        - Loan Accounts
      summary: Get loan account
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.loanAccountId: "method.request.path.loanAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/loans/{loanAccountId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: getById
      parameters:
        - name: loanAccountId
          in: path
          description: The ID or encoded key of the loan account.
          required: true
          schema:
            type: string
        - name: detailsLevel
          in: query
          description: 'The level of details to return: `FULL` means the full details
            of the object will be returned (custom field values, address, contact info,
            or any other related objects) and `BASIC` will return only the first level
            elements of the object.'
          required: false
          schema:
            type: string
            enum:
              - BASIC
              - FULL
      responses:
        '200':
          description: Loan account returned.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/LoanAccount"
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
    put:
      tags:
        - Loan Accounts
      summary: Update loan account
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: PUT
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.loanAccountId: "method.request.path.loanAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/loans/{loanAccountId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: update
      parameters:
        - name: loanAccountId
          in: path
          description: The ID or encoded key of the loan account.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              #$ref: "#/components/schemas/LoanAccount"
              type: object
      responses:
        '200':
          description: Loan account updated.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/LoanAccount"
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
    delete:
      tags:
        - Loan Accounts
      summary: Delete loan account
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.loanAccountId: "method.request.path.loanAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/loans/{loanAccountId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: delete
      parameters:
        - name: loanAccountId
          in: path
          description: The ID or encoded key of the loan account.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Loan account deleted.
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
    patch:
      tags:
        - Loan Accounts
      summary: Partially update loan account
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.loanAccountId: "method.request.path.loanAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/loans/{loanAccountId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: patch
      parameters:
        - name: loanAccountId
          in: path
          description: The ID or encoded key of the loan account.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                #$ref: "#/components/schemas/PatchOperation"
                type: object
      responses:
        '204':
          description: Loan account updated.
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object

  "/api/v1/core/loans/{loanAccountId}/authorizationholds":
    get:
      tags:
        - Loan Accounts
      summary: Get authorization holds related to a loan account, ordered from newest
        to oldest by creation date
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.loanAccountId: "method.request.path.loanAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/loans/{loanAccountId}/authorizationholds
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: getAllAuthorizationHolds
      parameters:
        - name: loanAccountId
          in: path
          description: The ID or encoded key of the loan account.
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: Pagination, index to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: Pagination, cursor to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Pagination, the number of elements to retrieve, used in combination
            with offset to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: paginationDetails
          in: query
          description: Flag specifying whether the pagination  details should be provided
            in response headers. Please note that by default it is disabled (OFF), in
            order to improve the performance of the APIs
          required: false
          schema:
            type: string
            default: 'OFF'
            enum:
              - 'ON'
              - 'OFF'
        - name: status
          in: query
          description: The status of the authorization holds to filter on
          required: false
          schema:
            type: string
            enum:
              - PENDING
              - REVERSED
              - SETTLED
              - EXPIRED
      responses:
        '200':
          description: The list of authorization holds has been returned.
          headers:
            Items-Limit:
              schema:
                type: integer
                format: int32
              description: Pagination details, the requested page size
            Items-Offset:
              description: Pagination details, the index of the first returned item
              schema:
                type: integer
                format: int32
            Items-Total:
              schema:
                type: integer
                format: int32
              description: Pagination details, the total available items
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: "#/components/schemas/GetAuthorizationHold"
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object

  "/api/v1/core/loans/{loanAccountId}/cards":
    get:
      tags:
        - Loan Accounts
      summary: Get cards associated with an account
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.loanAccountId: "method.request.path.loanAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/loans/{loanAccountId}/cards
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: getAllCards
      parameters:
        - name: loanAccountId
          in: path
          description: The ID or encoded key of the loan account.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The list of cards attached to the account was returned.
          headers:
            Items-Limit:
              schema:
                type: integer
                format: int32
              description: Pagination details, the requested page size
            Items-Offset:
              description: Pagination details, the index of the first returned item
              schema:
                type: integer
                format: int32
            Items-Total:
              schema:
                type: integer
                format: int32
              description: Pagination details, the total available items
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: "#/components/schemas/Card"
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
    post:
      tags:
        - Loan Accounts
      summary: Represents the information needed to create and associate a new card
        to an account.
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.loanAccountId: "method.request.path.loanAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/loans/{loanAccountId}/cards
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: createCard
      parameters:
        - name: Idempotency-Key
          in: header
          description: Key that can be used to support idempotency on this POST. Must
            be a valid UUID(version 4 is recommended) string and can only be used with
            the exact same request. Can be used in retry mechanisms to prevent double
            posting.
          required: false
          schema:
            type: string
        - name: loanAccountId
          in: path
          description: The ID or encoded key of the loan account.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              #$ref: "#/components/schemas/Card"
              type: object
      responses:
        '201':
          description: The card was created.
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object

  "/api/v1/core/loans":
    get:
      tags:
        - Loan Accounts
      summary: Get loan accounts
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/loans
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: getAll
      parameters:
        - name: offset
          in: query
          description: Pagination, index to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: Pagination, cursor to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Pagination, the number of elements to retrieve, used in combination
            with offset to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: paginationDetails
          in: query
          description: Flag specifying whether the pagination  details should be provided
            in response headers. Please note that by default it is disabled (OFF), in
            order to improve the performance of the APIs
          required: false
          schema:
            type: string
            default: 'OFF'
            enum:
              - 'ON'
              - 'OFF'
        - name: detailsLevel
          in: query
          description: 'The level of details to return: `FULL` means the full details
          of the object will be returned (custom field values, address, contact info,
          or any other related objects) and `BASIC` will return only the first level
          elements of the object.'
          required: false
          schema:
            type: string
            enum:
              - BASIC
              - FULL
        - name: creditOfficerUsername
          in: query
          description: The username of the credit officer to whom the entities are assigned
            to
          required: false
          schema:
            type: string
        - name: branchId
          in: query
          description: The id/encodedKey of the branch to which the entities are assigned
            to
          required: false
          schema:
            type: string
        - name: centreId
          in: query
          description: The id/encodedKey of the centre to which the entities are assigned
            to
          required: false
          schema:
            type: string
        - name: accountState
          in: query
          description: The state of the loan account to search for
          required: false
          schema:
            type: string
            enum:
              - PARTIAL_APPLICATION
              - PENDING_APPROVAL
              - APPROVED
              - ACTIVE
              - ACTIVE_IN_ARREARS
              - CLOSED
        - name: accountHolderType
          in: query
          description: 'The type of the account holder: CLIENT/GROUP'
          required: false
          schema:
            type: string
            enum:
              - CLIENT
              - GROUP
        - name: accountHolderId
          in: query
          description: The id of the account holder
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: 'The criteria based on which the records will be sorted. Expected
          format is <field:order>, for example, sortBy = field1:ASC,field2:DESC.<br/>Only
          the following fields can be used: id, loanName, creationDate, lastModifiedDate<br/>Default
          sorting is done by creationDate:ASC'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Loan accounts list returned.
          headers:
            Items-Limit:
              schema:
                type: integer
                format: int32
              description: Pagination details, the requested page size
            Items-Offset:
              description: Pagination details, the index of the first returned item
              schema:
                type: integer
                format: int32
            Items-Total:
              schema:
                type: integer
                format: int32
              description: Pagination details, the total available items
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: "#/components/schemas/LoanAccount"
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
    post:
      tags:
        - Loan Accounts
      summary: Create loan account
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/loans
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: create
      parameters:
        - name: Idempotency-Key
          in: header
          description: Key that can be used to support idempotency on this POST. Must
            be a valid UUID(version 4 is recommended) string and can only be used with
            the exact same request. Can be used in retry mechanisms to prevent double
            posting.
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              #$ref: "#/components/schemas/LoanAccount"
              type: object
      responses:
        '201':
          description: Loan account created.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/LoanAccount"
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object

  "/api/v1/core/loans/{loanAccountId}/plannedfees/{plannedInstallmentFeeKey}":
    delete:
      tags:
        - Loan Account Planned Fees
      summary: Delete planned fee
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.loanAccountId: "method.request.path.loanAccountId"
          integration.request.path.plannedInstallmentFeeKey: "method.request.path.plannedInstallmentFeeKey"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/loans/{loanAccountId}/plannedfees/{plannedInstallmentFeeKey}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: deletePlannedFees
      parameters:
        - name: loanAccountId
          in: path
          description: The ID or encoded key of the loan account.
          required: true
          schema:
            type: string
        - name: plannedInstallmentFeeKey
          in: path
          description: The encoded key of the planned installment fee to be deleted.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Loan account planned installment fee was deleted.
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object

  "/api/v1/core/loans/transactions:search":
    post:
      tags:
        - Loan Transactions
      summary: Search loan transactions
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/loans/transactions:search
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: search
      parameters:
        - name: offset
          in: query
          description: Pagination, index to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: Pagination, cursor to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Pagination, the number of elements to retrieve, used in combination
            with offset to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: paginationDetails
          in: query
          description: Flag specifying whether the pagination  details should be provided
            in response headers. Please note that by default it is disabled (OFF), in
            order to improve the performance of the APIs
          required: false
          schema:
            type: string
            default: 'OFF'
            enum:
              - 'ON'
              - 'OFF'
        - name: detailsLevel
          in: query
          description: 'The level of details to return: `FULL` means the full details
            of the object will be returned (custom field values, address, contact info,
            or any other related objects) and `BASIC` will return only the first level
            elements of the object.'
          required: false
          schema:
            type: string
            enum:
              - BASIC
              - FULL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              #$ref: "#/components/schemas/LoanTransactionSearchCriteria"
              type: object
      responses:
        '200':
          description: Result of a loan transaction search.
          headers:
            Items-Next-Cursor:
              schema:
                type: string
              description: The next cursor to be used by the subsequent calls
            Items-Limit:
              schema:
                type: integer
                format: int32
              description: Pagination details, the requested page size
            Items-Offset:
              schema:
                type: integer
                format: int32
              description: Pagination details, the index of the first returned item
            Items-Total:
              schema:
                type: integer
                format: int32
              description: Pagination details, the total available items
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: "#/components/schemas/LoanTransaction"
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object

  "/api/v1/core/loans/transactions/{loanTransactionId}":
    get:
      tags:
        - Loan Transactions
      summary: Get loan transaction
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/loans/transactions/{loanTransactionId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: getById
      parameters:
        - name: loanTransactionId
          in: path
          description: The ID or encoded key of the loan transaction to be returned.
          required: true
          schema:
            type: string
        - name: detailsLevel
          in: query
          description: 'The level of details to return: `FULL` means the full details
            of the object will be returned (custom field values, address, contact info,
            or any other related objects) and `BASIC` will return only the first level
            elements of the object.'
          required: false
          schema:
            type: string
            enum:
              - BASIC
              - FULL
      responses:
        '200':
          description: Loan transaction returned.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/LoanTransaction"
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object

  "/api/v1/core/loans/{loanAccountId}/transactions":
    get:
      tags:
        - Loan Transactions
      summary: Get loan transactions
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.loanAccountId: "method.request.path.loanAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/loans/{loanAccountId}/transactions
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: getAll
      parameters:
        - name: loanAccountId
          in: path
          description: The ID or encoded key of the loan account.
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: Pagination, index to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: Pagination, cursor to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Pagination, the number of elements to retrieve, used in combination
            with offset to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: paginationDetails
          in: query
          description: Flag specifying whether the pagination  details should be provided
            in response headers. Please note that by default it is disabled (OFF), in
            order to improve the performance of the APIs
          required: false
          schema:
            type: string
            default: 'OFF'
            enum:
              - 'ON'
              - 'OFF'
        - name: detailsLevel
          in: query
          description: 'The level of details to return: `FULL` means the full details
            of the object will be returned (custom field values, address, contact info,
            or any other related objects) and `BASIC` will return only the first level
            elements of the object.'
          required: false
          schema:
            type: string
            enum:
              - BASIC
              - FULL
      responses:
        '200':
          description: Loan transactions list returned.
          headers:
            Items-Limit:
              schema:
                type: integer
                format: int32
              description: Pagination details, the requested page size
            Items-Offset:
              schema:
                type: integer
                format: int32
              description: Pagination details, the index of the first returned item
            Items-Total:
              schema:
                type: integer
                format: int32
              description: Pagination details, the total available items
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: "#/components/schemas/LoanTransaction"
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object

  "/api/v1/core/loans/{loanAccountId}/schedule":
    get:
      tags:
        - Loan Account Schedule
      summary: Get loan account schedule
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.loanAccountId: "method.request.path.loanAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/loans/{loanAccountId}/schedule
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: getScheduleForLoanAccount
      parameters:
        - name: loanAccountId
          in: path
          description: The ID or encoded key of the loan account.
          required: true
          schema:
            type: string
        - name: detailsLevel
          in: query
          description: 'The level of details to return: `FULL` means the full details
            of the object will be returned (custom field values, address, contact info,
            or any other related objects) and `BASIC` will return only the first level
            elements of the object.'
          required: false
          schema:
            type: string
            enum:
              - BASIC
              - FULL
      responses:
        '200':
          description: Loan account schedule returned by the loan account ID or encoded
            key.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/LoanAccountSchedule"
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
    put:
      tags:
        - Loan Account Schedule
      summary: Update loan account schedule
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: PUT
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.loanAccountId: "method.request.path.loanAccountId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/loans/{loanAccountId}/schedule
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: editSchedule
      parameters:
        - name: loanAccountId
          in: path
          description: The ID or encoded key of the loan account.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                #$ref: "#/components/schemas/Installment"
                type: object
      responses:
        '200':
          description: Updated loan account schedule.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/LoanAccountSchedule"
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Loan account not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object

  # GL

  /api/v1/core/gljournalentries:
    get:
      tags:
        - Journal Entries
      summary: Get general ledger journal entries
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/gljournalentries
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: offset
          in: query
          description: >-
            Pagination, index to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: >-
            Pagination, cursor to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            Pagination, the number of elements to retrieve, used in combination
            with offset to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: paginationDetails
          in: query
          description: >-
            Flag specifying whether the pagination  details should be provided
            in response headers. Please note that by default it is disabled
            (OFF), in order to improve the performance of the APIs
          required: false
          schema:
            type: string
            default: 'OFF'
            enum:
              - 'ON'
              - 'OFF'
        - name: from
          in: query
          description: The booking date to search from for general ledger journal entries.
          required: true
          schema:
            type: string
            format: date
        - name: to
          in: query
          description: The booking date to search to for general ledger journal entries.
          required: true
          schema:
            type: string
            format: date
        - name: branchId
          in: query
          description: The branch ID to filter general ledger journal entries by.
          required: false
          schema:
            type: string
        - name: glAccountId
          in: query
          description: >-
            The general ledger account ID to filter general ledger journal
            entries by.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: General ledger journal entries list returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: '#/components/schemas/GLJournalEntry'
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
    post:
      tags:
        - Journal Entries
      summary: Create general ledger journal entries.
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/gljournalentries
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: Idempotency-Key
          in: header
          description: >-
            Key that can be used to support idempotency on this POST. Must be a
            valid UUID(version 4 is recommended) string and can only be used
            with the exact same request. Can be used in retry mechanisms to
            prevent double posting.
          required: false
          schema:
            type: string
      requestBody:
        required: true
        description: Represents the information to create general ledger journal entries.
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/PostGLJournalEntriesDTO'
              type: object
      responses:
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  '/api/v1/core/gljournalentries:search':
    post:
      tags:
        - Journal Entries
      summary: Search for general ledger journal entries
      description: ''
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/gljournalentries:search
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: offset
          in: query
          description: >-
            Pagination, index to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: >-
            Pagination, cursor to start searching at when retrieving elements,
            used in combination with limit to paginate results
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            Pagination, the number of elements to retrieve, used in combination
            with offset to paginate results
          required: false
          schema:
            type: integer
            format: int32
        - name: paginationDetails
          in: query
          description: >-
            Flag specifying whether the pagination  details should be provided
            in response headers. Please note that by default it is disabled
            (OFF), in order to improve the performance of the APIs
          required: false
          schema:
            type: string
            default: 'OFF'
            enum:
              - 'ON'
              - 'OFF'
      requestBody:
        required: true
        description: >-
          Represents the filtering criteria and sorting criterion to search
          for general ledger journal entries.
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/GLJournalEntrySearchCriteria'
              type: object
      responses:
        '200':
          description: The general ledger journal entry search returned values.
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: '#/components/schemas/GLJournalEntry'
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  # Cards

  /api/v1/core/cards/{cardReferenceToken}/authorizationholds/{externalReferenceId}:
    get:
      summary: Redirects the request to the external card processing service.
      description: This endpoint redirects the request to the external card processing service to get card authorization hold.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.cardReferenceToken: "method.request.path.cardReferenceToken"
          integration.request.path.authorizationHoldExternalReferenceId: "method.request.path.authorizationHoldExternalReferenceId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/cards/{cardReferenceToken}/authorizationholds/{authorizationHoldExternalReferenceId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: cardReferenceToken
          in: path
          required: true
          schema:
            type: string
          description: "Unique identifier for the card reference token"
          example: "card-token-12345"
        - name: authorizationHoldExternalReferenceId
          in: path
          required: true
          schema:
            type: string
          description: "External reference ID for the authorization hold"
          example: "auth-hold-ext-ref-98765"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/GetAuthorizationHold'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
    delete:
      summary: Redirects the request to the external card processing service.
      description: This endpoint redirects the request to the external card processing service to delete card authorization hold.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.cardReferenceToken: "method.request.path.cardReferenceToken"
          integration.request.path.authorizationHoldExternalReferenceId: "method.request.path.authorizationHoldExternalReferenceId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/cards/{cardReferenceToken}/authorizationholds/{authorizationHoldExternalReferenceId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: cardReferenceToken
          in: path
          required: true
          schema:
            type: string
          description: "Unique identifier for the card reference token"
          example: "card-token-12345"
        - name: authorizationHoldExternalReferenceId
          in: path
          required: true
          schema:
            type: string
          description: "External reference ID for the authorization hold"
          example: "auth-hold-ext-ref-98765"
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
    patch:
      summary: Redirects the request to the external card processing service.
      description: This endpoint redirects the request to the external card processing service to delete card authorization hold.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.cardReferenceToken: "method.request.path.cardReferenceToken"
          integration.request.path.authorizationHoldExternalReferenceId: "method.request.path.authorizationHoldExternalReferenceId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/cards/{cardReferenceToken}/authorizationholds/{authorizationHoldExternalReferenceId}
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: cardReferenceToken
          in: path
          required: true
          schema:
            type: string
          description: "Unique identifier for the card reference token"
          example: "card-token-12345"
        - name: authorizationHoldExternalReferenceId
          in: path
          required: true
          schema:
            type: string
          description: "External reference ID for the authorization hold"
          example: "auth-hold-ext-ref-98765"
      requestBody:
        description: Request body for operation
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/PatchOperation'
              type: object
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ErrorResponse"
                type: object

  /api/v1/core/cards/{cardReferenceToken}/authorizationholds/{externalReferenceId}/increase:
    post:
      summary: Redirects the request to the external card processing service.
      description: This endpoint redirects the request to the external card processing service to increase authorization hold amount.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.cardReferenceToken: "method.request.path.cardReferenceToken"
          integration.request.path.authorizationHoldExternalReferenceId: "method.request.path.authorizationHoldExternalReferenceId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/cards/{cardReferenceToken}/authorizationholds/{authorizationHoldExternalReferenceId}:increase
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: cardReferenceToken
          in: path
          required: true
          schema:
            type: string
          description: "Unique identifier for the card reference token"
          example: "card-token-12345"
        - name: authorizationHoldExternalReferenceId
          in: path
          required: true
          schema:
            type: string
          description: "External reference ID for the authorization hold"
          example: "auth-hold-ext-ref-98765"
      requestBody:
        description: Request body for transaction
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/AuthorizationHoldAmountAdjustmentRequest'
              type: object
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  advice:
                    type: boolean
                    description: "Indicates whether advice is needed for the transaction"
                    example: true
                  amount:
                    type: number
                    description: "The amount associated with the transaction"
                    example: 0
                  currencyCode:
                    type: string
                    description: "The currency code of the transaction"
                    example: "USD"
                  externalReferenceId:
                    type: string
                    description: "The external reference ID associated with the transaction"
                    example: "ext-ref-98765"
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/core/cards/{cardReferenceToken}/authorizationholds/{externalReferenceId}/decrease:
    post:
      summary: Redirects the request to the external card processing service.
      description: This endpoint redirects the request to the external card processing service to decreases the amount of an authorization hold. If the amount is greater or equal to the authorization hold amount, then the authorization hold is reversed.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.cardReferenceToken: "method.request.path.cardReferenceToken"
          integration.request.path.authorizationHoldExternalReferenceId: "method.request.path.authorizationHoldExternalReferenceId"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/cards/{cardReferenceToken}/authorizationholds/{authorizationHoldExternalReferenceId}:decrease
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: cardReferenceToken
          in: path
          required: true
          schema:
            type: string
          description: "Unique identifier for the card reference token"
          example: "card-token-12345"
        - name: authorizationHoldExternalReferenceId
          in: path
          required: true
          schema:
            type: string
          description: "External reference ID for the authorization hold"
          example: "auth-hold-ext-ref-98765"
      requestBody:
        description: Request body for transaction advice
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/AuthorizationHoldAmountAdjustmentRequest'
              type: object
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  advice:
                    type: boolean
                    description: "Indicates whether advice was provided for the transaction"
                    example: true
                  amount:
                    type: number
                    description: "The amount involved in the transaction"
                    example: 0
                  currencyCode:
                    type: string
                    description: "The currency code used in the transaction"
                    example: "USD"
                  externalReferenceId:
                    type: string
                    description: "The external reference ID for tracking the transaction"
                    example: "ext-ref-98765"
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/core/cards/{cardReferenceToken}/authorizationholds:
    post:
      summary: Redirects the request to the external card processing service.
      description: This endpoint redirects the request to the external card processing service to create an authorization hold corresponding to a given card.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.cardReferenceToken: "method.request.path.cardReferenceToken"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/cards/{cardReferenceToken}/authorizationholds
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: cardReferenceToken
          in: path
          required: true
          schema:
            type: string
          description: "Unique identifier for the card reference token"
          example: "card-token-12345"
      requestBody:
        description: Request body for authorization hold
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/AuthorizationHold'
              type: object
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/AuthorizationHold'
                type: object
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/core/cards/ehi:
    post:
      summary: Redirects the request to the external card processing service.
      description: This endpoint redirects the request to the external card processing service to create an authorization hold corresponding to a given card.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "9n57qb"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/json'"
        uri: https://card-transaction-proxy-service.gibdev-internal.com/api/v1/cards/ehi
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      requestBody:
        description: Request body for authorization hold
        required: true
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/AuthorizationHold'
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/AuthorizationHold'
                type: object
                additionalProperties: true
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  # Streaming

  /api/v1/core/subscriptions:
    post:
      description: This endpoint creates a subscription for event_types
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/v1/subscriptions
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/core/subscriptions/{subscription_id}/events:
    get:
      description: This endpoint starts a new stream for reading events from this subscription. The data will be automatically rebalanced between streams of one subscription
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.subscription_id: "method.request.path.subscription_id"
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://gibts3.sandbox.mambu.com/api/v1/subscriptions/{subscription_id}/events
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Access forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: Subscription not found
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  # Payment provider routes ####################################################################

  /api/v1/payment/validate/iban:
    post:
      summary: Validate an IBAN (advanced validation)
      description: Validates an IBAN (ISO-13616 International Bank Account Number), checking the country code, the checksum and that the length of the IBAN is correct for the country. In addition to the standard IBAN validation, the advanced validation request also deconstructs the IBAN and validates the account details.
      # x-amazon-apigateway-integration:
      #   httpMethod: POST
      #   payloadFormatVersion: 1.0
      #   type: HTTP_PROXY
      #   uri: https://???/v1/api/ValidateIbanAdvanced
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            #set($context.requestOverride.path.body = $input.body)
            #set($inputRoot = $input.path('$'))
            #if($inputRoot.Iban == 'TR350006200023400009073271')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.Iban == 'TR350006200023400009073272')
              {
                "statusCode": 200
              }
            #else
              {
                "statusCode": 400
              }
            #end
        responses:
          '200':
            statusCode: 200
            responseTemplates:
              application/json: |
                #set($body = $context.requestOverride.path.body)
                #if($util.parseJson($body).Iban == 'TR350006200023400009073271')
                  {
                    "InputIban": "TR350006200023400009073271",
                    "AdditionalValidationInfo": false,
                    "AdditionalValidationInfoText": null,
                    "OutputCountryCode": null,
                    "OutputCountryName": null,
                    "OutputIban": "TR350006200023400009073271",
                    "OutputBban": "0006200023400009073271",
                    "OutputAccountNumber": "0023400009073271",
                    "BankBranch": {
                      "BranchTitle": "",
                      "BranchCode": "",
                      "RoutingNumber": "",
                      "InstitutionTitle": "",
                      "BranchAddress": "",
                      "Bic": "",
                      "OverridingProcessingBank": "TURKIYE GARANTI BANKASI A.S.",
                      "OverridingSwiftBic": "TGBATRISXXX"
                    },
                    "InvalidIssue": null,
                    "Valid": true,
                    "InvalidReason": null,
                    "InvalidParameter": null
                  }
                #elseif($util.parseJson($body).Iban == 'TR350006200023400009073272')
                  {
                    "InputIban": "TR350006200023400009073272",
                    "AdditionalValidationInfo": false,
                    "AdditionalValidationInfoText": null,
                    "OutputCountryCode": null,
                    "OutputCountryName": null,
                    "OutputIban": "TR350006200023400009073272",
                    "OutputBban": "0006200023400009073271",
                    "OutputAccountNumber": "0023400009073271",
                    "BankBranch": {
                      "BranchTitle": "",
                      "BranchCode": "",
                      "RoutingNumber": "",
                      "InstitutionTitle": "",
                      "BranchAddress": "",
                      "Bic": "",
                      "OverridingProcessingBank": "TURKIYE GARANTI BANKASI A.S.",
                      "OverridingSwiftBic": "TGBATRISXXX"
                    },
                    "InvalidIssue": 6,
                    "Valid": false,
                    "InvalidReason": "(FAIL 02bc) = The Bank Identifier could not be found.",
                    "InvalidParameter": "iban"
                  }  
                #end
          '400':
            statusCode: 400
            responseTemplates:
              application/json: |
                {
                  "Message": "Bad Request"
                }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ApiKey
                - Iban
              properties:
                ApiKey:
                  type: string
                  description: The API key, fixed format and provided at sign up.
                Iban:
                  type: string
                  description: The IBAN to validate.
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  InputIban:
                    type: string
                    description: The IBAN that was passed into the validate operation.
                  AdditionalValidationInfo:
                    type: boolean
                    description: Indicates whether this valid result has further information regarding the result.
                  AdditionalValidationInfoText:
                    type: string
                    description: The further information text regarding this valid result.
                  OutputCountryCode:
                    type: string
                    description: The returned Country code.
                  OutputCountryName:
                    type: string
                    description: The returned Country Name.
                  OutputIban:
                    type: string
                    description: The returned IBAN.
                  OutputBban:
                    type: string
                    description: The returned BBAN.
                  OutputAccountNumber:
                    type: string
                    description: The returned Account Number.
                  BankBranch:
                    type: object
                    description: Class containing all Bank Branch details for the given input data.
                    properties:
                      BranchTitle:
                        type: string
                        description: The Branch Title.
                      BranchCode:
                        type: string
                        description: The Bank Branch Code.
                      RoutingNumber:
                        type: string
                        description: The Routing Number.
                      InstitutionTitle:
                        type: string
                        description: The Institution Title that the Branch belongs to.
                      BranchAddress:
                        type: string
                        description: The Address of the Branch.
                      Bic:
                        type: string
                        description: The BIC for the Branch.
                      OverridingProcessingBank:
                        type: string
                        description: The Override processing Bank.
                      OverridingSwiftBic:
                        type: string
                        description: The Override SWIFT BIC.
                  InvalidIssue:
                    type: number
                    enum:
                      - 0
                      - 1
                      - 2
                      - 3
                      - 4
                      - 5
                      - 6
                      - 7
                      - 8
                      - 9
                      - 10
                      - 11
                      - 12
                      - 13
                      - -1
                    description: Enum value indicating any the reason for validation failure
                  Valid:
                    type: boolean
                    description: Whether the validation operation deemed the data valid.
                  InvalidReason:
                    type: string
                    description: If not valid, a human readable description of the reason.
                  InvalidParameter:
                    type: string
                    description: If not valid, the input parameter which was responsible. Empty if a single parameter cannot be attributed.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '401':
          description: Returned if the given verifier requires authentication and the user is currently not authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
  /api/v1/payment/validate/bban:
    post:
      summary: Validate a BBAN
      description: Validates a BBAN (Basic Bank Account Number) against the provided IBAN country. The BBAN format is validated and then deconstructed so that its constituent account details can also be verified
      # x-amazon-apigateway-integration:
      #   httpMethod: POST
      #   payloadFormatVersion: 1.0
      #   type: HTTP_PROXY
      #   uri: https://???/v1/api/ValidateBban
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            #set($context.requestOverride.path.body = $input.body)
            #set($inputRoot = $input.path('$'))
            #if($inputRoot.BBan == 'LOYD30919700875502')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.BBan == 'LOYD30919700875503')
              {
                "statusCode": 200
              }
            #else
              {
                "statusCode": 400
              }
            #end
        responses:
          '200':
            statusCode: 200
            responseTemplates:
              application/json: |
                #set($body = $context.requestOverride.path.body)
                #if($util.parseJson($body).BBan == 'LOYD30919700875502')
                  {
                    "InputCountryCode": "GB",
                    "InputBban": "LOYD30919700875502",
                    "AdditionalValidationInfo": false,
                    "AdditionalValidationInfoText": null,
                    "OutputCountryCode": "GB",
                    "OutputCountryName": "UNITED KINGDOM",
                    "OutputIban": "GB24LOYD30919700875502",
                    "OutputBban": "LOYD30919700875502",
                    "OutputAccountNumber": "00875502",
                    "BankBranch": {
                      "BranchTitle": "(CHICHESTER - 309197)",
                      "BranchCode": "LOYD309197",
                      "RoutingNumber": "309197",
                      "InstitutionTitle": "LLOYDS BANK PLC",
                      "BranchAddress": "10 EAST STREET, CHICHESTER, UNITED KINGDOM, PO191HJ",
                      "Bic": "LOYDGB21233",
                      "OverridingProcessingBank": "LLOYDS BANK PLC",
                      "OverridingSwiftBic": "LOYDGB21233"
                    },
                    "InvalidIssue": 0,
                    "Valid": true,
                    "InvalidReason": "",
                    "InvalidParameter": ""
                  }
                #elseif($util.parseJson($body).BBan == 'LOYD30919700875503')
                  {
                    "InputCountryCode": "GB",
                    "InputBban": "LOYD30919700875503",
                    "AdditionalValidationInfo": false,
                    "AdditionalValidationInfoText": null,
                    "OutputCountryCode": "GB",
                    "OutputCountryName": "UNITED KINGDOM",
                    "OutputIban": "GB24LOYD30919700875503",
                    "OutputBban": "LOYD30919700875503",
                    "OutputAccountNumber": "00875502",
                    "BankBranch": {
                      "BranchTitle": "(CHICHESTER - 309197)",
                      "BranchCode": "LOYD309197",
                      "RoutingNumber": "309197",
                      "InstitutionTitle": "LLOYDS BANK PLC",
                      "BranchAddress": "10 EAST STREET, CHICHESTER, UNITED KINGDOM, PO191HJ",
                      "Bic": "LOYDGB21233",
                      "OverridingProcessingBank": "LLOYDS BANK PLC",
                      "OverridingSwiftBic": "LOYDGB21233"
                    },
                    "InvalidIssue": 0,
                    "Valid": false,
                    "InvalidReason": "Invalid Reason",
                    "InvalidParameter": "Invalid Parameter"
                  }
                #end
          '400':
            statusCode: 400
            responseTemplates:
              application/json: |
                {
                  "Message": "Bad Request"
                }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ApiKey
                - CountryCode
                - BBan
              properties:
                ApiKey:
                  type: string
                  description: The API key, fixed format and provided at sign up.
                CountryCode:
                  type: string
                  description: The country code
                BBan:
                  type: string
                  description: The BBAN
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  InputCountryCode:
                    type: string
                    description: The Country code that was passed into the validate operation.
                  InputBban:
                    type: string
                    description: The BBAN that was passed into the validate operation.
                  AdditionalValidationInfo:
                    type: boolean
                    description: Indicates whether this valid result has further information regarding the result.
                  AdditionalValidationInfoText:
                    type: string
                    description: The further information text regarding this valid result.
                  OutputCountryCode:
                    type: string
                    description: The returned Country code.
                  OutputCountryName:
                    type: string
                    description: The returned Country Name.
                  OutputIban:
                    type: string
                    description: The returned IBAN.
                  OutputBban:
                    type: string
                    description: The returned BBAN.
                  OutputAccountNumber:
                    type: string
                    description: The returned Account Number.
                  BankBranch:
                    type: object
                    description: Class containing all Bank Branch details for the given input data.
                    properties:
                      BranchTitle:
                        type: string
                        description: The Branch Title.
                      BranchCode:
                        type: string
                        description: The Bank Branch Code.
                      RoutingNumber:
                        type: string
                        description: The Routing Number.
                      InstitutionTitle:
                        type: string
                        description: The Institution Title that the Branch belongs to.
                      BranchAddress:
                        type: string
                        description: The Address of the Branch.
                      Bic:
                        type: string
                        description: The BIC for the Branch.
                      OverridingProcessingBank:
                        type: string
                        description: The Override processing Bank.
                      OverridingSwiftBic:
                        type: string
                        description: The Override SWIFT BIC.
                  InvalidIssue:
                    type: number
                    enum:
                      - 0
                      - 1
                      - 2
                      - 3
                      - 4
                      - 5
                      - 6
                      - 7
                      - 8
                      - 9
                      - 10
                      - 11
                      - 12
                      - 13
                      - -1
                    description: Enum value indicating any the reason for validation failure
                  Valid:
                    type: boolean
                    description: Whether the validation operation deemed the data valid.
                  InvalidReason:
                    type: string
                    description: If not valid, a human readable description of the reason.
                  InvalidParameter:
                    type: string
                    description: If not valid, the input parameter which was responsible. Empty if a single parameter cannot be attributed.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '401':
          description: Returned if the given verifier requires authentication and the user is currently not authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
  /api/v1/payment/validate/domestic-account:
    post:
      summary: Validate a domestic account
      description: Validates a domestic account details against the provided IBAN country, checking that the bank branch exists and that the account passes the appropriate modulus check for the institution. It also returns, where possible, a converted IBAN (ISO-13616 International Bank Account Number) and BBAN (Basic Bank Account Number) for the account and bank branch administrative details.
      # x-amazon-apigateway-integration:
      #   httpMethod: POST
      #   payloadFormatVersion: 1.0
      #   type: HTTP_PROXY
      #   uri: https://???/v1/api/ValidateDomesticAccount
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            #set($context.requestOverride.path.body = $input.body)
            #set($inputRoot = $input.path('$'))
            #if($inputRoot.AccountNumber == '0875529')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.AccountNumber == '0875530')
              {
                "statusCode": 200
              }
            #else
              {
                "statusCode": 400
              }
            #end
        responses:
          '200':
            statusCode: 200
            responseTemplates:
              application/json: |
                #set($body = $context.requestOverride.path.body)
                #if($util.parseJson($body).AccountNumber == '0875529')
                  {
                    "InputCountryCode": "GB",
                    "InputBankIdentifier": "309197",
                    "InputAccountNumber": "0875529",
                    "AdditionalValidationInfo": false,
                    "AdditionalValidationInfoText": null,
                    "OutputCountryCode": "GB",
                    "OutputCountryName": "UNITED KINGDOM",
                    "OutputIban": "GB71LOYD30919700875529",
                    "OutputBban": "LOYD30919700875529",
                    "OutputAccountNumber": "00875529",
                    "BankBranch": {
                      "BranchTitle": "(CHICHESTER - 309197)",
                      "BranchCode": "LOYD309197",
                      "RoutingNumber": "309197",
                      "InstitutionTitle": "LLOYDS BANK PLC",
                      "BranchAddress": "10 EAST STREET, CHICHESTER, UNITED KINGDOM, PO191HJ",
                      "Bic": "LOYDGB21233",
                      "OverridingProcessingBank": "LLOYDS BANK PLC",
                      "OverridingSwiftBic": "LOYDGB21233"
                    },
                    "InvalidIssue": 0,
                    "Valid": true,
                    "InvalidReason": "",
                    "InvalidParameter": ""
                  }
                #elseif($util.parseJson($body).AccountNumber == '0875530')
                  {
                    "InputCountryCode": "GB",
                    "InputBankIdentifier": "309197",
                    "InputAccountNumber": "0875530",
                    "AdditionalValidationInfo": false,
                    "AdditionalValidationInfoText": null,
                    "OutputCountryCode": "GB",
                    "OutputCountryName": "UNITED KINGDOM",
                    "OutputIban": "GB71LOYD30919700875530",
                    "OutputBban": "LOYD30919700875530",
                    "OutputAccountNumber": "00875530",
                    "BankBranch": {
                      "BranchTitle": "(CHICHESTER - 309197)",
                      "BranchCode": "LOYD309197",
                      "RoutingNumber": "309197",
                      "InstitutionTitle": "LLOYDS BANK PLC",
                      "BranchAddress": "10 EAST STREET, CHICHESTER, UNITED KINGDOM, PO191HJ",
                      "Bic": "LOYDGB21233",
                      "OverridingProcessingBank": "LLOYDS BANK PLC",
                      "OverridingSwiftBic": "LOYDGB21233"
                    },
                    "InvalidIssue": 0,
                    "Valid": false,
                    "InvalidReason": "Invalid Reason",
                    "InvalidParameter": "Invalid Parameter"
                  }
                #end
          '400':
            statusCode: 400
            responseTemplates:
              application/json: |
                {
                  "Message": "Bad Request"
                }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ApiKey
                - CountryCode
                - BankIdentifier
                - AccountNumber
              properties:
                ApiKey:
                  type: string
                  description: The API key, fixed format and provided at sign up.
                CountryCode:
                  type: string
                  description: The country code.
                BankIdentifier:
                  type: string
                  description: The bank identifier.
                AccountNumber:
                  type: string
                  description: The account number.
                AdditionalData:
                  type: string
                  description: Any additional data.
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  InputCountryCode:
                    type: string
                    description: The Country code that was passed into the validate operation.
                  InputBankIdentifier:
                    type: string
                    description: The Bank Branch Code or Institution Title passed into the validate operation.
                  InputAccountNumber:
                    type: string
                    description: The Account Number passed into the validate operation.
                  AdditionalValidationInfo:
                    type: boolean
                    description: Indicates whether this valid result has further information regarding the result.
                  AdditionalValidationInfoText:
                    type: string
                    description: The further information text regarding this valid result.
                  OutputCountryCode:
                    type: string
                    description: The returned Country code.
                  OutputCountryName:
                    type: string
                    description: The returned Country Name.
                  OutputIban:
                    type: string
                    description: The returned IBAN.
                  OutputBban:
                    type: string
                    description: The returned BBAN.
                  OutputAccountNumber:
                    type: string
                    description: The returned Account Number.
                  BankBranch:
                    type: object
                    description: Class containing all Bank Branch details for the given input data.
                    properties:
                      BranchTitle:
                        type: string
                        description: The Branch Title.
                      BranchCode:
                        type: string
                        description: The Bank Branch Code.
                      RoutingNumber:
                        type: string
                        description: The Routing Number.
                      InstitutionTitle:
                        type: string
                        description: The Institution Title that the Branch belongs to.
                      BranchAddress:
                        type: string
                        description: The Address of the Branch.
                      Bic:
                        type: string
                        description: The BIC for the Branch.
                      OverridingProcessingBank:
                        type: string
                        description: The Override processing Bank.
                      OverridingSwiftBic:
                        type: string
                        description: The Override SWIFT BIC.
                  InvalidIssue:
                    type: number
                    enum:
                      - 0
                      - 1
                      - 2
                      - 3
                      - 4
                      - 5
                      - 6
                      - 7
                      - 8
                      - 9
                      - 10
                      - 11
                      - 12
                      - 13
                      - -1
                    description: Enum value indicating any the reason for validation failure
                  Valid:
                    type: boolean
                    description: Whether the validation operation deemed the data valid.
                  InvalidReason:
                    type: string
                    description: If not valid, a human readable description of the reason.
                  InvalidParameter:
                    type: string
                    description: If not valid, the input parameter which was responsible. Empty if a single parameter cannot be attributed.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '401':
          description: Returned if the given verifier requires authentication and the user is currently not authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
  /api/v1/payment/validate/international-account:
    post:
      summary: Validate an account using international server
      description: Validates an account using the provided account details, returning a full response from the international server.
      # x-amazon-apigateway-integration:
      #   httpMethod: POST
      #   payloadFormatVersion: 1.0
      #   type: HTTP_PROXY
      #   uri: https://???/v1/api/InternationalValidate
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            #set($context.requestOverride.path.body = $input.body)
            #set($inputRoot = $input.path('$'))
            #if($inputRoot.AccountNumber == 'TR350006200023400009073271')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.AccountNumber == 'TR350006200023400009073272')
              {
                "statusCode": 200
              }
            #else
              {
                "statusCode": 400
              }
            #end
        responses:
          '200':
            statusCode: 200
            responseTemplates:
              application/json: |
                #set($body = $context.requestOverride.path.body)
                #if($util.parseJson($body).AccountNumber == 'TR350006200023400009073271')
                  {
                    "InputCountryCode": "",
                    "InputBankIdentifier": "",
                    "InputAccountNumber": "TR350006200023400009073271",
                    "ErrorMessageDescription": "",
                    "Response": {
                      "Unabridged": {
                        "CountryCode": "TR",
                        "NationalId": null,
                        "AccountNumber": "TR350006200023400009073271",
                        "RecommendedNatId": null,
                        "RecommendedAcct": "TR350006200023400009073271",
                        "RecommendedBIC": "TGBATRISXXX",
                        "Status": "FAIL",
                        "Comment": "The bank code you entered cannot be found (02bc)",
                        "Ref": null,
                        "Group": null,
                        "BranchDetails": null,
                        "PaymentBicDetails": {
                          "BranchTypeLabel": "IBAN BIC Branch",
                          "BankName": "TURKIYE GARANTI BANKASI A.S.",
                          "Branch": "EFT MERKEZI",
                          "Addrc": "GENEL MUDURLUK AYTAR CAD. 2 NISPETIYE MAH. ZINCIRLIKUYU, ISTANBUL, ISTANBUL, TURKEY, 34340",
                          "Country": "TURKEY",
                          "CodeDetails": {
                            "CodeName1": "BIC",
                            "CodeValue1": "TGBATRISXXX",
                            "CodeName2": "CHIPS",
                            "CodeValue2": "003111",
                            "CodeName3": "BIC-4",
                            "CodeValue3": "TGBA",
                            "CodeName4": "Banka Kodu",
                            "CodeValue4": "006299999"
                          },
                          "AdditionalData": {
                            "SsiAvailable": "Y",
                            "PayServiceAvailable": "N",
                            "ContactsAvailable": "N",
                            "MessageAvailable": "Y",
                            "HolidayAvailable": "Y"
                          }
                        },
                        "AccountDetails": {
                          "Iban": "TR350006200023400009073271",
                          "Bban": "0006200023400009073271",
                          "Domestic": "0023400009073271"
                        },
                        "Bic8": null,
                        "DataStore": null,
                        "NoBranch": "No",
                        "PayBranchType": "I",
                        "FreeToken": null
                      }
                    }
                  }
                #elseif($util.parseJson($body).AccountNumber == 'TR350006200023400009073272')
                  {
                    "InputCountryCode": "",
                    "InputBankIdentifier": "",
                    "InputAccountNumber": "TR350006200023400009073272",
                    "ErrorMessageDescription": "Error Message",
                    "Response": {
                      "Unabridged": {
                        "CountryCode": "TR",
                        "NationalId": null,
                        "AccountNumber": "TR350006200023400009073272",
                        "RecommendedNatId": null,
                        "RecommendedAcct": "TR350006200023400009073272",
                        "RecommendedBIC": "TGBATRISXXX",
                        "Status": "FAIL",
                        "Comment": "The bank code you entered cannot be found (02bc)",
                        "Ref": null,
                        "Group": null,
                        "BranchDetails": null,
                        "PaymentBicDetails": {
                          "BranchTypeLabel": "IBAN BIC Branch",
                          "BankName": "TURKIYE GARANTI BANKASI A.S.",
                          "Branch": "EFT MERKEZI",
                          "Addrc": "GENEL MUDURLUK AYTAR CAD. 2 NISPETIYE MAH. ZINCIRLIKUYU, ISTANBUL, ISTANBUL, TURKEY, 34340",
                          "Country": "TURKEY",
                          "CodeDetails": {
                            "CodeName1": "BIC",
                            "CodeValue1": "TGBATRISXXX",
                            "CodeName2": "CHIPS",
                            "CodeValue2": "003111",
                            "CodeName3": "BIC-4",
                            "CodeValue3": "TGBA",
                            "CodeName4": "Banka Kodu",
                            "CodeValue4": "006299999"
                          },
                          "AdditionalData": {
                            "SsiAvailable": "Y",
                            "PayServiceAvailable": "N",
                            "ContactsAvailable": "N",
                            "MessageAvailable": "Y",
                            "HolidayAvailable": "Y"
                          }
                        },
                        "AccountDetails": {
                          "Iban": "TR350006200023400009073272",
                          "Bban": "0006200023400009073272",
                          "Domestic": "0023400009073272"
                        },
                        "Bic8": null,
                        "DataStore": null,
                        "NoBranch": "No",
                        "PayBranchType": "I",
                        "FreeToken": null
                      }
                    }
                  }
                #end
          '400':
            statusCode: 400
            responseTemplates:
              application/json: |
                {
                  "Message": "Bad Request"
                }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ApiKey
                - CountryCode
                - BankIdentifier
                - AccountNumber
              properties:
                ApiKey:
                  type: string
                  description: The API key, fixed format and provided at sign up.
                CountryCode:
                  type: string
                  description: The country code.
                BankIdentifier:
                  type: string
                  description: The bank identifier.
                AccountNumber:
                  type: string
                  description: The account number.
                AdditionalData:
                  type: string
                  description: Any additional data.
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  InputCountryCode:
                    type: string
                    description: The Country code that was passed into the validate operation.
                  InputBankIdentifier:
                    type: string
                    description: The Bank Branch Code or Institution Title passed into the validate operation.
                  InputAccountNumber:
                    type: string
                    description: The Account Number passed into the validate operation.
                  ErrorMessageDescription:
                    type: string
                    description: Contains an error message describing why the call to the validation server cannot be completed.
                  Response:
                    type: object
                    properties:
                      Unabridged:
                        type: object
                        properties:
                          CountryCode:
                            type: string
                            description: The ISO 3166-1 alpha-2 Country Code of the Country.
                          NationalId:
                            type: string
                            description: National Id
                          AccountNumber:
                            type: string
                            description: Account Number
                          RecommendedNatId:
                            type: string
                            description: Recommended National Id
                          RecommendedAcct:
                            type: string
                            description: Recommended Account
                          RecommendedBIC:
                            type: string
                            description: Recommended BIC
                          Status:
                            type: string
                            description: Status
                          Comment:
                            type: string
                            description: Comment
                          Ref:
                            type: string
                            description: Reference
                          Group:
                            type: string
                            description: Group
                          BranchDetails:
                            type: string
                            description: Branch Details
                          PaymentBicDetails:
                            type: object
                            properties:
                              BranchTypeLabel:
                                type: string
                                description: Branch Type Label
                              BankName:
                                type: string
                                description: Bank Name
                              Branch:
                                type: string
                                description: Branch
                              Addrc:
                                type: string
                                description: Address
                              Country:
                                type: string
                                description: Country
                              CodeDetails:
                                type: object
                                properties:
                                  CodeName1:
                                    type: string
                                    description: First Code Name
                                  CodeValue1:
                                    type: string
                                    description: First Code Value
                                  CodeName2:
                                    type: string
                                    description: Second Code Name
                                  CodeValue2:
                                    type: string
                                    description: Second Code Value
                                  CodeName3:
                                    type: string
                                    description: Third Code Name
                                  CodeValue3:
                                    type: string
                                    description: Third Code Value
                                  CodeName4:
                                    type: string
                                    description: Fourth Code Name
                                  CodeValue4:
                                    type: string
                                    description: Fourth Code Value
                              AdditionalData:
                                type: object
                                properties:
                                  SsiAvailable:
                                    type: string
                                    description: Ssi Available
                                  PayServiceAvailable:
                                    type: string
                                    description: Pay Service Available
                                  ContactsAvailable:
                                    type: string
                                    description: Contacts Available
                                  MessageAvailable:
                                    type: string
                                    description: Message Available
                                  HolidayAvailable:
                                    type: string
                                    description: Holiday Available
                          AccountDetails:
                            type: object
                            properties:
                              Iban:
                                type: string
                                description: Iban
                              Bban:
                                type: string
                                description: Bban
                              Domestic:
                                type: string
                                description: Domestic
                          Bic8:
                            type: string
                            description: Bic8
                          DataStore:
                            type: string
                            description: DataStore
                          NoBranch:
                            type: string
                            description: No Branch
                          PayBranchType:
                            type: string
                            description: Pay Branch Type
                          FreeToken:
                            type: string
                            description: FreeToken
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '401':
          description: Returned if the given verifier requires authentication and the user is currently not authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
  /api/v1/payment/validate/uk-account:
    post:
      summary: UK Account Validation
      description: Validate a UK account to check a bank account and sort code details against the Extended Industry Sort Code Directory (EISCD) to ensure that the bank branch exists, and to confirm the validity of the account number for that sort code algorithmically. Account details are automatically transposed where appropriate and building society roll number requirements are also validated.
      # x-amazon-apigateway-integration:
      #   httpMethod: POST
      #   payloadFormatVersion: 1.0
      #   type: HTTP_PROXY
      #   uri: https://???/v1/api/ValidateUKBankAccount
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            #set($context.requestOverride.path.body = $input.body)
            #set($inputRoot = $input.path('$'))
            #if($inputRoot.AccountNumber == '70221236')            
              {
                "statusCode": 200
              }
            #elseif($inputRoot.AccountNumber == '70221237')
              {
                "statusCode": 200
              }
            #else
              {
                "statusCode": 400
              }
            #end
        responses:
          '200':
            statusCode: 200
            responseTemplates:
              application/json: |
                #set($body = $context.requestOverride.path.body)
                #if($util.parseJson($body).AccountNumber == '70221236')         
                  {
                    "AccountDetailsInput": {
                      "SortCode": "209448",
                      "AccountNumber": "70221236",
                      "BuildingSocietyRollNumber": ""
                    },
                    "AccountDetailsOutput": {
                      "SortCode": "209448",
                      "AccountNumber": "70221236",
                      "BuildingSocietyRollNumber": ""
                    },
                    "AccountIBAN": "GB05BARC20944870221236",
                    "AccountTranscribed": false,
                    "UKBankBranch": {
                      "BankBIC": "",
                      "BranchBIC": "",
                      "BankCode": "0934",
                      "BankName": "BARCLAYS BANK PLC",
                      "BankOfficeTitle": "WESTMINSTER ABBEY",
                      "BranchName": "Victoria Street 2",
                      "OfficeTitle": "WESTMINSTER ABBEY",
                      "ContactAddress1": "",
                      "ContactAddress2": "",
                      "ContactAddress3": "",
                      "ContactAddress4": "",
                      "ContactAddressCity": "Leicester",
                      "ContactAddressCounty": "Leicestershire",
                      "ContactAddressPostCode": "LE87 2BB",
                      "ContactAddressPostCountry": "UNITED KINGDOM",
                      "ContactPhoneNumber": "0845 7555555",
                      "SortCode": "209448",
                      "DateLastChanged": "2008-09-23",
                      "TransactionInfo": {
                        "BacsCredits": true,
                        "BacsDebits": true,
                        "FasterPaymentsService": true,
                        "ChapsSterling": true,
                        "DirectDebitInstructions": true,
                        "UnpaidChequeClaims": true,
                        "DividendInterest": true,
                        "BuildingSocietyInterest": true
                      },
                      "ChapsBankBIC": "BARCGB22",
                      "ChapsBranchBIC": "XXX"
                    },
                    "RequiresBuildingSocietyRollNumber": false,
                    "BuildingSocietyRollNumberTranscribed": false,
                    "InvalidIssue": 0,
                    "Valid": true,
                    "InvalidReason": "",
                    "InvalidParameter": ""
                  }
                #elseif($util.parseJson($body).AccountNumber == '70221237')
                  {
                    "AccountDetailsInput": {
                      "SortCode": "209448",
                      "AccountNumber": "70221237",
                      "BuildingSocietyRollNumber": ""
                    },
                    "AccountDetailsOutput": {
                      "SortCode": "209448",
                      "AccountNumber": "70221237",
                      "BuildingSocietyRollNumber": ""
                    },
                    "AccountIBAN": "GB05BARC20944870221237",
                    "AccountTranscribed": false,
                    "UKBankBranch": {
                      "BankBIC": "",
                      "BranchBIC": "",
                      "BankCode": "0934",
                      "BankName": "BARCLAYS BANK PLC",
                      "BankOfficeTitle": "WESTMINSTER ABBEY",
                      "BranchName": "Victoria Street 2",
                      "OfficeTitle": "WESTMINSTER ABBEY",
                      "ContactAddress1": "",
                      "ContactAddress2": "",
                      "ContactAddress3": "",
                      "ContactAddress4": "",
                      "ContactAddressCity": "Leicester",
                      "ContactAddressCounty": "Leicestershire",
                      "ContactAddressPostCode": "LE87 2BB",
                      "ContactAddressPostCountry": "UNITED KINGDOM",
                      "ContactPhoneNumber": "0845 7555555",
                      "SortCode": "209448",
                      "DateLastChanged": "2008-09-23",
                      "TransactionInfo": {
                        "BacsCredits": true,
                        "BacsDebits": true,
                        "FasterPaymentsService": true,
                        "ChapsSterling": true,
                        "DirectDebitInstructions": true,
                        "UnpaidChequeClaims": true,
                        "DividendInterest": true,
                        "BuildingSocietyInterest": true
                      },
                      "ChapsBankBIC": "BARCGB22",
                      "ChapsBranchBIC": "XXX"
                    },
                    "RequiresBuildingSocietyRollNumber": false,
                    "BuildingSocietyRollNumberTranscribed": false,
                    "InvalidIssue": 0,
                    "Valid": false,
                    "InvalidReason": "Invalid Reason",
                    "InvalidParameter": "Invalid Parameter"
                  }
                #end
          '400':
            statusCode: 400
            responseTemplates:
              application/json: |
                {
                  "Message": "Bad Request"
                }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ApiKey
                - SortCode
                - AccountNumber
              properties:
                ApiKey:
                  type: string
                  description: The API key, fixed format and provided at sign up.
                SortCode:
                  type: string
                  description: The sort code.
                AccountNumber:
                  type: string
                  description: The account number.
                BuildingSocietyRollNumber:
                  type: string
                  description: The building society roll number.
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  AccountDetailsInput:
                    type: object
                    description: A sortcode and account number combination.
                    properties:
                      SortCode:
                        type: string
                        description: Sortcode
                      AccountNumber:
                        type: string
                        description: Account number
                      BuildingSocietyRollNumber:
                        type: string
                        description: Building Socity Roll number.
                  AccountDetailsOutput:
                    type: object
                    description: A sortcode and account number combination.
                    properties:
                      SortCode:
                        type: string
                        description: Sortcode
                      AccountNumber:
                        type: string
                        description: Account number
                      BuildingSocietyRollNumber:
                        type: string
                        description: Building Socity Roll number.
                  AccountIBAN:
                    type: string
                    description: IBAN corresponding to the UK bank account. Blank if no IBAN could be calculated.
                  AccountTranscribed:
                    type: boolean
                    description: True if the account number was transcribed.
                  UKBankBranch:
                    type: object
                    description: UK Bank branch information
                    properties:
                      BankBIC:
                        type: string
                        description: The BIC bank, that when combined with the BIC branch field, makes up the BIC for the bank office.
                      BranchBIC:
                        type: string
                        description: The BIC branch, that when combined with the BIC bank field, makes up the BIC for the bank office.
                      BankCode:
                        type: string
                        description: Bank Code
                      BankName:
                        type: string
                        description: The full name of owning bank.
                      BankOfficeTitle:
                        type: string
                        description: The title of the bank branch.
                      BranchName:
                        type: string
                        description: The full name of the bank branch.
                      OfficeTitle:
                        type: string
                        description: The title of the branch.
                      ContactAddress1:
                        type: string
                        description: Addressee name for the bank office
                      ContactAddress2:
                        type: string
                        description: Postal name for the bank office.
                      ContactAddress3:
                        type: string
                        description: Address line one of the bank office.
                      ContactAddress4:
                        type: string
                        description: Address line two of the bank office.
                      ContactAddressCity:
                        type: string
                        description: City or town of the bank office.
                      ContactAddressCounty:
                        type: string
                        description: Area or country of the bank office.
                      ContactAddressPostCode:
                        type: string
                        description: Postal code outcode of the bank office.
                      ContactAddressPostCountry:
                        type: string
                        description: Country of the bank office.
                      ContactPhoneNumber:
                        type: string
                        description: The telephone number of the bank office.
                      SortCode:
                        type: string
                        description: The sort code of the bank office.
                      DateLastChanged:
                        type: string
                        format: date-time
                        description: The date on which this record was last changed
                      TransactionInfo:
                        type: object
                        description: Class which holds information about which types of transaction are allowed on a particular sortcode.
                        properties:
                          BacsCredits:
                            type: boolean
                            description: Bank Giro Credit payments can be sent to this sort code.
                          BacsDebits:
                            type: boolean
                            description: Direct Debits can be set up on this sort code.
                          FasterPaymentsService:
                            type: boolean
                            description: Faster Payments can be sent to this sort code.
                          ChapsSterling:
                            type: boolean
                            description: CHAPS Payments can be sent to this sort code.
                          DirectDebitInstructions:
                            type: boolean
                            description: AUDDIS Direct Debit Instructions can be sent to this sort code
                          UnpaidChequeClaims:
                            type: boolean
                            description: Claims for unpaid cheques can be sent to this sort code
                          DividendInterest:
                            type: boolean
                            description: Dividend interest payments can be sent to this sort code
                          BuildingSocietyInterest:
                            type: boolean
                            description: Building Society interest payments can be sent to this sort code
                      ChapsBankBIC:
                        type: string
                        description: The Chaps BIC bank, that when combined with the Chaps BIC branch field, makes up the Chaps Routing BIC for the bank office.
                      ChapsBranchBIC:
                        type: string
                        description: The Chaps BIC branch, that when combined with the Chaps BIC bank field, makes up the Chaps Routing BIC for the bank office.
                  RequiresBuildingSocietyRollNumber:
                    type: boolean
                    description: Whether the supplied Account details require a Building Society Roll number.
                  BuildingSocietyRollNumberTranscribed:
                    type: boolean
                    description: Whether the Building Society Roll number was transcribed during validation.
                  InvalidIssue:
                    type: number
                    description: Enum value indicating any the reason for validation failure
                    enum:
                      - 0
                      - 1
                      - 2
                      - 3
                      - 4
                      - 5
                      - 6
                      - 7
                      - 8
                      - 9
                      - 10
                      - 11
                      - 12
                      - 13
                  Valid:
                    type: boolean
                    description: Whether the validation operation deemed the data valid.
                  InvalidReason:
                    type: string
                    description: If not valid, a human readable description of the reason.
                  InvalidParameter:
                    type: string
                    description: If not valid, the input parameter which was responsible. Empty if a single parameter cannot be attributed.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '401':
          description: Returned if the given verifier requires authentication and the user is currently not authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
  /api/v1/payment/confirmation-of-payee/requester:
    post:
      summary: Account Name Verification
      description: Make a CoP request to verify that payee name matches their account details. Suitable match indicator and/or reason code and correct name will be returned according to Pay.UK specifications.
      # x-amazon-apigateway-integration:
      #   httpMethod: POST
      #   payloadFormatVersion: 1.0
      #   type: HTTP_PROXY
      #   uri: https://???/pay.uk/v2.0/confirmation-payee/name-verification
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            #set($context.requestOverride.path.body = $input.body)
            #set($inputRoot = $input.path('$'))
            #if($inputRoot.Data.Identification == '44002200000000')                            
              {
                "statusCode": 200
              }
            #elseif($inputRoot.Data.Identification == '44002200000001')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.Data.Identification == '44002200000002')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.Data.Identification == '44002200000003')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.Data.Identification == '44002200000004')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.Data.Identification == '44002200000005')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.Data.Identification == '44002200000006')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.Data.Identification == '44002200000007')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.Data.Identification == '44002200000008')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.Data.Identification == '44002200000009')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.Data.Identification == '44002200000010')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.Data.Identification == '44002200000011')
              {
                "statusCode": 200
              }
            #elseif($inputRoot.Data.Identification == '44002200000012')
              {
                "statusCode": 200
              }
            #else
              {
                "statusCode": 400
              }
            #end
        responses:
          '200':
            statusCode: 200
            responseTemplates:
              application/json: |
                #set($body = $context.requestOverride.path.body)
                #if($util.parseJson($body).Data.Identification == '44002200000000')                          
                  {
                    "Data": {
                      "VerificationReport": {
                        "Matched": true
                      }
                    },
                    "Links": {
                      "Self": "/name-verification"
                    }
                  }
                #elseif($util.parseJson($body).Data.Identification == '44002200000001')
                  {
                    "Data": {
                      "VerificationReport": {
                        "Matched": false,
                        "ReasonCode": "ANNM",
                        "Name": "William Falkner"
                      }
                    }
                  }
                #elseif($util.parseJson($body).Data.Identification == '44002200000002')
                  {
                    "Data": {
                      "VerificationReport": {
                        "Matched": false,
                        "ReasonCode": "MBAM",
                        "Name": "William Falkner"
                      }
                    }
                  }
                #elseif($util.parseJson($body).Data.Identification == '44002200000003')
                  {
                    "Data": {
                      "VerificationReport": {
                        "Matched": false,
                        "ReasonCode": "BANM",
                        "Name": "William Falkner"
                      }
                    }
                  }
                #elseif($util.parseJson($body).Data.Identification == '44002200000004')
                  {
                    "Data": {
                      "VerificationReport": {
                        "Matched": false,
                        "ReasonCode": "PANM",
                        "Name": "William Falkner"
                      }
                    }
                  }
                #elseif($util.parseJson($body).Data.Identification == '44002200000005')
                  {
                    "Data": {
                      "VerificationReport": {
                        "Matched": false,
                        "ReasonCode": "BAMM",
                        "Name": "William Falkner"
                      }
                    }
                  }
                #elseif($util.parseJson($body).Data.Identification == '44002200000006')
                  {
                    "Data": {
                      "VerificationReport": {
                        "Matched": false,
                        "ReasonCode": "PAMM",
                        "Name": "William Falkner"
                      }
                    }
                  }
                #elseif($util.parseJson($body).Data.Identification == '44002200000007')
                  {
                    "Data": {
                      "VerificationReport": {
                        "Matched": false,
                        "ReasonCode": "AC01",
                        "Name": "William Falkner"
                      }
                    }
                  }
                #elseif($util.parseJson($body).Data.Identification == '44002200000008')
                  {
                    "Data": {
                      "VerificationReport": {
                        "Matched": false,
                        "ReasonCode": "IVCR",
                        "Name": "William Falkner"
                      }
                    }
                  }
                #elseif($util.parseJson($body).Data.Identification == '44002200000009')
                  {
                    "Data": {
                      "VerificationReport": {
                        "Matched": false,
                        "ReasonCode": "ACNS",
                        "Name": "William Falkner"
                      }
                    }
                  }
                #elseif($util.parseJson($body).Data.Identification == '44002200000010')
                  {
                    "Data": {
                      "VerificationReport": {
                        "Matched": false,
                        "ReasonCode": "OPTO",
                        "Name": "William Falkner"
                      }
                    }
                  }
                #elseif($util.parseJson($body).Data.Identification == '44002200000011')
                  {
                    "Data": {
                      "VerificationReport": {
                        "Matched": false,
                        "ReasonCode": "CASS",
                        "Name": "William Falkner"
                      }
                    }
                  }
                #elseif($util.parseJson($body).Data.Identification == '44002200000012')
                  {
                    "Data": {
                      "VerificationReport": {
                        "Matched": false,
                        "ReasonCode": "SCNS",
                        "Name": "William Falkner"
                      }
                    }
                  }
                #end
          '400':
            statusCode: 400
            responseTemplates:
              application/json: |
                {
                  "Code": "400 Bad request",
                  "Message": "There is a problem with one or more of the request fields. MI Reference: 473",
                  "Errors": [
                    {
                      "ErrorCode": "UK.OBIE.Field.Missing",
                      "Message": "This field must be a supported value.",
                      "Path": "data.accountType"
                    },
                    {
                      "ErrorCode": "UK.OBIE.Field.Invalid",
                      "Message": "This field must match "^\d{14}|\d{6}$"",
                      "Path": "data.identification"
                    }
                  ]
                }
      parameters:
        - in: header
          name: x-fapi-interaction-id
          required: true
          schema:
            type: string
            example: UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Data:
                  type: object
                  properties:
                    SchemeName:
                      type: string
                      description: Scheme name
                      enum:
                        - SortCodeAccountNumber
                    AccountType:
                      type: string
                      description: Account type
                      enum:
                        - Business
                        - Personal
                    Identification:
                      type: string
                      description: Main identification
                    Name:
                      type: string
                      description: Payee name
                    SecondaryIdentification:
                      type: string
                      description: Secondary identification
      responses:
        '200':
          description: Account name verification report
          content:
            application/json:
              schema:
                type: object
                properties:
                  Data:
                    type: object
                    properties:
                      VerificationReport:
                        type: object
                        description: Provides the verification report
                        properties:
                          Matched:
                            type: boolean
                            description: Indicates the match result
                          ReasonCode:
                            type: string
                            description: Reason code
                            enum:
                              - ANNM
                              - AC01
                              - MBAM
                              - OPTO
                              - ACNS
                              - IVCR
                              - BANM
                              - PANM
                              - BAMM
                              - PAMM
                              - CASS
                              - SCNS
                          Name:
                            type: string
                            description: Name
                      Links:
                        type: object
                        description: Links relevant to the payload
                        properties:
                          Self:
                            type: string
                            description: Self
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
  /api/v1/payment/validate/payee-match-decision:
    post:
      summary: Verify payee’s name with a match decision
      description: Verifies if a UK personal bank account is associated with a given payee name and returns a match decision.
      # x-amazon-apigateway-integration:
      #   httpMethod: POST
      #   payloadFormatVersion: 1.0
      #   type: HTTP_PROXY
      #   uri: https://???/v1/api/VerifyPayeeWithMatch
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            #set($context.requestOverride.path.body = $input.body)
            #set($inputRoot = $input.path('$'))
            #if($inputRoot.AccountNumber == '00007338')            
              {
                "statusCode": 200
              }
            #elseif($inputRoot.AccountNumber == '00007339')
              {
                "statusCode": 200
              }
            #else
              {
                "statusCode": 400
              }
            #end
        responses:
          '200':
            statusCode: 200
            responseTemplates:
              application/json: |
                #set($body = $context.requestOverride.path.body)
                #if($util.parseJson($body).AccountNumber == '00007338')
                  {
                    "MatchStatus": "match",
                    "Conditions": [],
                    "AccountStatus": "Open"
                  }
                #elseif($util.parseJson($body).AccountNumber == '00007339')
                  {
                    "MatchStatus": "noMatch",
                    "Conditions": [],
                    "AccountStatus": "Closed"
                  }
                #end
          '400':
            statusCode: 400
            responseTemplates:
              application/json: |
                {
                  "Message": "Bad Request"
                }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - FirstName
                - Surname
                - SortCode
                - AccountNumber
                - ApiKey
              properties:
                PossibleMatchMin:
                  type: number
                  description: The lowest value at which a possible match will be returned in the 0- 9 range, where the default value is 4. If supplied, MatchMin must also be supplied, and the value must be less than MatchMin.
                MatchMin:
                  type: number
                  description: The lowest value at which a match will returned in the 0 - 9 range, where the default value is 6. If supplied, PossibleMatchMin must also be supplied, and the value must be greater than PossibleMatchMin.
                FirstName:
                  type: string
                  description: First name.
                Surname:
                  type: string
                  description: Surname.
                Dob:
                  type: string
                  format: date-time
                  description: Date of birth in yyyy-mm-ddT00:00:00 format, optional, but without a DOB the highest personal score returned is a 7.
                SortCode:
                  type: string
                  description: Sort code.
                AccountNumber:
                  type: string
                  description: Account number.
                ApiKey:
                  type: string
                  description: The API key, fixed format and provided at sign up.
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  MatchStatus:
                    type: string
                    description: Match Status - match, nomatch or possiblematch
                    enum:
                      - match
                      - nomatch
                      - possiblematch
                  Conditions:
                    type: array
                    items:
                      type: object
                      description: A list of conditions that apply to the account checked.
                      properties:
                        code:
                          type: string
                          description: Condition code
                        severity:
                          type: string
                          description: Condition severity
                        value:
                          type: string
                          description: Condition value
                  AccountStatus:
                    type: string
                    description: Status, either Open, Closed, Deceased, NonExistant, NotSingle, NoMatch, NoPersonalOrAddressDataAvailable, ErrorInConditions or ErrorInProcessingRequest.
                    enum:
                      - Open
                      - Closed
                      - Deceased
                      - NonExistant
                      - NotSingle
                      - NoMatch
                      - NoPersonalOrAddressDataAvailable
                      - ErrorInConditions
                      - ErrorInProcessingRequest
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
  /api/v1/payment/validate/payee-match-score:
    post:
      summary: Verify payee’s name with a match score
      description: Verifies if a UK personal bank account is associated with a given payee name and address and returns a match score.
      # x-amazon-apigateway-integration:
      #   httpMethod: POST
      #   payloadFormatVersion: 1.0
      #   type: HTTP_PROXY
      #   uri: https://???/v1/api/VerifyPayeeWithScore
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            #set($context.requestOverride.path.body = $input.body)
            #set($inputRoot = $input.path('$'))
            #if($inputRoot.AccountNumber == '00007338')           
              {
                "statusCode": 200
              }
            #elseif($inputRoot.AccountNumber == '00007339')
              {
                "statusCode": 200
              }
            #else
              {
                "statusCode": 400
              }
            #end
        responses:
          '200':
            statusCode: 200
            responseTemplates:
              application/json: |
                #set($body = $context.requestOverride.path.body)
                #if($util.parseJson($body).AccountNumber == '00007338')        
                  {
                    "MatchScore": 9,
                    "Conditions": [],
                    "AccountStatus": "Open"
                  }
                #elseif($util.parseJson($body).AccountNumber == '00007339')
                  {
                    "MatchScore": 0,
                    "Conditions": [],
                    "AccountStatus": "Closed"
                  }
                #end
          '400':
            statusCode: 400
            responseTemplates:
              application/json: |
                {
                  "Message": "Bad Request"
                }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - FirstName
                - Surname
                - SortCode
                - AccountNumber
                - ApiKey
              properties:
                FirstName:
                  type: string
                  description: First name.
                Surname:
                  type: string
                  description: Surname.
                Dob:
                  type: string
                  format: date-time
                  description: Date of birth in yyyy-mm-ddT00:00:00 format, optional, but without a DOB the highest personal score returned is a 7.
                SortCode:
                  type: string
                  description: Sort code.
                AccountNumber:
                  type: string
                  description: Account number.
                ApiKey:
                  type: string
                  description: The API key, fixed format and provided at sign up.
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  MatchScore:
                    type: number
                    description: Match Score - score between 0 and 9, where 9 is an exact match and 1 or less is no match.
                  Conditions:
                    type: array
                    items:
                      type: object
                      description: A list of conditions that apply to the account checked.
                      properties:
                        code:
                          type: string
                          description: Condition code
                        severity:
                          type: string
                          description: Condition severity
                        value:
                          type: string
                          description: Condition value
                  AccountStatus:
                    type: string
                    description: Status, either Open, Closed, Deceased, NonExistant, NotSingle, NoMatch, NoPersonalOrAddressDataAvailable, ErrorInConditions or ErrorInProcessingRequest.
                    enum:
                      - Open
                      - Closed
                      - Deceased
                      - NonExistant
                      - NotSingle
                      - NoMatch
                      - NoPersonalOrAddressDataAvailable
                      - ErrorInConditions
                      - ErrorInProcessingRequest
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: HTTP error code
                  Id:
                    type: string
                    description: Error identifier
                  Message:
                    type: string
                    description: General description of the error
                  Errors:
                    type: object
                    description: Array of one or more errors found with the request, used mainly for request body and header validations.
                    properties:
                      ErrorCode:
                        type: string
                        description: Error Code
                      Message:
                        type: string
                        description: Detailed description of the individual errors.
                      Path:
                        type: string
                        description: Location of the error, usually a variable in the request JSON body.
                      Url:
                        type: string
                        description: Request URL
  /api/v1/payment/fee:
    get:
      summary: Get the fees for the transaction
      description: Get the fees based on the user and payment type.
      # x-amazon-apigateway-integration:
      #   httpMethod: POST
      #   payloadFormatVersion: 1.0
      #   type: HTTP_PROXY
      #   uri: https://???
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            #if($input.params('PaymentMechanism') == 'InternalTransfer')
              {
                "statusCode": 200
              }
            #elseif($input.params('PaymentMechanism') == 'Intrabank')
              {
                "statusCode": 200
              }
            #elseif($input.params('PaymentMechanism') == 'Faster')
              {
                "statusCode": 200
              }
            #elseif($input.params('PaymentMechanism') == 'Faster')
              {
                "statusCode": 200
              }
            #elseif($input.params('PaymentMechanism') == 'CHAPS')
              {
                "statusCode": 200
              }
            #elseif($input.params('PaymentMechanism') == 'SWIFT')
              {
                "statusCode": 200
              }
            #elseif($input.params('PaymentMechanism') == 'SEPA')
              {
                "statusCode": 200              
              }            
            #else
              {
                "statusCode": 400
              }
            #end
        responses:
          '200':
            statusCode: 200
            responseTemplates:
              application/json: |
                #if($input.params('PaymentMechanism') == 'InternalTransfer')
                  {
                    "Fees": [
                      {
                        "Type" : "InternalTransfer"
                        "Amount": 0.00
                      }
                    ]
                  }
                #elseif($input.params('PaymentMechanism') == 'Intrabank')
                  {
                    "Fees": [
                      {
                        "Type" : "Intrabank"
                        "Amount": 0.00
                      }
                    ]
                  }
                #elseif($input.params('PaymentMechanism') == 'Faster' && $input.params('IsManual') == true)
                  {
                    "Fees": [
                      {
                        "Type" : "Faster"
                        "Amount": 0.00
                      },
                      {
                        "Type" : "ManualPayment"
                        "Amount": 50.00
                      }
                    ]
                  }    
                #elseif($input.params('PaymentMechanism') == 'Faster' && $input.params('IsManualStandingOrder') == true)
                  {
                    "Fees": [
                      {
                        "Type" : "Faster"
                        "Amount": 0.00
                      },
                      {
                        "Type" : "ManualStandingOrder"
                        "Amount": 50.00
                      }
                    ]
                  }               
                #elseif($input.params('PaymentMechanism') == 'Faster')
                  {
                    "Fees": [
                      {
                        "Type" : "Faster"
                        "Amount": 0.00
                      }
                    ]
                  }  
                #elseif($input.params('PaymentMechanism') == 'CHAPS')
                  {
                      "Pricing": [
                        {
                          "Type" : "CHAPS"
                          "Amount": 25.00
                        }
                      ]
                  }  
                #elseif($input.params('PaymentMechanism') == 'SWIFT')
                  {
                      "Pricing": [
                        {
                          "Type" : "SWIFT"
                          "Amount": 25.00
                        }
                      ]
                  }
                #elseif($input.params('PaymentMechanism') == 'SEPA')
                  {
                      "Pricing": [
                        {
                          "Type" : "SEPA"
                          "Amount": 15.00
                        }
                      ]
                  }            
                #elseif($input.path('$.responseType') == 'ManualPaymentSuccessResponse')
                  {
                      "Pricing": [
                        {
                          "Type" : "ManualPayment"
                          "Amount": 50.00
                        }
                      ]
                  }
                #elseif($input.path('$.responseType') == 'ManualStandingOrderSuccessResponse')
                  {
                      "Pricing": [
                        {
                          "Type" : "ManualStandingOrder"
                          "Amount": 50.00
                        }
                      ]
                  }
                #elseif($input.path('$.responseType') == 'FasterManualPaymentSuccessResponse')
                  {
                      "Pricing": [
                        {
                          "Type" : "Faster"
                          "Amount": 0.00
                        },
                        {
                          "Type" : "ManualPayment"
                          "Amount": 50.00
                        }
                      ]
                  }
                #end
          '400':
            statusCode: 400
            responseTemplates:
              application/json: |
                {
                  "Message": "Bad Request"
                }
      parameters:
        - in: query
          name: AccountNumber
          required: true
          schema:
            type: string
            description: Client account number
        - in: query
          name: PaymentMechanism
          required: true
          schema:
            type: string
            enum:
              - InternalTransfer
              - Intrabank
              - Faster
              - CHAPS
              - SWIFT
              - SEPA
            description: enum with the payment mechanism
        - in: query
          name: Amount
          required: true
          schema:
            type: number
            description: Transaction amount
        - in: query
          name: Currency
          required: true
          schema:
            type: string
            description: Currency for the amounts
        - in: query
          name: IsManual
          required: true
          schema:
            type: boolean
            description: Indicates that this is a manual payment
        - in: query
          name: IsManualStandingOrder
          required: true
          schema:
            type: boolean
            description: Indicates that this is a manual standing order
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  Fees:
                    type: array
                    items:
                      type: object
                      description: A list of fees that apply to the account checked.
                      properties:
                        Type:
                          type: string
                          description: Fee type
                        Amount:
                          type: number
                          description: Fee amount
  /api/v1/fx/rates:
    get:
      summary: Get the FX rate
      description: Get the FX rate to convert currencies
      # x-amazon-apigateway-integration:
      #   httpMethod: POST
      #   payloadFormatVersion: 1.0
      #   type: HTTP_PROXY
      #   uri: https://???
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            #if($input.params('FromCurrency') == 'GBP' && $input.params('ToCurrency') == 'EUR')
              {
                "statusCode": 200              
              }
            #elseif($input.params('FromCurrency') == 'EUR' && $input.params('ToCurrency') == 'GBP')
              {
                "statusCode": 200              
              }   
            #elseif($input.params('FromCurrency') == 'GBP' && $input.params('ToCurrency') == 'USD')
              {
                "statusCode": 200              
              }   
            #elseif($input.params('FromCurrency') == 'USD' && $input.params('ToCurrency') == 'GBP')
              {
                "statusCode": 200              
              }   
            #elseif($input.params('FromCurrency') == 'GBP' && $input.params('ToCurrency') == 'ESP')
              {
                "statusCode": 200              
              }   
            #elseif($input.params('FromCurrency') == 'ESP' && $input.params('ToCurrency') == 'GBP')
              {
                "statusCode": 200              
              }                     
            #else
              {
                "statusCode": 400
              }
            #end
        responses:
          '200':
            statusCode: 200
            responseTemplates:
              application/json: |
                #set($Double = 0.0)
                #set($inputAmount = $Double.parseDouble($input.params('Amount')))
                #if($input.params('FromCurrency') == 'GBP' && $input.params('ToCurrency') == 'EUR')
                  #set($exchangeRate = 1.19)
                  #set($multiplied = $inputAmount * $exchangeRate)
                  #set($firstPart = $multiplied.toString().split('\.')[0])
                  #set($secondPart = $multiplied.toString().split('\.')[1] + "00")
                  #set($truncated = $firstPart + "." + $secondPart.substring(0,2))
                  {
                    "Rate": {
                      "ExchangeRate": $exchangeRate,
                      "ConvertedAmount": $truncated
                    }
                  }
                #elseif($input.params('FromCurrency') == 'EUR' && $input.params('ToCurrency') == 'GBP')
                  #set($exchangeRate = 0.8400)
                  #set($multiplied = $inputAmount * $exchangeRate)
                  #set($firstPart = $multiplied.toString().split('\.')[0])
                  #set($secondPart = $multiplied.toString().split('\.')[1] + "00")
                  #set($truncated = $firstPart + "." + $secondPart.substring(0,2))
                  {
                    "Rate": {
                      "ExchangeRate": $exchangeRate,
                      "ConvertedAmount": $truncated
                    }
                  }
                #elseif($input.params('FromCurrency') == 'GBP' && $input.params('ToCurrency') == 'USD')
                  #set($exchangeRate = 1.3100)
                  #set($multiplied = $inputAmount * $exchangeRate)
                  #set($firstPart = $multiplied.toString().split('\.')[0])
                  #set($secondPart = $multiplied.toString().split('\.')[1] + "00")
                  #set($truncated = $firstPart + "." + $secondPart.substring(0,2))
                  {
                    "Rate": {
                      "ExchangeRate": $exchangeRate,
                      "ConvertedAmount": $truncated
                    }
                  }
                #elseif($input.params('FromCurrency') == 'USD' && $input.params('ToCurrency') == 'GBP')
                  #set($exchangeRate = 0.7600)
                  #set($multiplied = $inputAmount * $exchangeRate)
                  #set($firstPart = $multiplied.toString().split('\.')[0])
                  #set($secondPart = $multiplied.toString().split('\.')[1] + "00")
                  #set($truncated = $firstPart + "." + $secondPart.substring(0,2))
                  {
                    "Rate": {
                      "ExchangeRate": $exchangeRate,
                      "ConvertedAmount": $truncated
                    }
                  }
                #elseif($input.params('FromCurrency') == 'GBP' && $input.params('ToCurrency') == 'ESP')
                  #set($exchangeRate = 1.1900)
                  #set($multiplied = $inputAmount * $exchangeRate)
                  #set($firstPart = $multiplied.toString().split('\.')[0])
                  #set($secondPart = $multiplied.toString().split('\.')[1] + "00")
                  #set($truncated = $firstPart + "." + $secondPart.substring(0,2))
                  {
                    "Rate": {
                      "ExchangeRate": $exchangeRate,
                      "ConvertedAmount": $truncated
                    }
                  }
                #elseif($input.params('FromCurrency') == 'ESP' && $input.params('ToCurrency') == 'GBP')
                  #set($exchangeRate = 0.8400)
                  #set($multiplied = $inputAmount * $exchangeRate)
                  #set($firstPart = $multiplied.toString().split('\.')[0])
                  #set($secondPart = $multiplied.toString().split('\.')[1] + "00")
                  #set($truncated = $firstPart + "." + $secondPart.substring(0,2))
                  {
                    "Rate": {
                      "ExchangeRate": $exchangeRate,
                      "ConvertedAmount": $truncated
                    }
                  }                                     
                #end
          '400':
            statusCode: 400
            responseTemplates:
              application/json: |
                {
                  "Message": "Bad Request"
                }
      parameters:
        - in: query
          name: AccountNumber
          required: true
          schema:
            type: string
            description: Client account number
        - in: query
          name: FromCurrency
          required: true
          schema:
            type: string
            description: Currency to convert from.
            example: GBP
        - in: query
          name: ToCurrency
          required: true
          schema:
            type: string
            description: Currency to convert to.
            example: USD
        - in: query
          name: Amount
          required: true
          schema:
            type: number
            description: Amount to be converted.
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  Rate:
                    type: object
                    properties:
                      ExchangeRate:
                        type: number
                        description: Exchange rate between currencies
                      ConvertedAmount:
                        type: number
                        description: Converted amount based on the exchange rate

  # Cards provider routes ####################################################################

  /api/v1/cards/token:
    post:
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "https://uatists.globalprocessing.net/connect/token"
        type: "http"
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorised.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Not Found.
          content:
            application/json:
              schema:
                type: object
        '405':
          description: Method Not Allowed.
          content:
            application/json:
              schema:
                type: object
        '409':
          description: Conflict.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                type: object

  /api/v1/cards/{publicToken}/pin:
    get:
      summary: Redirects the request to the external PIN processing service.
      description: This endpoint redirects the request to the external card processing service to modify the card PIN.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        requestParameters:
          integration.request.path.publicToken: "method.request.path.publicToken"
        uri: https://sandbox.globalprocessing.com/sandbox/api/v1/cards/{publicToken}/pin
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: publicToken
          in: path
          required: true
          description: Public token associated with the card
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorised.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Not Found.
          content:
            application/json:
              schema:
                type: object
        '405':
          description: Method Not Allowed.
          content:
            application/json:
              schema:
                type: object
        '409':
          description: Conflict.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                type: object
    post:
      summary: Redirects the request to the external PIN processing service.
      description: This endpoint redirects the request to the external card processing service to modify the card PIN.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        requestParameters:
          integration.request.path.publicToken: "method.request.path.publicToken"
        uri: https://sandbox.globalprocessing.com/sandbox/api/v1/cards/{publicToken}/pin
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: publicToken
          in: path
          required: true
          description: Public token associated with the card
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  pin:
                    type: string
                    example: "123456"
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Public Token was not found.
          content:
            application/json:
              schema:
                type: object

  /api/v1/cards/{publicToken}/status:
    get:
      summary: Redirects the request to the external PIN processing service.
      description: This endpoint redirects the request to the external card processing service to obtain the card status.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        requestParameters:
          integration.request.path.publicToken: "method.request.path.publicToken"
        uri: https://sandbox.globalprocessing.com/sandbox/api/v1/cards/{publicToken}/status
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: publicToken
          in: path
          required: true
          description: Public token associated with the card
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorised.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Not Found.
          content:
            application/json:
              schema:
                type: object
        '405':
          description: Method Not Allowed.
          content:
            application/json:
              schema:
                type: object
        '409':
          description: Conflict.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                type: object
    put:
      summary: Redirects the request to the external PIN processing service.
      description: This endpoint redirects the request to the external card processing service to modify the card status.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: PUT
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        requestParameters:
          integration.request.path.publicToken: "method.request.path.publicToken"
        uri: https://sandbox.globalprocessing.com/sandbox/api/v1/cards/{publicToken}/status
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cardStatusCode:
                  type: string
                  nullable: true
                  description: Card status code.
                status:
                  type: string
                  nullable: true
                  description: Card status.
                updatedBy:
                  type: string
                  nullable: true
                  description: User who updated the information.
                description:
                  type: string
                  nullable: true
                  description: Update Description.
                validityDate:
                  type: string
                  format: date-time
                  nullable: true
                  description: Expiration date.
      parameters:
        - name: publicToken
          in: path
          required: true
          description: Public token associated with the card
          schema:
            type: string

      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Active"
                  cardStatusCode:
                    type: string
                    example: "00"
                  cardStatusDescription:
                    type: string
                    example: "00 (Active)"
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object

        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object

        '404':
          description: Public Token was not found.
          content:
            application/json:
              schema:
                type: object

  /api/v1/cards/{publicToken}/pin/unblock:
    post:
      summary: Redirects the request to the external PIN processing service.
      description: This endpoint redirects the request to the external card processing service to unblock the card PIN.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        requestParameters:
          integration.request.path.publicToken: "method.request.path.publicToken"
        uri: https://sandbox.globalprocessing.com/sandbox/api/v1/cards/{publicToken}/pin/unblock
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: publicToken
          in: path
          required: true
          description: Public token associated with the card
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object

        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object

        '404':
          description: Public Token was not found.
          content:
            application/json:
              schema:
                type: object

  /api/v1/cards/{publicToken}/replace:
    post:
      summary: Redirects the request to the external PIN processing service.
      description: This endpoint redirects the request to the external card processing service to replace a card.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        requestParameters:
          integration.request.path.publicToken: "method.request.path.publicToken"
        uri: https://sandbox.globalprocessing.com/sandbox/api/v1/cards/{publicToken}/replace
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                moveBalance:
                  type: boolean
                  nullable: true
                  description: If true then the balance will move to the new card.
                moveLimitAccumulators:
                  type: boolean
                  nullable: true
                  description: If true then the limit accumulators will move to the new card.
                moveChildCards:
                  type: boolean
                  nullable: true
                  description: If true then the child cards associated with the card will move to the new card.
                moveExpiryDate:
                  type: boolean
                  nullable: true
                  description: Optional field - if true, then move the same expiry date to the new card.
                expiryDate:
                  type: string
                  format: date-time
                  nullable: true
                  description: Optional field - if provided, card is set to the new Expiry Date. Otherwise default from program is used. Should not be set when MoveExpiryDate is true. Format YYYY-MM..
                freetext1:
                  type: string
                  nullable: true
                  description: Additional fulfilment data used for transferring extra information to the card manufacturer.
                freetext2:
                  type: string
                  nullable: true
                  description: Additional fulfilment data used for transferring extra information to the card manufacturer.
      parameters:
        - name: publicToken
          in: path
          required: true
          description: Public token associated with the card
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  publicToken:
                    type: string
                    example: "5678901234"
                  customerReference:
                    type: string
                    example: "sales"
                  embossName:
                    type: string
                    example: "Joseph Bloggs"
                  maskedPan:
                    type: string
                    example: "123456******3456"
                  startDate:
                    type: string
                    format: date
                    example: "2022-06-06"
                  expiryDate:
                    type: string
                    format: date
                    example: "2025-06-06"
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object

        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object

        '404':
          description: Public Token was not found.
          content:
            application/json:
              schema:
                type: object

  /api/v1/cards/{publicToken}/card-type:
    put:
      summary: Redirects the request to the external card processing service.
      description: This endpoint redirects the request to the external card processing service to modify the card type.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: PUT
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        requestParameters:
          integration.request.path.publicToken: "method.request.path.publicToken"
        uri: https://sandbox.globalprocessing.com/sandbox/api/v1/cards/{publicToken}/replace
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: publicToken
          in: path
          required: true
          description: Public token associated with the card
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cardType:
                  type: string
                  description:
                    Card Type ("Physical" or "Virtual").
                moveExpiryDate:
                  type: boolean
                  nullable: true
                  description: Indicates if the expiration date will be changed.
                newExpiryDate:
                  type: string
                  format: date-time
                  nullable: true
                  description: New card expiration date.
                manufacturingDetails:
                  type: object
                  nullable: true
                  properties:
                    deliveryMethod:
                      type: string
                      description: Card delivery method.
                    carrierType:
                      type: string
                      description: Type of transport for delivery.
                      minLength: 0
                      maxLength: 30
                    language:
                      type: string
                      nullable: true
                      description: Customization language.
                    thermalLine1:
                      type: string
                      nullable: true
                      description: Free text field which can be used for transferring extra information to be printed on the card.
                    thermalLine2:
                      type: string
                      nullable: true
                      description: Free text field which can be used for transferring extra information to be printed on the card.
                    embossLine4:
                      type: string
                      nullable: true
                      description: Embossed card line 4. Actual maximum length will depend on the card design.
                    vanityName:
                      type: string
                      nullable: true
                      description: Can add an additional title to the card holder name (for example "Company Director").
                    imageDetails:
                      type: object
                      nullable: true
                      properties:
                        imageId:
                          type: string
                          description: Identifies the card manufacturer's image file that will be printed on the face of the card.
                          minLength: 0
                          maxLength: 16
                        logoFrontId:
                          type: string
                          nullable: true
                          description: Identifies the card manufacturer's logo file that will be printed on the face of the card.
                        logoBackId:
                          type: string
                          nullable: true
                          description: Identifies the card manufacturer's logo file that will be printed on the back of the card, if supported.
              required:
                - cardType
                - manufacturingDetails
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  cardType:
                    type: string
                    example: "Physical"
                  expiryDate:
                    type: string
                    format: date-time
                    example: "2024-10-02T18:01:22.617Z"
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object

        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object

        '404':
          description: Public Token was not found.
          content:
            application/json:
              schema:
                type: object

  /api/v1/cards:
    post:
      summary: Redirects the request to the external card processing service.
      description: This endpoint redirects the request to the external card processing service to create a new card.
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        uri: https://sandbox.globalprocessing.com/sandbox/api/v1/cards/{publicToken}/replace
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cardType:
                  type: string
                  description: Type of the card.
                cardProduct:
                  type: integer
                  description: Unique identifier for the card product.
                customerReference:
                  type: string
                  description: Reference number for the customer.
                activateNow:
                  type: boolean
                  description: Flag indicating if the card should be activated immediately.
                freetext1:
                  type: string
                  description: Comments for the card manufacturer.
                freetext2:
                  type: string
                  description: Additional comments for the card manufacturer.
                nameOnCard:
                  type: string
                  description: Name to be printed on the card.
                isSingleUse:
                  type: boolean
                  description: Indicates if the card is for single use only.
                isNonReloadable:
                  type: boolean
                  description: Indicates if the card is non-reloadable.
                cardHolder:
                  type: object
                  properties:
                    title:
                      type: string
                      description: Title of the card holder.
                    firstName:
                      type: string
                      description: First name of the card holder.
                    middleName:
                      type: string
                      description: Middle name of the card holder.
                    lastName:
                      type: string
                      description: Last name of the card holder.
                    dateOfBirth:
                      type: string
                      format: date
                      description: Date of birth of the card holder.
                    mobile:
                      type: string
                      description: Mobile number of the card holder.
                    email:
                      type: string
                      format: email
                      description: Email address of the card holder.
                address:
                  type: object
                  properties:
                    addressLine1:
                      type: string
                      description: First line of the address.
                    addressLine2:
                      type: string
                      description: Second line of the address (optional).
                    city:
                      type: string
                      description: City of the address.
                    postCode:
                      type: string
                      description: Postal code of the address.
                    country:
                      type: string
                      description: Country code of the address.
                fulfilment:
                  type: object
                  properties:
                    addressLine1:
                      type: string
                      description: First line of the fulfilment address.
                    addressLine2:
                      type: string
                      description: Second line of the fulfilment address (optional).
                    city:
                      type: string
                      description: City of the fulfilment address.
                    postCode:
                      type: string
                      description: Postal code of the fulfilment address.
                    country:
                      type: string
                      description: Country code of the fulfilment address.
                manufacturingDetails:
                  type: object
                  properties:
                    cardManufacturer:
                      type: string
                      description: Name of the card manufacturer.
                    deliveryMethod:
                      type: integer
                      description: Method of delivery (e.g., 0 for standard, 1 for express).
                    carrierType:
                      type: string
                      description: Type of carrier used for delivery.
                    quantity:
                      type: integer
                      description: Quantity of cards to be manufactured.
                    language:
                      type: string
                      description: Language preference for card details.
                    thermalLine1:
                      type: string
                      description: First line of thermal printing details.
                    thermalLine2:
                      type: string
                      description: Second line of thermal printing details.
                    embossLine4:
                      type: string
                      description: Details for the embossing line on the card.
                    vanityName:
                      type: string
                      description: Custom name or vanity name for the card.
                    imageDetails:
                      type: object
                      properties:
                        imageId:
                          type: string
                          description: ID for the card image.
                        logoFrontId:
                          type: string
                          description: ID for the front logo of the card.
                        logoBackId:
                          type: string
                          description: ID for the back logo of the card.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  publicToken:
                    type: string
                    example: "5678901234"
                  customerReference:
                    type: string
                    example: "sales"
                  embossName:
                    type: string
                    example: "Joseph Bloggs"
                  maskedPan:
                    type: string
                    example: "123456******3456"
                  startDate:
                    type: string
                    format: date
                    example: "2022-06-06"
                  expiryDate:
                    type: string
                    format: date
                    example: "2025-06-06"
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: A validation error occurred.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object

        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object

        '404':
          description: Public Token was not found.
          content:
            application/json:
              schema:
                type: object

  # Risk assessment ###############################################################################

  /api/v1/riskassesment/Accounts/v1/RunStrategy:
    post:
      tags:
        - Run Strategy - Transaction monitoring
      summary: Transaction monitoring
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        requestParameters:
          integration.request.header.Accept: "'application/vnd.mambu.v2+json'"
        uri: https://www.trunarrative.cloud/TruAccountAPI/rest/Accounts/v1/RunStrategy
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: runStrategy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accountStrategyId:
                  type: integer
                accountId:
                  type: integer
                application:
                  type: object
                  properties:
                    applicationDateTime:
                      type: string
                      format: date-time
                    country:
                      type: string
                    deviceId:
                      type: string
                    clientDecision:
                      type: string
                    clientDecisionReason:
                      type: string
                    clientApplicationPurpose:
                      type: string
                    processCode:
                      type: string
                    processReason:
                      type: string
                person:
                  type: array
                  items:
                    type: object
                    properties:
                      role:
                        type: string
                      isPrimary:
                        type: boolean
                      clientReference:
                        type: string
                      annualIncome:
                        type: integer
                      dateOfBirth:
                        type: string
                      emailAddress:
                        type: string
                      firstName:
                        type: string
                      middleNames:
                        type: string
                      lastName:
                        type: string
                      gender:
                        type: string
                      mobilePhoneNumber:
                        type: string
                      residentialAddress:
                        type: array
                        items:
                          type: object
                          properties:
                            addressLine1:
                              type: string
                            addressLine2:
                              type: string
                            addressLine3:
                              type: string
                            zipPostcode:
                              type: string
                            country:
                              type: string
                      finance:
                        type: object
                        properties:
                          bankAccount:
                            type: array
                            items:
                              type: object
                              properties:
                                sortCode:
                                  type: string
                                accountNumber:
                                  type: string
                      action:
                        type: string
                financialAccount:
                  type: object
                  properties:
                    clientReference:
                      type: string
                    sortCode:
                      type: string
                    accountNumber:
                      type: string
                    dateOpened:
                      type: string
                      format: date
                    productName:
                      type: string
                    productCode:
                      type: string
                    paymentType:
                      type: string
                    paymentSubtype:
                      type: string
                    countryOfTransaction:
                      type: string
                    financialTransaction:
                      type: array
                      items:
                        type: object
                        properties:
                          clientReference:
                            type: string
                          sortCode:
                            type: string
                          accountNumber:
                            type: string
                          accountHolder:
                            type: string
                          creditOrDebit:
                            type: string
                          currencyCode:
                            type: string
                          paymentType:
                            type: string
                          paymentSubtype:
                            type: string
                          amount:
                            type: number
                          paymentReference:
                            type: string
                          balance:
                            type: number
                          IBAN:
                            type: string
                          effectiveDateTime:
                            type: string
                            format: date-time
                          countryOfTransaction:
                            type: string

      responses:
        '200':
          description: Success to run startegy
          content:
            application/json:
              schema:
                type: object
                properties:
                  accountId:
                    type: integer
                  status:
                    type: object
                    properties:
                      code:
                        type: string
                      label:
                        type: string
                  decision:
                    type: object
                  Applications:
                    type: array
                    items:
                      type: object
                      properties:
                        uid:
                          type: string
                        auditReference:
                          type: string
                        runId:
                          type: integer
                        journeyId:
                          type: object
                          properties:
                            id:
                              type: integer
                            name:
                              type: string
                        organisationId:
                          type: object
                          properties:
                            id:
                              type: integer
                        country:
                          type: string
                        user:
                          type: object


  # Migration routes #############################################################################

  /api/v1/migration/core/loans/{loanAccountId}/changeState:
    post:
      tags:
        - migration-controller
      summary: Change State
      description: 'Change loan account state'
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "9n57qb"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.loanAccountId: "method.request.path.loanAccountId"
          integration.request.header.Accept: "'application/json'"
        tlsConfig:
          insecureSkipVerification: true
        uri: https://producer-onboarding-service.gibdev-internal.com/api/v1/migration/core/loans/{loanAccountId}:changeState

        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: produceEvent_1
      parameters:
        - name: loanAccountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/LoansChangeStateDTO'
              type: object
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/LoansChangeStateResponseDTO'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/migration/core/loans/{loanAccountId}/disbursement-transactions:
    post:
      tags:
        - migration-controller
      summary: Disbursement transactions
      description: 'Disbursement Transactions'
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "9n57qb"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.loanAccountId: "method.request.path.loanAccountId"
          integration.request.header.Accept: "'application/json'"
        tlsConfig:
          insecureSkipVerification: true
        uri: https://producer-onboarding-service.gibdev-internal.com/api/v1/migration/core/loans/{loanAccountId}/disbursement-transactions
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: produceEvent_2
      parameters:
        - name: loanAccountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/LoansDisbursementTransactionDTO'
              type: object
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/LoansDisbursementTransactionResponseDTO'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/migration/core/loans:
    post:
      tags:
        - migration-controller
      summary: Create loan account
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "9n57qb"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/json'"
        tlsConfig:
          insecureSkipVerification: true
        uri: https://producer-onboarding-service.gibdev-internal.com/api/v1/migration/core/loans
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: produceEvent
      requestBody:
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/LoansDTO'
              type: object
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/LoansResponseDTO'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/migration/core/group:
    post:
      tags:
        - migration-controller
      summary: Groups
      description: 'Create Group'
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "9n57qb"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/json'"
        tlsConfig:
          insecureSkipVerification: true
        uri: https://producer-onboarding-service.gibdev-internal.com/api/v1/migration/core/group
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: produceEvent_3
      requestBody:
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/GroupDTO'
              type: object
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/GroupResponseDTO'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/migration/core/deposits:
    post:
      tags:
        - migration-controller
      summary: Deposits
      description: 'Create Deposit account'
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "9n57qb"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/json'"
        tlsConfig:
          insecureSkipVerification: true
        uri: https://producer-onboarding-service.gibdev-internal.com/api/v1/migration/core/deposits
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: produceEvent_4
      requestBody:
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/DepositsDTO'
              type: object
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/DepositsResponseDTO'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/migration/core/deposits/{depositAccountId}/startMaturity:
    post:
      tags:
        - migration-controller
      summary: Start Maturity
      description: 'Start Maturity'
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "9n57qb"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/json'"
        tlsConfig:
          insecureSkipVerification: true
        uri: https://producer-onboarding-service.gibdev-internal.com/api/v1/migration/core/deposits/{depositAccountId}:startMaturity
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: produceEvent_5
      parameters:
        - name: depositAccountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/DepositsMaturity'
              type: object
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/DepositsMaturityResponse'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/migration/core/deposits/{depositAccountId}/withdrawal-transactions:
    post:
      tags:
        - migration-controller
      summary: Withdrawal Transactions
      description: 'Withdrawal Transactions'
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "9n57qb"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/json'"
        tlsConfig:
          insecureSkipVerification: true
        uri: https://producer-onboarding-service.gibdev-internal.com/api/v1/migration/core/deposits/{depositAccountId}/withdrawal-transactions
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: produceEvent_6
      parameters:
        - name: depositAccountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/WithdrawalTransactionsDTO'
              type: object
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/WithdrawalTransactionsResponseDTO'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/migration/core/deposits/{depositAccountId}/deposit-transactions:
    post:
      tags:
        - migration-controller
      summary: Deposit Transactions
      description: 'Deposit Transactions'
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "9n57qb"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.depositAccountId: "method.request.path.depositAccountId"
          integration.request.header.Accept: "'application/json'"
        tlsConfig:
          insecureSkipVerification: true
        uri: https://producer-onboarding-service.gibdev-internal.com/api/v1/migration/core/deposits/{depositAccountId}/deposit-transactions
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: produceEvent_7
      parameters:
        - name: depositAccountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/DepositsTransactionsDTO'
              type: object
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/DepositsTransactionsResponseDTO'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/migration/core/depositproducts:
    post:
      tags:
        - migration-controller
      summary: Deposit products
      description: 'Deposit products'
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "9n57qb"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/json'"
        tlsConfig:
          insecureSkipVerification: true
        uri: https://producer-onboarding-service.gibdev-internal.com/api/v1/migration/core/depositproducts
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: produceEvent_8
      requestBody:
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/DepositProductsDTO'
              type: object
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/DepositProductResponseDTO'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  /api/v1/migration/core/client:
    post:
      tags:
        - migration-controller
      summary: Create Client
      description: 'Create Client'
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "9n57qb"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.header.Accept: "'application/json'"
        tlsConfig:
          insecureSkipVerification: true
        uri: https://producer-onboarding-service.gibdev-internal.com/api/v1/migration/core/client
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      operationId: produceEvent_9
      requestBody:
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/ClientDTO'
              type: object
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ClientResponseDTO'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  # CRM routes ###############################################################################

  # Customers

  '/api/v1/crm/customers/{customerId}':
    get:
      tags:
        - Customers
      summary: Get customer
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        httpMethod: GET
        payloadFormatVersion: 1.0
        type: HTTP_PROXY
        connectionId: "z61aog"
        connectionType: "VPC_LINK"
        requestParameters:
          integration.request.path.customerId: "method.request.path.customerId"
        uri: https://gib-dev.crm11.dynamics.com/api/data/v9.2/contacts({customerId})
        responses:
          "200":
            statusCode: "200"
          "201":
            statusCode: "201"
          "400":
            statusCode: "400"
          "401":
            statusCode: "401"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "405":
            statusCode: "405"
          "406":
            statusCode: "406"
          "422":
            statusCode: "422"
          "429":
            statusCode: "429"
          "500":
            statusCode: "500"
          "503":
            statusCode: "503"
      parameters:
        - name: customerId
          in: path
          description: The ID or encoded key of the customer to be returned.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Customer returned.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/Customer'
                type: object
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object
        '404':
          description: Customer not found.
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ErrorResponse'
                type: object

  # Schemas ######################################################################################

#components:
#  schemas:
#    InternalControls:
#      type: object
#      properties:
#        dormancyPeriodDays:
#          type: integer
#          format: int32
#          description: Specifies the number of days for an account to be fully paid
#            in order to auto close it.
#        fourEyesPrinciple:
#          #$ref: "#/components/schemas/FourEyesPrinciple"
#          type: object
#        lockSettings:
#          #$ref: "#/components/schemas/LockSettings"
#          type: object
#      description: Constraints and automated actions and that will be applied on the
#        accounts.
#    TaxSettings:
#      type: object
#      properties:
#        taxSourceKey:
#          type: string
#          description: The tax source from where the loan account taxes will be updated.
#        taxesOnInterestEnabled:
#          type: boolean
#          description: Shows whether taxes on interest are enabled for this product
#            or not.
#        taxesOnPenaltyEnabled:
#          type: boolean
#          description: Shows whether taxes on penalties are enabled for this product
#            or not.
#        taxCalculationMethod:
#          type: string
#          description: Shows whether the tax is added on top of the target amount or
#            not.
#          enum:
#            - INCLUSIVE
#            - EXCLUSIVE
#        taxesOnFeesEnabled:
#          type: boolean
#          description: Shows whether taxes on fees are enabled for this product or not.
#      description: Tax settings, defines some settings for taxes on the loan product
#    ProductAmortizationPeriod:
#      type: object
#      properties:
#        minValue:
#          type: integer
#          format: int32
#          description: min value
#        maxValue:
#          type: integer
#          format: int32
#          description: max value
#        defaultValue:
#          type: integer
#          format: int32
#          description: default value
#      description: It holds information about the loan product amortization period.
#        The PMT is calculated as the loan would have [amortisationPeriod] instalments
#    LoanProduct:
#      type: object
#      properties:
#        notes:
#          type: string
#          description: The notes or description of the loan product.
#        availabilitySettings:
#          #$ref: "#/components/schemas/ProductAvailabilitySettings"
#          type: object
#        paymentSettings:
#          #$ref: "#/components/schemas/PaymentSettings"
#          type: object
#        taxSettings:
#          #$ref: "#/components/schemas/TaxSettings"
#          type: object
#        redrawSettings:
#          #$ref: "#/components/schemas/ProductRedrawSettings"
#          type: object
#        type:
#          type: string
#          description: The type of the loan product.
#          enum:
#            - FIXED_TERM_LOAN
#            - DYNAMIC_TERM_LOAN
#            - INTEREST_FREE_LOAN
#            - TRANCHED_LOAN
#            - REVOLVING_CREDIT
#            - INTEREST_ONLY_EQUAL_INSTALLMENTS
#        arrearsSettings:
#          #$ref: "#/components/schemas/ProductArrearsSettings"
#          type: object
#        newAccountSettings:
#          #$ref: "#/components/schemas/NewAccountSettings"
#          type: object
#        interestSettings:
#          #$ref: "#/components/schemas/ProductInterestSettings"
#          type: object
#        encodedKey:
#          type: string
#          description: The encoded key of the loan product, it is auto generated, and
#            unique.
#          readOnly: true
#        currency:
#          #$ref: "#/components/schemas/Currency"
#          type: object
#        id:
#          type: string
#          description: The ID of the loan product, can be generated and customized,
#            and must be unique.
#        state:
#          type: string
#          description: The current state of the loan product.
#          enum:
#            - ACTIVE
#            - INACTIVE
#        penaltySettings:
#          #$ref: "#/components/schemas/ProductPenaltySettings"
#          type: object
#        adjustInterestForFirstInstallment:
#          type: boolean
#          description: "`TRUE` if it is possible to adjust the interest for the first
#            repayment when the first repayment period is different than the repayment
#            frequency, `FALSE` otherwise."
#        lastModifiedDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The last date the loan product was updated.
#        feesSettings:
#          #$ref: "#/components/schemas/FeesSettings"
#          type: object
#        accountLinkSettings:
#          #$ref: "#/components/schemas/AccountLinkSettings"
#          type: object
#        securitySettings:
#          #$ref: "#/components/schemas/SecuritySettings"
#          type: object
#        templates:
#          type: array
#          description: The template documents of the loan product.
#          items:
#            #$ref: "#/components/schemas/DocumentTemplate"
#            type: object
#        gracePeriodSettings:
#          #$ref: "#/components/schemas/GracePeriodSettings"
#          type: object
#        offsetSettings:
#          #$ref: "#/components/schemas/OffsetSettings"
#          type: object
#        creationDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date the loan product was created.
#        creditArrangementSettings:
#          #$ref: "#/components/schemas/CreditArrangementSettings"
#          type: object
#        allowCustomRepaymentAllocation:
#          type: boolean
#          description: "`TRUE` if an additional payment may be allocated on the account,
#            ignoring the default repayment allocation order, `FALSE` otherwise."
#        scheduleSettings:
#          #$ref: "#/components/schemas/LoanProductScheduleSettings"
#          type: object
#        accountingSettings:
#          #$ref: "#/components/schemas/AccountingSettings"
#          type: object
#        name:
#          type: string
#          description: The name of the loan product.
#        loanAmountSettings:
#          #$ref: "#/components/schemas/LoanAmountSettings"
#          type: object
#        category:
#          type: string
#          description: The category of the loan product.
#          enum:
#            - PERSONAL_LENDING
#            - PURCHASE_FINANCING
#            - RETAIL_MORTGAGES
#            - SME_LENDING
#            - COMMERCIAL
#            - UNCATEGORIZED
#        internalControls:
#          #$ref: "#/components/schemas/InternalControls"
#          type: object
#        fundingSettings:
#          #$ref: "#/components/schemas/FundingSettings"
#          type: object
#      description: Represents a loan product.
#    GLAccountingRule:
#      type: object
#      required:
#        - financialResource
#        - glAccountKey
#      properties:
#        encodedKey:
#          type: string
#          description: The encoded key of the accounting rule, auto generated, unique.
#          readOnly: true
#        glAccountKey:
#          type: string
#          description: The encoded key of the account that is mapped to the financialResource
#        transactionChannelKey:
#          type: string
#          description: The key of the transaction rule that uses this rule
#        financialResource:
#          type: string
#          description: General Ledger Financial Resources used to setup the product
#            accounting rules and determine the credit and debit accounts when logging
#            journal entries
#          enum:
#            - PORTFOLIO_CONTROL
#            - FUND_SOURCE
#            - WRITE_OFF_EXPENSE
#            - INTEREST_INCOME
#            - PAYMENT_HOLIDAY_INTEREST_INCOME
#            - TAXES_PAYABLE
#            - FEE_INCOME
#            - PENALTY_INCOME
#            - NEGATIVE_INTEREST_PAYABLE_RECEIVABLE
#            - NEGATIVE_INTEREST_PAYABLE
#            - INTEREST_RECEIVABLE
#            - PAYMENT_HOLIDAY_INTEREST_RECEIVABLE
#            - FEE_RECEIVABLE
#            - PENALTY_RECEIVABLE
#            - TAXES_RECEIVABLE
#            - DEFERRED_INTERESTS_INCOME
#            - DEFERRED_FEE_INCOME
#            - DEFERRED_TAXES
#            - DEPOSIT_REFERENCE
#            - SAVINGS_CONTROL
#            - INTEREST_EXPENSE
#            - INTEREST_PAYABLE
#            - NEGATIVE_INTEREST_INCOME
#            - NEGATIVE_INTEREST_RECEIVABLE
#            - OVERDRAFT_PORTFOLIO_CONTROL
#            - OVERDRAFT_INTEREST_INCOME
#            - OVERDRAFT_WRITE_OFF_EXPENSE
#            - OVERDRAFT_INTEREST_RECEIVABLE
#            - INTER_BRANCH_TRANSFER
#            - INTEREST_FROM_ARREARS_INCOME
#            - INTEREST_FROM_ARREARS_RECEIVABLE
#            - INTEREST_FROM_ARREARS_WRITE_OFF_EXPENSE
#      description: The GL accounting rule, it maps a financial resource with a GL account
#        for a specific product (i.e loan or saving).
#    PredefinedFee:
#      type: object
#      required:
#        - feeApplication
#        - state
#        - trigger
#      properties:
#        amount:
#          type: number
#          description: The amount of the fee
#        lastModifiedDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: Shows the last modified date of the fee
#        amountCalculationMethod:
#          type: string
#          description: The amount from which the fee is calculated using percentageAmount
#          enum:
#            - FLAT
#            - LOAN_AMOUNT_PERCENTAGE
#            - REPAYMENT_PRINCIPAL_AMOUNT_PERCENTAGE
#            - LOAN_AMOUNT_PERCENTAGE_NUMBER_OF_INSTALLMENTS
#            - FLAT_NUMBER_OF_INSTALLMENTS
#            - IOF_PERCENTAGE_OF_DISBURSED_AMOUNT
#            - IOF_PERCENTAGE_OF_INSTALLMENT_PRINCIPAL
#            - IOF_PERCENTAGE_OF_LATE_INSTALLMENT_PRINCIPAL
#            - MAMBU_FUNCTION
#        taxSettings:
#          #$ref: "#/components/schemas/FeeTaxSettings"
#          type: object
#        trigger:
#          type: string
#          description: Shows the event that will trigger a fee
#          enum:
#            - MANUAL
#            - MANUAL_PLANNED
#            - DISBURSEMENT
#            - CAPITALIZED_DISBURSEMENT
#            - UPFRONT_DISBURSEMENT
#            - LATE_REPAYMENT
#            - PAYMENT_DUE
#            - PAYMENT_DUE_APPLIED_ON_DUE_DATES
#            - ARBITRARY
#            - IOF
#            - EARLY_REPAYMENT_CHARGE
#        creationDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: Shows the creation date of the fee
#        amountCalculationFunctionName:
#          type: string
#          description: Mambu Function name used for the fee calculation
#        accountingRules:
#          type: array
#          description: A list of accounting rules defined for this fee. If null, product
#            default rules are selected.
#          items:
#            #$ref: "#/components/schemas/GLAccountingRule"
#            type: object
#        name:
#          type: string
#          description: The name of the fee
#        feeApplication:
#          type: string
#          description: The type of fee application when disbursement is applied
#          enum:
#            - REQUIRED
#            - OPTIONAL
#        amortizationSettings:
#          #$ref: "#/components/schemas/PeriodIntervalSettings"
#          type: object
#        encodedKey:
#          type: string
#          description: The encoded key of the predefined fee, auto generated, unique
#          readOnly: true
#        id:
#          type: string
#          description: The id of the fee
#        state:
#          type: string
#          description: Indicates the state of the fee
#          enum:
#            - ACTIVE
#            - INACTIVE
#        applyDateMethod:
#          type: string
#          description: Shows when a fee should be applied; to be used with monthly deposit
#            fees
#          enum:
#            - MONTHLY_FROM_ACTIVATION
#            - FIRST_OF_EVERY_MONTH
#        percentageAmount:
#          type: number
#          description: The amount of the fee in percents applied to percentSource
#      description: The response representation of the PredefinedFee. Represents a fee
#        with a defined name and a fixed value.
#    DecimalConstraints:
#      type: object
#      properties:
#        minValue:
#          type: number
#          description: The minimum value.
#        encodedKey:
#          type: string
#          description: The encoded key of the decimal constraint, auto generated, unique
#          readOnly: true
#        maxValue:
#          type: number
#          description: The maximum value.
#        defaultValue:
#          type: number
#          description: The default value, will be used in case no other value was filled
#            in by the user.
#      description: Decimal constraints, like min/max/default.
#    FeeTaxSettings:
#      type: object
#      properties:
#        taxableCalculationMethod:
#          type: string
#          description: Marks a specific fee as non-taxable (taxes are not calculated
#            for it).Feature is in the Early Stage. To be enabled by request.
#          enum:
#            - DEFAULT
#            - NON_TAXABLE
#            - CUSTOM_TAX
#      description: Tax settings for a specific Predefined fee that overrides the tax
#        settings of Loan Product
#    IntegerIntervalConstraints:
#      type: object
#      properties:
#        minValue:
#          type: integer
#          format: int32
#          description: The minimum value.
#        encodedKey:
#          type: string
#          description: The encoded key of the integer constraint, auto generated, unique
#          readOnly: true
#        defaultValue:
#          type: integer
#          format: int32
#          description: The default value, will be used in case no other value was filled
#            in by the user.
#        maxValue:
#          type: integer
#          format: int32
#          description: The maximum value.
#      description: Decimal integer, like min/max/default.
#    InterestRateTier:
#      type: object
#      required:
#        - interestRate
#      properties:
#        endingBalance:
#          type: number
#          description: The top-limit value for the account balance in order to determine
#            if this tier is used or not
#        interestRate:
#          type: number
#          description: The rate used for computing the interest for an account which
#            has the balance less than the ending balance
#        encodedKey:
#          type: string
#          description: The encoded key of the interest rate tier, auto generated, unique
#          readOnly: true
#      description: Used or TIERED interest rates, holds the values to define how the
#        interest is computed
#    DecimalInterval:
#      type: object
#      properties:
#        minValue:
#          type: number
#          description: The minimum value.
#        maxValue:
#          type: number
#          description: The maximum value.
#        defaultValue:
#          type: number
#          description: The default value, will be used in case no other value was filled
#            in by the user.
#      description: Decimal constraints, like min/max/default.
#    BranchSettings:
#      type: object
#      properties:
#        forAllBranches:
#          type: boolean
#          description: Indicates if this product should be available for all branches
#        availableProductBranches:
#          type: array
#          description: Holds the encoded keys of the branches this product should be
#            available for.
#          items:
#            type: string
#      description: Holds information about branch availability for the product.
#    CreditArrangementSettings:
#      type: object
#      properties:
#        creditArrangementRequirement:
#          type: string
#          description: Shows whether accounts created after this product can/should
#            be part of a line of credit.
#          enum:
#            - OPTIONAL
#            - REQUIRED
#            - NOT_REQUIRED
#      description: The funding settings, holds the settings regarding the funding for
#        the loan product.
#    ProductPrepaymentSettings:
#      type: object
#      required:
#        - futurePaymentsAcceptance
#      properties:
#        futurePaymentsAcceptance:
#          type: string
#          description: Shows whether the future payments are allowed or not for this
#            product (repayment transactions with entry date set in the future)
#          enum:
#            - NO_FUTURE_PAYMENTS
#            - ACCEPT_FUTURE_PAYMENTS
#            - ACCEPT_OVERPAYMENTS
#        applyInterestOnPrepaymentMethod:
#          type: string
#          description: Whether the interest on prepayment is applied manual or automatic.
#          enum:
#            - AUTOMATIC
#            - MANUAL
#        prepaymentAcceptance:
#          type: string
#          description: Shows whether the pre-payments are allowed or not for this product.
#          enum:
#            - ACCEPT_PREPAYMENTS
#            - NO_PREPAYMENTS
#        elementsRecalculationMethod:
#          type: string
#          description: The elements recalculation method, indicates how the declining
#            balance with equal installments repayments are recalculated
#          enum:
#            - PRINCIPAL_EXPECTED_FIXED
#            - TOTAL_EXPECTED_FIXED
#        principalPaidInstallmentStatus:
#          type: string
#          description: Installment status for the case when principal is paid off (copied
#            from loan product)
#          enum:
#            - PARTIALLY_PAID
#            - PAID
#            - ORIGINAL_TOTAL_EXPECTED_PAID
#        ercFreeAllowance:
#          type: number
#          description: ERC free allowance in percentage
#        prepaymentRecalculationMethod:
#          type: string
#          description: Prepayment recalculation method copied from the loan product
#            on which this account is based
#          enum:
#            - NO_RECALCULATION
#            - RESCHEDULE_REMAINING_REPAYMENTS
#            - RECALCULATE_SCHEDULE_KEEP_SAME_NUMBER_OF_TERMS
#            - RECALCULATE_SCHEDULE_KEEP_SAME_PRINCIPAL_AMOUNT
#            - RECALCULATE_SCHEDULE_KEEP_SAME_TOTAL_REPAYMENT_AMOUNT
#            - REDUCE_AMOUNT_PER_INSTALLMENT
#            - REDUCE_NUMBER_OF_INSTALLMENTS
#            - REDUCE_NUMBER_OF_INSTALLMENTS_NEW
#      description: Defines the prepayment settings for the product
#    NewAccountSettings:
#      type: object
#      required:
#        - accountInitialState
#        - idGeneratorType
#        - idPattern
#      properties:
#        idGeneratorType:
#          type: string
#          description: The type of generator used for IDs creation.
#          enum:
#            - INCREMENTAL_NUMBER
#            - RANDOM_PATTERN
#        accountInitialState:
#          type: string
#          description: The initial state of the account when is created.
#          enum:
#            - PARTIAL_APPLICATION
#            - PENDING_APPROVAL
#            - APPROVED
#            - ACTIVE
#            - ACTIVE_IN_ARREARS
#            - CLOSED
#        idPattern:
#          type: string
#          description: The pattern that will be used for ID validation (as referred
#            to as an input mask).
#      description: The new account settings, defines the settings and constraints used
#        by new loan account created based on this product.
#    FourEyesPrinciple:
#      type: object
#      properties:
#        activeForLoanApproval:
#          type: boolean
#          description: Requires separate users to create and approve loan accounts
#      description: Settings for Four Eyes Principle
#    PreviewScheduleSettings:
#      type: object
#      properties:
#        numberOfPreviewedInstalments:
#          type: integer
#          format: int32
#          description: Number of Previewed Instalments.
#        previewScheduleEnabled:
#          type: boolean
#          description: Preview Schedule status.
#      description: Defines the Preview Schedule settings for revolving products
#    AmountDecimalConstraints:
#      type: object
#      properties:
#        minValue:
#          type: number
#          description: The minimum value.
#        encodedKey:
#          type: string
#          description: The encoded key of the decimal constraint, auto generated, unique
#          readOnly: true
#        maxValue:
#          type: number
#          description: The maximum value.
#        defaultValue:
#          type: number
#          description: The default value, will be used in case no other value was filled
#            in by the user.
#      description: Decimal constraints, like min/max/default.
#    ProductPenaltySettings:
#      type: object
#      required:
#        - loanPenaltyCalculationMethod
#      properties:
#        loanPenaltyGracePeriod:
#          type: integer
#          format: int32
#          description: Number of days to wait before applying the loan penalty amounts
#        loanPenaltyCalculationMethod:
#          type: string
#          description: The penalty calculation method
#          enum:
#            - NONE
#            - OVERDUE_BALANCE
#            - OVERDUE_BALANCE_AND_INTEREST
#            - OUTSTANDING_PRINCIPAL
#        penaltyRate:
#          #$ref: "#/components/schemas/DecimalConstraints"
#          type: object
#      description: Defines the penalty settings for the product that will be used by
#        the loan accounts based on this product
#    BillingCyclesProductSettings:
#      type: object
#      properties:
#        enabled:
#          type: boolean
#          description: The billing cycle status if it is enabled or disabled
#        startDays:
#          type: array
#          description: The billing cycle start days in case it is enabled
#          uniqueItems: true
#          items:
#            type: integer
#            format: int32
#      description: Defines the billing cycles settings for revolving credit products
#    ProductInterestSettings:
#      type: object
#      properties:
#        decoupleInterestFromArrears:
#          type: boolean
#          description: Whether interest from arrears is decoupled from regular interest.
#            (Only accepted or returned if the feature is enabled.)
#        pmtAdjustmentThreshold:
#          #$ref: "#/components/schemas/PMTAdjustmentThreshold"
#          type: object
#        interestApplicationDays:
#          #$ref: "#/components/schemas/DaysInMonth"
#          type: object
#        interestRateSettings:
#          type: array
#          description: Adjustable interest rates settings
#          items:
#            #$ref: "#/components/schemas/ProductInterestRateSettings"
#            type: object
#        scheduleInterestDaysCountMethod:
#          type: string
#          description: Shows  whether all the installments should compute the interest
#            based on the actual number of days or based on the defined repayment periodicity.
#          enum:
#            - REPAYMENT_PERIODICITY
#            - ACTUAL_DAYS_COUNT
#        interestApplicationMethod:
#          type: string
#          description: The interest application method. Represents the interest application
#            method that determines whether the interest gets applied on the account's
#            disbursement or on each repayment.
#          enum:
#            - AFTER_DISBURSEMENT
#            - REPAYMENT_DUE_DATE
#            - FIXED_DAYS_OF_MONTH
#        interestType:
#          type: string
#          description: The possible values for how we compute and apply the interest
#          enum:
#            - SIMPLE_INTEREST
#            - CAPITALIZED_INTEREST
#            - COMPOUNDING_INTEREST
#        interestBalanceCalculationMethod:
#          type: string
#          description: The interest balance calculation method. Represents the option
#            which determines the way the balance for the account's interest is computed.
#          enum:
#            - ONLY_PRINCIPAL
#            - PRINCIPAL_AND_INTEREST
#        interestCalculationMethod:
#          type: string
#          description: The interest calculation method. Holds the type of interest calculation
#            method.
#          enum:
#            - FLAT
#            - DECLINING_BALANCE
#            - DECLINING_BALANCE_DISCOUNTED
#            - EQUAL_INSTALLMENTS
#        indexRateSettings:
#          #$ref: "#/components/schemas/InterestProductSettings"
#          type: object
#        daysInYear:
#          type: string
#          description: The days in year that should be used for loan calculations.
#          enum:
#            - ACTUAL_365_FIXED
#            - ACTUAL_364
#            - ACTUAL_360
#            - ACTUAL_ACTUAL_ISDA
#            - E30_360
#            - BUS_252
#            - E30_42_365
#        accrueLateInterest:
#          type: boolean
#          description: Whether late interest should be accrued, applied and paid
#        compoundingFrequency:
#          type: string
#          description: The frequency on which the accrued interest will be added to
#            the principal for interest calculation. It is used only for InterestType.COMPOUNDING_INTEREST
#          enum:
#            - DAILY
#      description: The interest settings, defines constraints regarding interest that
#        will be used on the loan account crated based on this product.
#    ProductRedrawSettings:
#      type: object
#      required:
#        - allowRedraw
#      properties:
#        allowRedraw:
#          type: boolean
#          description: Indicates whether the product support redraw (prepayments which
#            are stored at loan account level as a Redrawable balance)
#      description: The redraw settings for the product.
#    ProductArrearsSettings:
#      type: object
#      properties:
#        monthlyToleranceDay:
#          type: integer
#          format: int32
#          description: Defines the tolerance monthly date
#        toleranceFloorAmount:
#          type: number
#          description: The tolerance floor amount.
#        nonWorkingDaysMethod:
#          type: string
#          description: Shows whether the non working days are taken in consideration
#            or not when applying penaltees/late fees or when setting an account into
#            arrears
#          enum:
#            - INCLUDED
#            - EXCLUDED
#        tolerancePercentageOfOutstandingPrincipal:
#          #$ref: "#/components/schemas/DecimalInterval"
#          type: object
#        tolerancePeriod:
#          #$ref: "#/components/schemas/IntegerIntervalConstraints"
#          type: object
#        encodedKey:
#          type: string
#          description: The encoded key of the arrears base settings, auto generated,
#            unique.
#          readOnly: true
#        toleranceCalculationMethod:
#          type: string
#          description: Defines the tolerance calculation method
#          enum:
#            - ARREARS_TOLERANCE_PERIOD
#            - MONTHLY_ARREARS_TOLERANCE_DAY
#        dateCalculationMethod:
#          type: string
#          description: The arrears date calculation method.
#          enum:
#            - ACCOUNT_FIRST_WENT_TO_ARREARS
#            - LAST_LATE_REPAYMENT
#            - ACCOUNT_FIRST_BREACHED_MATERIALITY_THRESHOLD
#      description: The product arrears settings, shows whether the non working days
#        are taken in consideration or not when applying penalties/late fees or when
#        setting an account into arrears
#    RepaymentScheduleEditOptionDetails:
#      type: object
#      properties:
#        paymentHolidaysSettings:
#          #$ref: "#/components/schemas/PaymentHolidaysSettings"
#          type: object
#      description: Holds Repayments Schedule Editing options
#    AccountingSettings:
#      type: object
#      required:
#        - accountingMethod
#      properties:
#        accountingMethod:
#          type: string
#          description: The calculation method used for accounting.
#          enum:
#            - NONE
#            - CASH
#            - ACCRUAL
#        interestAccrualCalculation:
#          type: string
#          description: The accounting interest calculation option selected for the product.
#          enum:
#            - NONE
#            - AGGREGATED_AMOUNT
#            - BREAKDOWN_PER_ACCOUNT
#        accountingRules:
#          type: array
#          description: A list of accounting rules for the product.
#          items:
#            #$ref: "#/components/schemas/GLAccountingRule"
#            type: object
#        interestAccruedAccountingMethod:
#          type: string
#          description: The interval defined for a product when the interest accrues
#            should be maintained.
#          enum:
#            - NONE
#            - DAILY
#            - END_OF_MONTH
#      description: Accounting settings, defines the accounting settings for the product.
#    LockSettings:
#      type: object
#      properties:
#        cappingPercentage:
#          type: number
#          description: Specifies the percentage of principal that cannot be exceeded
#            by the sum of interest, fees and penalty balances.
#        lockPeriodDays:
#          type: integer
#          format: int32
#          description: Specifies the number of days for in which the account will be
#            locked if it stays in arrears.
#        cappingConstraintType:
#          type: string
#          description: Specifies constraint types for capping charges.
#          enum:
#            - SOFT_CAP
#            - HARD_CAP
#        cappingMethod:
#          type: string
#          description: Specifies how principal will be used when calculating capping
#            charges.
#          enum:
#            - OUTSTANDING_PRINCIPAL_PERCENTAGE
#            - ORIGINAL_PRINCIPAL_PERCENTAGE
#      description: Settings applied when transitioning accounts to Locked state
#    AccountLinkSettings:
#      type: object
#      required:
#        - enabled
#      properties:
#        linkedAccountOptions:
#          type: array
#          description: A set of linked account options.
#          uniqueItems: true
#          items:
#            type: string
#            enum:
#              - AUTO_LINK_ACCOUNTS
#              - AUTO_CREATE_LINKED_ACCOUNTS
#        settlementMethod:
#          type: string
#          description: Set the option of automated transfer that should be made from
#            linked deposit accounts into loan accounts create from this product.
#          enum:
#            - FULL_DUE_AMOUNTS
#            - PARTIAL_DUE_AMOUNTS
#            - NO_AUTOMATED_TRANSFERS
#        enabled:
#          type: boolean
#          description: Shows whether the loan accounts created using this product can
#            be linked to a savings account.
#        linkableDepositProductKey:
#          type: string
#          description: Loan accounts created for this product can only be linked the
#            the savings accounts that use the savings product with this key. If null,
#            the loan accounts for this product can be linked to any savings account.
#      description: Defines the settings for account linking.
#    SecuritySettings:
#      type: object
#      properties:
#        isCollateralEnabled:
#          type: boolean
#          description: Shows whether collateral (assets or other goods) are accepted
#            in order to reach required securities percentage from loan amount, as defined
#            in this product.
#        isGuarantorsEnabled:
#          type: boolean
#          description: Shows whether guarantors (other clients) are accepted in order
#            to reach the required securities percentage from loan amount, as defined
#            in this product.
#        requiredGuaranties:
#          type: number
#          description: The securities percentage from loan amount that is needed in
#            order for this account to be approved. Null if the securities are not required.
#      description: The settings and constraints for securities.
#    PeriodIntervalSettings:
#      type: object
#      properties:
#        feeAmortizationUponRescheduleRefinanceOption:
#          type: string
#          description: Flag for signaling if fee amortization should be continued or
#            finished at account reschedule/refinance
#          enum:
#            - END_AMORTIZATION_ON_THE_ORIGINAL_ACCOUNT
#            - CONTINUE_AMORTIZATION_ON_THE_RESCHEDULED_REFINANCED_ACCOUNT
#        intervalType:
#          type: string
#          description: Defines the options for an interval
#          enum:
#            - PREDEFINED_INTERVALS
#            - FULL_TERM
#        periodCount:
#          type: integer
#          format: int32
#          description: Period count used in conjunction with periodUnit to determine
#            the next date of the interval
#        intervalCount:
#          type: integer
#          format: int32
#          description: Total number of intervals
#        encodedKey:
#          type: string
#          description: The encoded key of the period interval settings, auto generated,
#            unique.
#          readOnly: true
#        amortizationProfile:
#          type: string
#          description: Type of amortization profile used for fee
#          enum:
#            - NONE
#            - SUM_OF_YEARS_DIGITS
#            - STRAIGHT_LINE
#            - EFFECTIVE_INTEREST_RATE
#        periodUnit:
#          type: string
#          description: Amortization unit to determine the interval between amortizations
#          enum:
#            - DAYS
#            - WEEKS
#            - MONTHS
#            - YEARS
#        frequency:
#          type: string
#          description: Frequency settings of the fee amortization
#          enum:
#            - ACCOUNT_INSTALLMENTS_DUE_DATES
#            - ACCOUNT_INSTALLMENTS_DUE_DATES_DAILY_BOOKING
#            - CUSTOM_INTERVAL
#      description: The settings for defining period intervals.
#    ProductInterestRateSettings:
#      type: object
#      required:
#        - interestRateSource
#      properties:
#        interestRate:
#          #$ref: "#/components/schemas/DecimalInterval"
#          type: object
#        interestRateReviewUnit:
#          type: string
#          description: Interest rate review frequency measurement unit. Valid only for
#            index interest rate.
#          enum:
#            - DAYS
#            - WEEKS
#            - MONTHS
#        interestRateSource:
#          type: string
#          description: 'Interest calculation method: fixed or indexed(interest spread
#            + active organization index interest rate)'
#          enum:
#            - FIXED_INTEREST_RATE
#            - INDEX_INTEREST_RATE
#        interestRateReviewCount:
#          type: integer
#          format: int32
#          description: Interest rate review frequency unit count. Valid only for index
#            interest rate.
#        indexSourceKey:
#          type: string
#          description: Index rate source key.
#        interestRateCeilingValue:
#          type: number
#          description: Maximum value allowed for index based interest rate. Valid only
#            for index interest rate.
#        encodedKey:
#          type: string
#          description: The encoded key of the interest rate settings, auto generated,
#            unique
#          readOnly: true
#        interestRateFloorValue:
#          type: number
#          description: Minimum value allowed for index based interest rate. Valid only
#            for index interest rate.
#      description: Adjustable interest rates settings
#    GracePeriodSettings:
#      type: object
#      properties:
#        gracePeriod:
#          #$ref: "#/components/schemas/IntegerIntervalConstraints"
#          type: object
#        gracePeriodType:
#          type: string
#          description: The grace period type. Representing the type of grace period
#            which is possible for a loan account.
#          enum:
#            - NONE
#            - PAY_INTEREST_ONLY
#            - INTEREST_FORGIVENESS
#      description: The funding settings, holds the settings regarding the funding for
#        the loan product.
#    DocumentTemplate:
#      type: object
#      properties:
#        name:
#          type: string
#          description: The name the document
#        encodedKey:
#          type: string
#          description: The document encodedKey
#          readOnly: true
#        creationDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The creation date of the document
#          readOnly: true
#        type:
#          type: string
#          description: The type of the template
#          enum:
#            - ACCOUNT
#            - TRANSACTION
#            - ACCOUNT_WITH_TRANSACTIONS
#        lastModifiedDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The last modified date of the document
#          readOnly: true
#      description: Template documents of the product.
#    TrancheSettings:
#      type: object
#      properties:
#        maxNumberOfTranches:
#          type: integer
#          format: int32
#          description: The number of tranches supported by the loan product
#      description: The tranche settings, indicates the settings regarding tranches in
#        case the product is configured to support tranches.
#    RoundingSettings:
#      type: object
#      required:
#        - repaymentCurrencyRounding
#        - repaymentElementsRoundingMethod
#        - roundingRepaymentScheduleMethod
#      properties:
#        roundingRepaymentScheduleMethod:
#          type: string
#          description: Specifies the rounding repayment schedule method.
#          enum:
#            - NO_ROUNDING
#            - ROUND_REMAINDER_INTO_LAST_REPAYMENT
#            - ROUND_PRINCIPAL_AND_INTEREST_REMAINDER_INTO_LAST_REPAYMENT
#        repaymentCurrencyRounding:
#          type: string
#          description: Specifies the repayment currency rounding method.
#          enum:
#            - NO_ROUNDING
#            - ROUND_TO_NEAREST_WHOLE_UNIT
#            - ROUND_UP_TO_NEAREST_WHOLE_UNIT
#        repaymentElementsRoundingMethod:
#          type: string
#          description: Determines how the repayment currency rounding is handled on
#            each element from the schedule.
#          enum:
#            - NO_ROUNDING
#            - ROUND_ALL
#            - PAYMENT_DUE
#      description: Defines the rounding settings used in the loan computation.
#    LoanAmountSettings:
#      type: object
#      properties:
#        loanAmount:
#          #$ref: "#/components/schemas/AmountDecimalConstraints"
#          type: object
#        trancheSettings:
#          #$ref: "#/components/schemas/TrancheSettings"
#          type: object
#      description: The amount settings, holds all amount properties.
#    InterestProductSettings:
#      type: object
#      properties:
#        interestRate:
#          #$ref: "#/components/schemas/DecimalInterval"
#          type: object
#        interestRateReviewUnit:
#          type: string
#          description: Interest rate review frequency measurement unit
#          enum:
#            - DAYS
#            - WEEKS
#            - MONTHS
#        allowNegativeInterestRate:
#          type: boolean
#          description: Indicator whether the loan product allows negative values for
#            interest rate or interest spread
#        interestRateSource:
#          type: string
#          description: 'Interest calculation method: fixed or (interest spread + active
#            organization index interest rate)'
#          enum:
#            - FIXED_INTEREST_RATE
#            - INDEX_INTEREST_RATE
#        interestChargeFrequency:
#          type: string
#          description: The interval used for determining how often is interest charged
#          enum:
#            - ANNUALIZED
#            - EVERY_MONTH
#            - EVERY_FOUR_WEEKS
#            - EVERY_WEEK
#            - EVERY_DAY
#            - EVERY_X_DAYS
#        accrueInterestAfterMaturity:
#          type: boolean
#          description: If the product supports this option, specify if the interest
#            should be accrued after the account maturity date
#        interestRateTerms:
#          type: string
#          description: The option for how is the interest rate determined when being
#            accrued for an account
#          enum:
#            - FIXED
#            - TIERED
#            - TIERED_PERIOD
#            - TIERED_BAND
#        interestChargeFrequencyCount:
#          type: integer
#          format: int32
#          description: the count of units to apply over the interval
#        interestRateReviewCount:
#          type: integer
#          format: int32
#          description: Interest rate review frequency unit count
#        indexSourceKey:
#          type: string
#          description: Index rate source key.
#        interestRateCeilingValue:
#          type: number
#          description: Interest spread + index interest rate can't be more than this
#            amount (valid only for index interest rate products).
#        interestRateTiers:
#          type: array
#          description: The list of interest rate tiers available for the current settings
#            instance
#          items:
#            #$ref: "#/components/schemas/InterestRateTier"
#            type: object
#        encodedKey:
#          type: string
#          description: The encoded key of the interest rate tier, auto generated, unique
#          readOnly: true
#        interestRateFloorValue:
#          type: number
#          description: Interest spread + index interest rate can't be less than this
#            amount (valid only for index interest rate products).
#      description: The interest settings, defines constraints regarding interest that
#        will be used on the loan account created based on this product.
#    PrincipalPaymentProductSettings:
#      type: object
#      properties:
#        defaultPrincipalRepaymentInterval:
#          type: integer
#          format: int32
#          description: How many repayments the principal has to be paid
#        includeInterestInFloorAmount:
#          type: boolean
#          description: If true, the interest will be included along with the principal
#            in the repayment floor amount, for a revolving credit account
#        amount:
#          #$ref: "#/components/schemas/AmountDecimalConstraints"
#          type: object
#        totalDuePayment:
#          type: string
#          description: The method of total due payment for revolving credit
#          enum:
#            - FLAT
#            - OUTSTANDING_PRINCIPAL_PERCENTAGE
#            - PRINCIPAL_PERCENTAGE_LAST_DISB
#            - TOTAL_BALANCE_PERCENTAGE
#            - TOTAL_BALANCE_FLAT
#            - TOTAL_PRINCIPAL_PERCENTAGE
#        principalFloorValue:
#          type: number
#          description: The minimum principal due amount a repayment made with this settings
#            can have
#        principalPaymentMethod:
#          type: string
#          description: The method of principal payment for revolving credit
#          enum:
#            - FLAT
#            - OUTSTANDING_PRINCIPAL_PERCENTAGE
#            - PRINCIPAL_PERCENTAGE_LAST_DISB
#            - TOTAL_BALANCE_PERCENTAGE
#            - TOTAL_BALANCE_FLAT
#            - TOTAL_PRINCIPAL_PERCENTAGE
#        percentage:
#          #$ref: "#/components/schemas/DecimalConstraints"
#          type: object
#        includeFeesInFloorAmount:
#          type: boolean
#          description: If true, the fees will be included along with the principal in
#            the repayment floor amount, for a revolving credit account
#        encodedKey:
#          type: string
#          description: The encoded key of the settings, auto generated, unique
#          readOnly: true
#        totalDueAmountFloor:
#          type: number
#          description: The minimum total due amount a repayment made with this settings
#            can have
#        principalCeilingValue:
#          type: number
#          description: The maximum principal due amount a repayment made with this settings
#            can have
#      description: Defines the principal payment settings constraints for the loans
#        that will be created based on this product.
#    LoanProductScheduleSettings:
#      type: object
#      properties:
#        repaymentMethod:
#          type: string
#          description: The repayment method value
#          enum:
#            - AMOUNT
#            - INSTALLMENTS
#        repaymentScheduleMethod:
#          type: string
#          description: The repayment schedule method. Represents the method that determines
#            whether the schedule will be fixed all over the loan account's life cycle
#            or will be dynamically recomputed when required.
#          enum:
#            - NONE
#            - FIXED
#            - DYNAMIC
#        repaymentReschedulingMethod:
#          type: string
#          description: The repayment rescheduling method used in calculations.
#          enum:
#            - NONE
#            - NEXT_WORKING_DAY
#            - PREVIOUS_WORKING_DAY
#            - EXTEND_SCHEDULE
#        shortMonthHandlingMethod:
#          type: string
#          description: Determines how to handle the short months, if they select a fixed
#            day of month > 28. Will be null if no such date is selected and also for
#            the Interval methodology. Only available if the Schedule Due Dates Method
#            is ScheduleDueDatesMethodDTO#FIXED_DAYS_OF_MONTHs.
#          enum:
#            - LAST_DAY_IN_MONTH
#            - FIRST_DAY_OF_NEXT_MONTH
#        scheduleEditOptionDetails:
#          #$ref: "#/components/schemas/RepaymentScheduleEditOptionDetails"
#          type: object
#        numInstallments:
#          #$ref: "#/components/schemas/IntegerIntervalConstraints"
#          type: object
#        interestAccrualSince:
#          type: string
#          description: Represents the moment the interest will start getting accrued.
#          enum:
#            - DISBURSEMENT
#            - DUE_DATE
#        amortizationPeriod:
#          #$ref: "#/components/schemas/ProductAmortizationPeriod"
#          type: object
#        repaymentPeriodUnit:
#          type: string
#          description: The frequency of the loan repayment.
#          enum:
#            - DAYS
#            - WEEKS
#            - MONTHS
#            - YEARS
#        previewSchedule:
#          #$ref: "#/components/schemas/PreviewScheduleSettings"
#          type: object
#        defaultRepaymentPeriodCount:
#          type: integer
#          format: int32
#          description: Interval Repayment Methodology Settings.
#        billingCycles:
#          #$ref: "#/components/schemas/BillingCyclesProductSettings"
#          type: object
#        fixedDaysOfMonth:
#          type: array
#          description: " Specifies the days of the month when the repayment due dates
#            should be. Only available if the Repayment Methodology is ScheduleDueDatesMethodDTO#FIXED_DAYS_OF_MONTH."
#          items:
#            type: integer
#            format: int32
#        repaymentScheduleEditOptions:
#          type: array
#          description: Shows the properties from the repayment schedule can be edited.
#          items:
#            type: string
#            enum:
#              - ADJUST_PAYMENT_DATES
#              - ADJUST_PRINCIPAL_PAYMENT_SCHEDULE
#              - ADJUST_INTEREST_PAYMENT_SCHEDULE
#              - ADJUST_FEE_PAYMENT_SCHEDULE
#              - ADJUST_PENALTY_PAYMENT_SCHEDULE
#              - ADJUST_NUMBER_OF_INSTALLMENTS
#              - ADJUST_PAYMENT_HOLIDAYS
#        scheduleDueDatesMethod:
#          type: string
#          description: The methodology used by this product to compute the due dates
#            of the repayments.
#          enum:
#            - INTERVAL
#            - FIXED_DAYS_OF_MONTH
#        firstRepaymentDueDateOffset:
#          #$ref: "#/components/schemas/IntegerIntervalConstraints"
#          type: object
#        roundingSettings:
#          #$ref: "#/components/schemas/RoundingSettings"
#          type: object
#      description: Defines the settings and constraints for schedule for the loans that
#        are created based on this product.
#    FundingSettings:
#      type: object
#      properties:
#        organizationInterestCommission:
#          #$ref: "#/components/schemas/DecimalConstraints"
#          type: object
#        lockFundsAtApproval:
#          type: boolean
#          description: Shows whether investor funds are locked or not at the loan account's
#            approval.
#        funderInterestCommission:
#          #$ref: "#/components/schemas/DecimalConstraints"
#          type: object
#        requiredFunds:
#          type: number
#          description: The required investor funds percentage, for opening an account
#            with external funding. If null, the investor funds are not enabled.
#        funderInterestCommissionAllocationType:
#          type: string
#          description: Define how the Interest is allocated to the investors(if the
#            investors can define their own percentages for their own contribution to
#            the loan, or if all of them are using the same percentage).
#          enum:
#            - PERCENTAGE_OF_LOAN_FUNDING
#            - FIXED_INTEREST_COMMISSIONS
#        enabled:
#          type: boolean
#          description: Indicates whether the product has the investor funds enabled
#            or not.
#      description: The funding settings, holds the settings regarding the funding for
#        the loan product.
#    FeesSettings:
#      type: object
#      properties:
#        fees:
#          type: array
#          description: List of all fees that can be applied for accounts of this loan
#            product.
#          items:
#            #$ref: "#/components/schemas/PredefinedFee"
#            type: object
#        allowArbitraryFees:
#          type: boolean
#          description: Only if true users will be able to apply fees, for current object,
#            of type 'Other'; these fees can have any amount.
#      description: Defines fees settings for the product.
#    PaymentHolidaysSettings:
#      type: object
#      properties:
#        paymentHolidaysLoanTermOption:
#          type: string
#          description: payment holiday option
#          enum:
#            - EXTEND_LOAN_TERM
#            - KEEP_THE_SAME_LOAN_TERM
#      description: Holds Payment Holidays Settings
#    OffsetSettings:
#      type: object
#      properties:
#        allowOffset:
#          type: boolean
#          description: Indicates whether the product supports offset
#      description: The offset settings, holds information about offset.
#    ProductAvailabilitySettings:
#      type: object
#      properties:
#        branchSettings:
#          #$ref: "#/components/schemas/BranchSettings"
#          type: object
#        availableFor:
#          type: array
#          description: Holds the entities this product is available for. i.e Individuals
#          uniqueItems: true
#          items:
#            type: string
#            enum:
#              - INDIVIDUALS
#              - PURE_GROUPS
#              - SOLIDARITY_GROUPS
#      description: Holds information about product availability.
#    PaymentSettings:
#      type: object
#      required:
#        - latePaymentsRecalculationMethod
#        - paymentMethod
#        - repaymentAllocationOrder
#      properties:
#        prepaymentSettings:
#          #$ref: "#/components/schemas/ProductPrepaymentSettings"
#          type: object
#        principalPaymentSettings:
#          #$ref: "#/components/schemas/PrincipalPaymentProductSettings"
#          type: object
#        paymentMethod:
#          type: string
#          description: The payment method. Represents the interest payment method that
#            determines whether the payments are made Horizontally (on the Repayments)
#            or Vertically (on the Loan Account)
#          enum:
#            - HORIZONTAL
#            - VERTICAL
#        latePaymentsRecalculationMethod:
#          type: string
#          description: Recalculate the schedule when late payments are posted on dynamic
#            Equal Installments loans.
#          enum:
#            - OVERDUE_INSTALLMENTS_INCREASE
#            - LAST_INSTALLMENT_INCREASE
#            - NO_RECALCULATION
#        repaymentAllocationOrder:
#          type: array
#          description: A list of basic repayment allocation elements such as the principal,
#            interest & fees.
#          items:
#            type: string
#            enum:
#              - PRINCIPAL
#              - INTEREST
#              - FEE
#              - PENALTY
#        amortizationMethod:
#          type: string
#          description: Payments Method used by loan accounts for repayments schedule
#            generation.
#          enum:
#            - STANDARD_PAYMENTS
#            - BALLOON_PAYMENTS
#            - OPTIMIZED_PAYMENTS
#            - PAYMENT_PLAN
#      description: Defines the payment settings for the loan product and for loans crated
#        based on this product.
#    LoanAccount:
#      type: object
#      required:
#        - accountHolderKey
#        - accountHolderType
#        - loanAmount
#        - productTypeKey
#        - scheduleSettings
#      properties:
#        accountState:
#          type: string
#          description: The state of the loan account.
#          enum:
#            - PARTIAL_APPLICATION
#            - PENDING_APPROVAL
#            - APPROVED
#            - ACTIVE
#            - ACTIVE_IN_ARREARS
#            - CLOSED
#        prepaymentSettings:
#          #$ref: "#/components/schemas/PrepaymentSettings"
#          type: object
#        migrationEventKey:
#          type: string
#          description: The migration event encoded key associated with this loan account.
#            If this account was imported, track which 'migration event' they came from.
#        lastSetToArrearsDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date when the loan account was set to last standing or null;
#            if never set, it is expressed in your organization time format and time
#            zone.
#        notes:
#          type: string
#          description: The notes about this loan account.
#        disbursementDetails:
#          #$ref: "#/components/schemas/DisbursementDetails"
#          type: object
#        redrawSettings:
#          #$ref: "#/components/schemas/LoanAccountRedrawSettings"
#          type: object
#        plannedInstallmentFees:
#          type: array
#          description: The list with manual fees planned on the installments of the
#            loan account.
#          items:
#            #$ref: "#/components/schemas/PlannedInstallmentFee"
#            type: object
#        daysInArrears:
#          type: integer
#          format: int32
#          description: The number of days the loan account is in arrears.
#          readOnly: true
#        accountSubState:
#          type: string
#          description: A second state for the loan account. Beside the account state,
#            a second substate is sometimes necessary to provide more information about
#            the exact lifecycle state of a loan account.For example, even if the account
#            state of a loan account is `ACTIVE`, it can also have a substate of `LOCKED`.
#          enum:
#            - PARTIALLY_DISBURSED
#            - LOCKED
#            - LOCKED_CAPPING
#            - REFINANCED
#            - RESCHEDULED
#            - WITHDRAWN
#            - REPAID
#            - REJECTED
#            - WRITTEN_OFF
#            - TERMINATED
#        loanName:
#          type: string
#          description: The name of the loan account.
#        terminationDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date this loan account was terminated.
#        interestSettings:
#          #$ref: "#/components/schemas/InterestSettings"
#          type: object
#        assets:
#          type: array
#          description: The list of assets associated with the current loan account.
#          items:
#            #$ref: "#/components/schemas/Asset"
#            type: object
#        lastInterestReviewDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date the interest was reviewed last time, stored in the organization
#            time format and time zone.
#        id:
#          type: string
#          description: The ID of the loan account, it can be generated and customized,
#            and must be unique.
#        assignedUserKey:
#          type: string
#          description: The key of the user this loan account is assigned to.
#        lockedAccountTotalDueType:
#          type: string
#          description: The locked account total due type.
#          enum:
#            - BALANCE_AMOUNT
#            - DUE_AMOUNT_ON_LATE_INSTALLMENTS
#        futurePaymentsAcceptance:
#          type: string
#          description: Shows whether the repayment transactions with entry date set
#            in the future are allowed or not for this loan account.
#          enum:
#            - NO_FUTURE_PAYMENTS
#            - ACCEPT_FUTURE_PAYMENTS
#            - ACCEPT_OVERPAYMENTS
#        originalAccountKey:
#          type: string
#          description: The key of the original rescheduled or refinanced loan account.
#        lockedOperations:
#          type: array
#          description: A list with operations which are locked when the account is in
#            the AccountState.LOCKED substate.
#          items:
#            type: string
#            enum:
#              - APPLY_INTEREST
#              - APPLY_FEES
#              - APPLY_PENALTIES
#        accruedInterest:
#          type: number
#          description: The amount of interest that has been accrued in the loan account.
#        accruedPenalty:
#          type: number
#          description: The accrued penalty, represents the amount of penalty that has
#            been accrued in the loan account.
#        creationDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date the loan account was created.
#        modifyInterestForFirstInstallment:
#          type: boolean
#          description: Adjust the interest for the first repayment when the first repayment
#            period is different than the repayment frequency
#          readOnly: true
#        assignedCentreKey:
#          type: string
#          description: The key of the centre this account is assigned to.
#        tranches:
#          type: array
#          description: The list of disbursement tranches available for the loan account.
#          items:
#            #$ref: "#/components/schemas/LoanTranche"
#            type: object
#        approvedDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date the loan account was approved.
#        taxRate:
#          type: number
#          description: The tax rate.
#        lastTaxRateReviewDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date the tax rate on the loan account was last checked, expressed
#            in the organization time format and time zone.
#        interestFromArrearsAccrued:
#          type: number
#          description: The amount of interest from arrears that has been accrued in
#            the loan account.
#          readOnly: true
#        scheduleSettings:
#          #$ref: "#/components/schemas/ScheduleSettings"
#          type: object
#        daysLate:
#          type: integer
#          format: int32
#          description: The number of days a repayment for the loan account is late.
#          readOnly: true
#        paymentMethod:
#          type: string
#          description: The interest payment method that determines whether the payments
#            are made horizontally (on the repayments) or vertically (on the loan account).
#          enum:
#            - HORIZONTAL
#            - VERTICAL
#        accountHolderKey:
#          type: string
#          description: The encoded key of the account holder.
#        latePaymentsRecalculationMethod:
#          type: string
#          description: The overdue payments recalculation method inherited from the
#            loan product on which this loan account is based.
#          enum:
#            - OVERDUE_INSTALLMENTS_INCREASE
#            - LAST_INSTALLMENT_INCREASE
#            - NO_RECALCULATION
#        fundingSources:
#          type: array
#          description: The list of funds associated with the loan account.
#          items:
#            #$ref: "#/components/schemas/InvestorFund"
#            type: object
#        accountHolderType:
#          type: string
#          description: The type of the account holder.
#          enum:
#            - CLIENT
#            - GROUP
#        arrearsTolerancePeriod:
#          type: integer
#          format: int32
#          description: The arrears tolerance (period or day of month) depending on the
#            product settings.
#        lastInterestAppliedDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date of the last time the loan account had interest applied
#            (stored to interest balance), expressed in the organization time format
#            and time zone.
#        rescheduledAccountKey:
#          type: string
#          description: The key pointing to where this loan account was rescheduled or
#            refinanced to. This value is only not null if rescheduled.
#        paymentHolidaysAccruedInterest:
#          type: number
#          description: The amount of interest that has been accrued during payment holidays
#            in the loan account.
#        activationTransactionKey:
#          type: string
#          description: The encoded key of the transaction that activated the loan account.
#        interestAccruedInBillingCycle:
#          type: number
#          description: The interest that is accrued in the current billing cycle.
#          readOnly: true
#        assignedBranchKey:
#          type: string
#          description: The key of the branch this loan account is assigned to. The branch
#            is set to unassigned if no branch field is set.
#        balances:
#          #$ref: "#/components/schemas/Balances"
#          type: object
#        creditArrangementKey:
#          type: string
#          description: The key to the line of credit where this account is registered
#            to.
#        interestCommission:
#          type: number
#          description: The value of the interest booked by the organization from the
#            accounts funded by investors. Null if the funds are not enabled.
#        encodedKey:
#          type: string
#          description: The encoded key of the loan account, it is auto generated, and
#            must be unique.
#          readOnly: true
#        currency:
#          #$ref: "#/components/schemas/Currency"
#          type: object
#        lastAccountAppraisalDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date the loan account has last been evaluated for interest,
#            principal, fees, and penalties calculations expressed in the organization
#            time format and time zone.
#        penaltySettings:
#          #$ref: "#/components/schemas/PenaltySettings"
#          type: object
#        settlementAccountKey:
#          type: string
#          description: The encoded key of the settlement account.
#        lastModifiedDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The last date the loan was updated.
#        principalPaymentSettings:
#          #$ref: "#/components/schemas/PrincipalPaymentAccountSettings"
#          type: object
#        lastLockedDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date when the loan account was set for the last time in the
#            `LOCKED` state expressed in the organization time format and time zone.
#            If null, the account is not locked anymore.
#        loanAmount:
#          type: number
#          description: The loan amount.
#        closedDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date the loan was closed.
#        productTypeKey:
#          type: string
#          description: The key for the type of loan product that this loan account is
#            based on.
#        allowOffset:
#          type: boolean
#          description: DEPRECATED - Will always be false.
#        guarantors:
#          type: array
#          description: The list of guarantees associated with the loan account.
#          items:
#            #$ref: "#/components/schemas/Guarantor"
#            type: object
#        accountArrearsSettings:
#          #$ref: "#/components/schemas/AccountArrearsSettings"
#          type: object
#      description: Represents a loan account. A loan account defines the amount that
#        your organization lends to a client. The terms and conditions of a loan account
#        are defined by a loan product. In a loan account, Mambu stores all the information
#        related to disbursements, repayments, interest rates, and withdrawals.
#    AccountArrearsSettings:
#      type: object
#      properties:
#        monthlyToleranceDay:
#          type: integer
#          format: int32
#          description: Defines monthly arrears tolerance day value.
#        toleranceFloorAmount:
#          type: number
#          description: The tolerance floor amount.
#        nonWorkingDaysMethod:
#          type: string
#          description: Shows whether the non working days are taken in consideration
#            or not when applying penaltees/late fees or when setting an account into
#            arrears
#          enum:
#            - INCLUDED
#            - EXCLUDED
#        tolerancePercentageOfOutstandingPrincipal:
#          type: number
#          description: Defines the arrears tolerance amount.
#        tolerancePeriod:
#          type: integer
#          format: int32
#          description: Defines the arrears tolerance period value.
#        encodedKey:
#          type: string
#          description: The encoded key of the arrears base settings, auto generated,
#            unique.
#          readOnly: true
#        toleranceCalculationMethod:
#          type: string
#          description: Defines the tolerance calculation method
#          enum:
#            - ARREARS_TOLERANCE_PERIOD
#            - MONTHLY_ARREARS_TOLERANCE_DAY
#        dateCalculationMethod:
#          type: string
#          description: The arrears date calculation method.
#          enum:
#            - ACCOUNT_FIRST_WENT_TO_ARREARS
#            - LAST_LATE_REPAYMENT
#            - ACCOUNT_FIRST_BREACHED_MATERIALITY_THRESHOLD
#      description: The account arrears settings, holds the required information for
#        the arrears settings of an account.
#    PenaltySettings:
#      type: object
#      properties:
#        loanPenaltyCalculationMethod:
#          type: string
#          description: The last penalty calculation method, represents on what amount
#            are the penalties calculated.
#          enum:
#            - NONE
#            - OVERDUE_BALANCE
#            - OVERDUE_BALANCE_AND_INTEREST
#            - OUTSTANDING_PRINCIPAL
#        penaltyRate:
#          type: number
#          description: The penalty rate, represents the rate (in percent) which is charged
#            as a penalty.
#      description: The penalty settings, holds all the fields regarding penalties
#    InvestorFund:
#      type: object
#      required:
#        - amount
#        - guarantorKey
#        - guarantorType
#      properties:
#        amount:
#          type: number
#          description: The amount used by the client for the guaranty
#        interestCommission:
#          type: number
#          description: The constraint minimum value
#        depositAccountKey:
#          type: string
#          description: The key of the deposit account used by the guarantor (populated
#            when the guaranty type is GUARANTOR). It can be null.
#        assetName:
#          type: string
#          description: The name of a value the client guarantees with (populated when
#            the guaranty type is ASSET)
#        encodedKey:
#          type: string
#          description: The encoded key of the entity, generated, globally unique
#          readOnly: true
#        id:
#          type: string
#          description: Investor fund unique identifier. All versions of an investor
#            fund will have same id.
#        guarantorKey:
#          type: string
#          description: The key of the client/group used as the guarantor.
#        guarantorType:
#          type: string
#          description: The type of the guarantor (client/group)
#          enum:
#            - CLIENT
#            - GROUP
#        sharePercentage:
#          type: number
#          description: Percentage of loan shares this investor owns
#      description: Contains the details about an investor fund including fields like
#        encoded key, guarantor type, amount and guarantor key
#    RescheduleLoanAccount:
#      type: object
#      required:
#        - disbursementDetails
#        - productTypeKey
#      properties:
#        disbursementDetails:
#          #$ref: "#/components/schemas/RescheduleDisbursementDetails"
#          type: object
#        notes:
#          type: string
#          description: Notes for the rescheduled loan account
#        principalPaymentSettings:
#          #$ref: "#/components/schemas/RestructurePrincipalPaymentAccountSettings"
#          type: object
#        loanName:
#          type: string
#          description: The name of the new loan account.
#        interestSettings:
#          #$ref: "#/components/schemas/RestructureInterestSettings"
#          type: object
#        scheduleSettings:
#          #$ref: "#/components/schemas/RestructureScheduleSettings"
#          type: object
#        interestCommission:
#          type: number
#          description: The interest commission
#        encodedKey:
#          type: string
#          description: The encoded key of the entity, generated, globally unique
#          readOnly: true
#        productTypeKey:
#          type: string
#          description: The key of the loan product that this account is based on
#        id:
#          type: string
#          description: Id of the new loan account.
#        guarantors:
#          type: array
#          description: The guarantees associated with the rescheduled loan account
#          items:
#            #$ref: "#/components/schemas/Guarantor"
#            type: object
#        accountArrearsSettings:
#          #$ref: "#/components/schemas/RestructureAccountArrearsSettings"
#          type: object
#        penaltySettings:
#          #$ref: "#/components/schemas/RestructurePenaltySettings"
#          type: object
#      description: The new loan account settings, allowed on the loan account reschedule
#    RestructurePrincipalPaymentAccountSettings:
#      type: object
#      properties:
#        amount:
#          type: number
#          description: Fixed principal payment amount
#        percentage:
#          type: number
#          description: Principal payment percentage
#      description: The principal payment account settings, allowed on the loan account
#        restructure
#    Guarantor:
#      type: object
#      required:
#        - amount
#        - guarantorKey
#        - guarantorType
#      properties:
#        amount:
#          type: number
#          description: The amount used by the client for the guaranty
#        depositAccountKey:
#          type: string
#          description: The key of the deposit account used by the guarantor (populated
#            when the guaranty type is GUARANTOR). It can be null.
#        assetName:
#          type: string
#          description: The name of a value the client guarantees with (populated when
#            the guaranty type is ASSET)
#        encodedKey:
#          type: string
#          description: The encoded key of the security, auto generated, unique.
#          readOnly: true
#        guarantorKey:
#          type: string
#          description: The key of the client/group used as the guarantor.
#        guarantorType:
#          type: string
#          description: The type of the guarantor (client/group)
#          enum:
#            - CLIENT
#            - GROUP
#      description: Guarantor, holds information about a client guaranty entry. It can
#        be defined based on another client which guarantees (including or not a savings
#        account whether it is a client of the organization using Mambu or not) or based
#        on a value the client holds (an asset)
#    Asset:
#      type: object
#      required:
#        - amount
#        - assetName
#      properties:
#        amount:
#          type: number
#          description: The amount used by the client for the guaranty
#        originalAmount:
#          type: number
#          description: The original amount used by the client for a collateral asset
#        depositAccountKey:
#          type: string
#          description: The key of the deposit account used by the guarantor (populated
#            when the guaranty type is GUARANTOR). It can be null.
#        assetName:
#          type: string
#          description: The name of a value the client guarantees with (populated when
#            the guaranty type is ASSET)
#        encodedKey:
#          type: string
#          description: The encoded key of the security, auto generated, unique.
#          readOnly: true
#        guarantorKey:
#          type: string
#          description: The key of the client/group used as the guarantor.
#        guarantorType:
#          type: string
#          description: The type of the guarantor (client/group)
#          enum:
#            - CLIENT
#            - GROUP
#        originalCurrency:
#          #$ref: "#/components/schemas/Currency"
#          type: object
#      description: Asset, holds information about a client asset entry.
#    LoanAccountRedrawSettings:
#      type: object
#      required:
#        - restrictNextDueWithdrawal
#      properties:
#        restrictNextDueWithdrawal:
#          type: boolean
#          description: "`TRUE` if withdrawing amounts that reduce the next due instalment
#            repayment is restricted, `FALSE` otherwise."
#      description: Represents the redraw settings for a loan account.
#    RestructureScheduleSettings:
#      type: object
#      properties:
#        gracePeriod:
#          type: integer
#          format: int32
#          description: The grace period
#        repaymentPeriodUnit:
#          type: string
#          description: The period of time, within which the payments frequency is set
#          enum:
#            - DAYS
#            - WEEKS
#            - MONTHS
#            - YEARS
#        periodicPayment:
#          type: number
#          description: The periodic payment
#        previewSchedule:
#          #$ref: "#/components/schemas/RevolvingAccountSettings"
#          type: object
#        paymentPlan:
#          type: array
#          description: A list of periodic payments for the current loan account.
#          items:
#            #$ref: "#/components/schemas/PeriodicPayment"
#            type: object
#        billingCycleDays:
#          #$ref: "#/components/schemas/BillingCycleDays"
#          type: object
#        fixedDaysOfMonth:
#          type: array
#          description: The days of the month, when the repayment due dates should be
#          items:
#            type: integer
#            format: int32
#        repaymentInstallments:
#          type: integer
#          format: int32
#          description: The number of installments
#        repaymentPeriodCount:
#          type: integer
#          format: int32
#          description: The payments frequency per set period of time
#        amortizationPeriod:
#          type: integer
#          format: int32
#          description: The PMT is calculated as the loan would have [amortizationPeriod]
#            installments.
#      description: The schedule settings, allowed on the loan account restructure
#    RescheduleDisbursementDetails:
#      type: object
#      required:
#        - firstRepaymentDate
#      properties:
#        firstRepaymentDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date of the expected first payment
#      description: The disbursement details, allowed on the loan account restructure
#    AccountBalances:
#      type: object
#      properties:
#        accountId:
#          type: string
#          description: The unique account identifier
#        totalBalance:
#          type: number
#          description: The current balance of a deposit account or principal balance
#            of a revolving credit
#        cardType:
#          type: string
#          description: The card type either DEBIT or CREDIT
#          enum:
#            - DEBIT
#            - CREDIT
#        creditLimit:
#          type: number
#          description: The overdraft limit of a deposit account or the loan amount in
#            case of a credit account
#        currencyCode:
#          type: string
#          description: Currency code used for the account
#        availableBalance:
#          type: number
#          description: The available balance of a deposit or credit account
#      description: Account balances presented to inquirer such as card processor
#    Balances:
#      type: object
#      properties:
#        interestFromArrearsPaid:
#          type: number
#          description: The interest from arrears paid, indicates total interest from
#            arrears paid into the account.
#          readOnly: true
#        principalDue:
#          type: number
#          description: The principal due, indicates how much principal it's due at this
#            moment.
#          readOnly: true
#        interestBalance:
#          type: number
#          description: Represents the total interest owed by the client (total interest
#            applied for account minus interest paid).
#          readOnly: true
#        holdBalance:
#          type: number
#          description: The sum of all the authorization hold amounts on this account.
#          readOnly: true
#        principalPaid:
#          type: number
#          description: The principal paid, holds the value of the total paid into the
#            account.
#          readOnly: true
#        penaltyDue:
#          type: number
#          description: The penalty due. Represents the total penalty amount due for
#            the account.
#          readOnly: true
#        feesBalance:
#          type: number
#          description: The fees balance. Represents the total fees expected to be paid
#            on this account at a given moment.
#          readOnly: true
#        penaltyBalance:
#          type: number
#          description: The penalty balance. Represents the total penalty expected to
#            be paid on this account at a given moment.
#          readOnly: true
#        redrawBalance:
#          type: number
#          description: The total redraw amount owned by the client, from now on.
#        interestFromArrearsBalance:
#          type: number
#          description: The interest from arrears balance. Indicates interest from arrears
#            owned by the client, from now on. (total interest from arrears accrued for
#            account - interest from arrears paid).
#          readOnly: true
#        principalBalance:
#          type: number
#          description: The total principal owned by the client, from now on (principal
#            disbursed - principal paid).
#          readOnly: true
#        interestDue:
#          type: number
#          description: The interest due. Indicates how much interest it's due for the
#            account at this moment.
#          readOnly: true
#        penaltyPaid:
#          type: number
#          description: The Penalty paid. Represents the total penalty amount paid for
#            the account.
#          readOnly: true
#        feesPaid:
#          type: number
#          description: The fees paid. Represents the total fees paid for the account.
#          readOnly: true
#        interestFromArrearsDue:
#          type: number
#          description: The interest from arrears due. Indicates how much interest from
#            arrears it's due for the account at this moment.
#          readOnly: true
#        feesDue:
#          type: number
#          description: The fees due. Representing the total fees due for the account.
#          readOnly: true
#        interestPaid:
#          type: number
#          description: The interest paid, indicates total interest paid into the account.
#          readOnly: true
#      description: The loan account balance details.
#    LoanAccountSortingCriteria:
#      type: object
#      required:
#        - field
#      properties:
#        field:
#          type: string
#          description: Contains the field that can be used as sorting selection. Can
#            be native (one from the provided list) or otherwise can specify a custom
#            field definition using the format [customFieldSetId].[customFieldId].
#          enum:
#            - encodedKey
#            - loanName
#            - id
#            - accountHolderId
#            - recipient
#            - creationDate
#            - approvedDate
#            - lastModifiedDate
#            - lastSetToArrearsDate
#            - lastLockedDate
#            - closedDate
#            - daysInArrears
#            - daysLate
#            - loanAmount
#            - tranches.amount
#            - numInstallments
#            - accruedInterest
#            - accruedPenalty
#            - penaltySettings.penaltyRate
#            - arrearsTolerancePeriod
#            - interestSettings.interestSpread
#            - totalPaid
#            - totalBalance
#            - totalDue
#            - firstRepaymentDate
#            - lastPaymentDate
#            - lastPaymentAmount
#            - expectedMaturity
#            - rescheduledAccountKey
#            - refinancedAccountId
#            - originalAccountKey
#            - taxRate
#            - taxPaid
#            - taxDue
#            - settlementAccountKey
#            - interestCommission
#            - numberOfFunds
#            - fundsEnabled
#            - availableAmount
#            - wasRescheduled
#            - wasRefinanced
#            - expectedPrincipalRedraw
#            - balances.principalDue
#            - balances.principalPaid
#            - balances.principalBalance
#            - balances.interestDue
#            - balances.interestPaid
#            - balance.interestBalance
#            - balances.redrawBalance
#            - balances.feesDue
#            - balances.feesBalance
#            - balances.feesPaid
#            - balances.penaltyDue
#            - balances.penaltyPaid
#            - balances.penaltyBalance
#            - fundingSources.amount
#            - fundingSources.sharePercentage
#        order:
#          type: string
#          description: 'The sorting order: `ASC` or `DESC`. The default order is `DESC`.'
#          enum:
#            - ASC
#            - DESC
#      description: Represents the sorting criteria used for loan account searches.
#
#    Card:
#      type: object
#      required:
#        - referenceToken
#      properties:
#        referenceToken:
#          type: string
#          description: The card's reference token.
#      description: Returns a card that can be associated to a deposit or loan  account.
#        Cards consist only of card reference tokens and the card details are not stored
#        in Mambu.
#    RestructurePenaltySettings:
#      type: object
#      properties:
#        penaltyRate:
#          type: number
#          description: The penalty rate
#      description: The penalty settings, allowed on the loan account restructure.
#    BillingCycleDays:
#      type: object
#      properties:
#        days:
#          type: array
#          description: The billing cycle start days in case it is enabled
#          uniqueItems: true
#          items:
#            type: integer
#            format: int32
#      description: Defines the billing cycles settings for a loan account
#    LoanAccountSearchCriteria:
#      type: object
#      properties:
#        sortingCriteria:
#          #$ref: "#/components/schemas/LoanAccountSortingCriteria"
#          type: object
#        filterCriteria:
#          type: array
#          description: The list of filtering criteria
#          items:
#            #$ref: "#/components/schemas/LoanAccountFilterCriteria"
#            type: object
#      description: Wrapper that holds a list of filtering criteria and a sorting criteria
#        for Loan account directed query
#    InterestSettings:
#      type: object
#      properties:
#        interestRateReviewUnit:
#          type: string
#          description: The interest rate review unit. Defines the interest rate update
#            frequency measurement unit.
#          enum:
#            - DAYS
#            - WEEKS
#            - MONTHS
#        interestRate:
#          type: number
#          description: The interest rate. Represents the interest rate for the loan
#            account. The interest on loans is accrued on a daily basis, which allows
#            charging the clients only for the days they actually used the loan amount.
#        pmtAdjustmentThreshold:
#          #$ref: "#/components/schemas/PMTAdjustmentThreshold"
#          type: object
#        interestRateSource:
#          type: string
#          description: 'The interest rate source. Represents the interest calculation
#            method: fixed or (interest spread + active organization index interest rate)'
#          enum:
#            - FIXED_INTEREST_RATE
#            - INDEX_INTEREST_RATE
#        interestApplicationDays:
#          #$ref: "#/components/schemas/DaysInMonth"
#          type: object
#        interestApplicationMethod:
#          type: string
#          description: The interest application method. Represents the interest application
#            method that determines whether the interest gets applied on the account's
#            disbursement or on each repayment.
#          enum:
#            - AFTER_DISBURSEMENT
#            - REPAYMENT_DUE_DATE
#            - FIXED_DAYS_OF_MONTH
#        interestChargeFrequency:
#          type: string
#          description: The interest change frequency. Holds the possible values for
#            how often is interest charged on loan or deposit accounts
#          enum:
#            - ANNUALIZED
#            - EVERY_MONTH
#            - EVERY_FOUR_WEEKS
#            - EVERY_WEEK
#            - EVERY_DAY
#            - EVERY_X_DAYS
#        interestType:
#          type: string
#          description: The possible values for how we compute and apply the interest
#          enum:
#            - SIMPLE_INTEREST
#            - CAPITALIZED_INTEREST
#            - COMPOUNDING_INTEREST
#        accrueInterestAfterMaturity:
#          type: boolean
#          description: The accrue interest after maturity. If the product support this
#            option, specify if the interest should be accrued after the account maturity
#            date.
#        interestBalanceCalculationMethod:
#          type: string
#          description: The interest balance calculation method. Represents the option
#            which determines the way the balance for the account's interest is computed.
#          enum:
#            - ONLY_PRINCIPAL
#            - PRINCIPAL_AND_INTEREST
#        interestSpread:
#          type: number
#          description: Interest to be added to active organization index interest rate
#            in order to find out actual interest rate
#        interestCalculationMethod:
#          type: string
#          description: The interest calculation method. Holds the type of interest calculation
#            method.
#          enum:
#            - FLAT
#            - DECLINING_BALANCE
#            - DECLINING_BALANCE_DISCOUNTED
#            - EQUAL_INSTALLMENTS
#        interestRateReviewCount:
#          type: integer
#          format: int32
#          description: Interest rate update frequency unit count.
#        accrueLateInterest:
#          type: boolean
#          description: Indicates whether late interest is accrued for this loan account
#          readOnly: true
#        accountInterestRateSettings:
#          type: array
#          description: Adjustable interest rates settings for loan account
#          items:
#            #$ref: "#/components/schemas/AccountInterestRateSettings"
#            type: object
#      description: The interest settings, holds all the properties regarding interests
#        for the loan account.
#    ScheduleSettings:
#      type: object
#      properties:
#        gracePeriod:
#          type: integer
#          format: int32
#          description: The grace period. Represents the grace period for loan repayment
#            - in number of installments.
#        periodicPayment:
#          type: number
#          description: The periodic payment amount for the accounts which have balloon
#            payments or Reduce Number of Installments and Optimized Payments
#        repaymentScheduleMethod:
#          type: string
#          description: The repayment schedule method. Represents the method that determines
#            whether the schedule will be fixed all over the loan account's life cycle
#            or will be dynamically recomputed when required.
#          enum:
#            - NONE
#            - FIXED
#            - DYNAMIC
#        paymentPlan:
#          type: array
#          description: A list of periodic payments for the current loan account.
#          items:
#            #$ref: "#/components/schemas/PeriodicPayment"
#            type: object
#        shortMonthHandlingMethod:
#          type: string
#          description: The short handling method. Determines how to handle the short
#            months, if they select a fixed day of month > 28. Will be null if no such
#            date is selected and also for the Interval methodology. Only available if
#            the Repayment Methodology is FIXED_DAYS_OF_MONTH.
#          enum:
#            - LAST_DAY_IN_MONTH
#            - FIRST_DAY_OF_NEXT_MONTH
#        repaymentInstallments:
#          type: integer
#          format: int32
#          description: The repayment installments. Represents how many installments
#            are required to pay back the loan.
#        gracePeriodType:
#          type: string
#          description: The grace period type. Representing the type of grace period
#            which is possible for a loan account.
#          enum:
#            - NONE
#            - PAY_INTEREST_ONLY
#            - INTEREST_FORGIVENESS
#        amortizationPeriod:
#          type: integer
#          format: int32
#          description: The PMT is calculated as the loan would have [amortizationPeriod]
#            installments.
#        principalRepaymentInterval:
#          type: integer
#          format: int32
#          description: The principal repayment interval. Indicates the interval of repayments
#            that the principal has to be paid.
#        hasCustomSchedule:
#          type: boolean
#          description: Flag used when the repayments schedule for the current account
#            was determined by the user, by editing the due dates or the principal due
#        repaymentPeriodUnit:
#          type: string
#          description: The repayment period unit. Represents the frequency of loan repayment.
#          enum:
#            - DAYS
#            - WEEKS
#            - MONTHS
#            - YEARS
#        previewSchedule:
#          #$ref: "#/components/schemas/RevolvingAccountSettings"
#          type: object
#        fixedDaysOfMonth:
#          type: array
#          description: Specifies the days of the month when the repayment due dates
#            should be. Only available if the Repayment Methodology is FIXED_DAYS_OF_MONTH.
#          items:
#            type: integer
#            format: int32
#        billingCycle:
#          #$ref: "#/components/schemas/BillingCycleDays"
#          type: object
#        scheduleDueDatesMethod:
#          type: string
#          description: The schedule due dates method. Represents the methodology used
#            by this account to compute the due dates of the repayments.
#          enum:
#            - INTERVAL
#            - FIXED_DAYS_OF_MONTH
#        repaymentPeriodCount:
#          type: integer
#          format: int32
#          description: 'The repayment period count. Represents how often the loan is
#            to be repaid: stored based on the type repayment option.'
#        defaultFirstRepaymentDueDateOffset:
#          type: integer
#          format: int32
#          description: The default first repayment due date offset, indicates how many
#            days the first repayment due date should be extended(all other due dates
#            from the schedule are relative to first repayment due date - they will also
#            be affected by the offset)
#      description: The schedule settings, holds all schedule properties.
#    PeriodicPayment:
#      type: object
#      required:
#        - amount
#        - toInstallment
#      properties:
#        toInstallment:
#          type: integer
#          format: int32
#          description: The installment's position up to which the PMT will be used
#        encodedKey:
#          type: string
#          description: The encoded key of the periodic payment, auto generated, unique.
#          readOnly: true
#        amount:
#          type: number
#          description: The PMT value used in periodic payment
#      description: For fixed term loans there is the possibility to define a payment
#        plan. A payment plan consists of multiple periodic payments. This class holds
#        information about a periodic payment.
#    PrincipalPaymentAccountSettings:
#      type: object
#      properties:
#        includeInterestInFloorAmount:
#          type: boolean
#          description: Boolean flag, if true, the interest will be included along with
#            the principal in the repayment floor amount, for a revolving credit account
#        totalDuePayment:
#          type: string
#          description: The method of total due payment for revolving credit
#          enum:
#            - FLAT
#            - OUTSTANDING_PRINCIPAL_PERCENTAGE
#            - PRINCIPAL_PERCENTAGE_LAST_DISB
#            - TOTAL_BALANCE_PERCENTAGE
#            - TOTAL_BALANCE_FLAT
#            - TOTAL_PRINCIPAL_PERCENTAGE
#        amount:
#          type: number
#          description: Fixed amount for being used for the repayments principal due.
#        principalFloorValue:
#          type: number
#          description: The minimum principal due amount a repayment made with this settings
#            can have
#        principalPaymentMethod:
#          type: string
#          description: The method of principal payment for revolving credit.
#          enum:
#            - FLAT
#            - OUTSTANDING_PRINCIPAL_PERCENTAGE
#            - PRINCIPAL_PERCENTAGE_LAST_DISB
#            - TOTAL_BALANCE_PERCENTAGE
#            - TOTAL_BALANCE_FLAT
#            - TOTAL_PRINCIPAL_PERCENTAGE
#        percentage:
#          type: number
#          description: Percentage of principal amount used for the repayments principal
#            due.
#        includeFeesInFloorAmount:
#          type: boolean
#          description: Boolean flag, if true, the fees will be included along with the
#            principal in the repayment floor amount, for a revolving credit account
#        encodedKey:
#          type: string
#          description: The encoded key of the principal payment base settings, auto
#            generated, unique.
#          readOnly: true
#        totalDueAmountFloor:
#          type: number
#          description: The minimum total due amount a repayment made with this settings
#            can have
#        principalCeilingValue:
#          type: number
#          description: The maximum principal due amount a repayment made with this settings
#            can have
#      description: The principal payment account settings, holds the required information
#        for the principal payment process of an account.
#    DisbursementDetails:
#      type: object
#      properties:
#        transactionDetails:
#          #$ref: "#/components/schemas/LoanTransactionDetails"
#          type: object
#        expectedDisbursementDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date of the expected disbursement.Stored as Organization
#            Time.
#        fees:
#          type: array
#          description: List of fees that should be applied at the disbursement time.
#          items:
#            #$ref: "#/components/schemas/CustomPredefinedFee"
#            type: object
#        firstRepaymentDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date of the expected first repayment. Stored as Organization
#            Time.
#        disbursementDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The activation date, the date when the disbursement actually
#            took place.
#        encodedKey:
#          type: string
#          description: The encoded key of the disbursement details, auto generated,
#            unique
#          readOnly: true
#      description: The the disbursement details it holds the information related to
#        the disbursement details as disbursement date, first repayment date, disbursement
#        fees.
#    RestructureAccountArrearsSettings:
#      type: object
#      properties:
#        tolerancePercentageOfOutstandingPrincipal:
#          type: number
#          description: The arrears tolerance amount
#        tolerancePeriod:
#          type: integer
#          format: int32
#          description: The arrears tolerance period value
#      description: The arrears settings, allowed on the loan account restructure
#    LoanTransactionDetails:
#      type: object
#      properties:
#        encodedKey:
#          type: string
#          description: The encoded key of the entity, generated, globally unique
#          readOnly: true
#        internalTransfer:
#          type: boolean
#          description: Whether the transaction was transferred between loans or deposit
#            accounts
#        transactionChannelKey:
#          type: string
#          description: The encoded key of the transaction channel associated with the
#            transaction details.
#        transactionChannelId:
#          type: string
#          description: The ID of the transaction channel associated with the transaction
#            details.
#        targetDepositAccountKey:
#          type: string
#          description: In case of a transaction to a deposit account this represent
#            the deposit account key to which the transaction was made.
#      description: Represents the loan transaction details.
#    RestructureInterestSettings:
#      type: object
#      properties:
#        interestRate:
#          type: number
#          description: The interest rate for the restructured loan account
#        interestSpread:
#          type: number
#          description: The interest spread for the restructured loan account
#        pmtAdjustmentThreshold:
#          #$ref: "#/components/schemas/PMTAdjustmentThreshold"
#          type: object
#        accountInterestRateSettings:
#          type: array
#          description: Adjustable interest rates settings for loan account
#          items:
#            #$ref: "#/components/schemas/AccountInterestRateSettings"
#            type: object
#      description: The interest settings, allowed on the loan account restructure
#    PrepaymentSettings:
#      type: object
#      properties:
#        ercFreeAllowancePercentage:
#          type: number
#          description: Early repayment charge fee free allowance in percentage per year
#        ercFreeAllowanceAmount:
#          type: number
#        applyInterestOnPrepaymentMethod:
#          type: string
#          description: Apply interest on prepayment method copied from loan product
#            on which this account is based.
#          enum:
#            - AUTOMATIC
#            - MANUAL
#        elementsRecalculationMethod:
#          type: string
#          description: The elements recalculation method, indicates how the declining
#            balance with equal installments repayments are recalculated.
#          enum:
#            - PRINCIPAL_EXPECTED_FIXED
#            - TOTAL_EXPECTED_FIXED
#        principalPaidInstallmentStatus:
#          type: string
#          description: Installment status for the case when principal is paid off (copied
#            from loan product).
#          enum:
#            - PARTIALLY_PAID
#            - PAID
#            - ORIGINAL_TOTAL_EXPECTED_PAID
#        prepaymentRecalculationMethod:
#          type: string
#          description: Prepayment recalculation method copied from the loan product
#            on which this account is based.
#          enum:
#            - NO_RECALCULATION
#            - RESCHEDULE_REMAINING_REPAYMENTS
#            - RECALCULATE_SCHEDULE_KEEP_SAME_NUMBER_OF_TERMS
#            - RECALCULATE_SCHEDULE_KEEP_SAME_PRINCIPAL_AMOUNT
#            - RECALCULATE_SCHEDULE_KEEP_SAME_TOTAL_REPAYMENT_AMOUNT
#            - REDUCE_AMOUNT_PER_INSTALLMENT
#            - REDUCE_NUMBER_OF_INSTALLMENTS
#            - REDUCE_NUMBER_OF_INSTALLMENTS_NEW
#      description: The prepayment settings, holds all prepayment properties.
#    LoanAccountFilterCriteria:
#      type: object
#      required:
#        - field
#        - operator
#      properties:
#        field:
#          type: string
#          description: 'Contains the actual searching fields that can be native (one
#            from the provided list) or otherwise can specify a custom field definition
#            using the format [customFieldSetId].[customFieldId].
#
#            '
#          enum:
#            - accountHolderKey
#            - productTypeKey
#            - loanRiskLevelKey
#            - encodedKey
#            - loanName
#            - id
#            - accountHolderId
#            - recipient
#            - creationDate
#            - approvedDate
#            - lastModifiedDate
#            - lastSetToArrearsDate
#            - lastLockedDate
#            - closedDate
#            - daysInArrears
#            - daysLate
#            - accountSubState
#            - accountState
#            - loanAmount
#            - numInstallments
#            - balances.principalDue
#            - balances.principalPaid
#            - balances.principalBalance
#            - balances.interestDue
#            - balances.interestPaid
#            - balance.interestBalance
#            - accruedInterest
#            - balances.feesDue
#            - balances.feesBalance
#            - balances.feesPaid
#            - penaltySettings.loanPenaltyCalculationMethod
#            - balances.penaltyDue
#            - balances.penaltyPaid
#            - balances.penaltyBalance
#            - accruedPenalty
#            - penaltySettings.penaltyRate
#            - arrearsTolerancePeriod
#            - interestSettings.interestRate
#            - interestSettings.interestSpread
#            - totalPaid
#            - totalBalance
#            - totalDue
#            - firstRepaymentDate
#            - lastPaymentDate
#            - lastPaymentAmount
#            - expectedMaturityDate
#            - rescheduledAccountKey
#            - refinancedAccountId
#            - originalAccountKey
#            - taxRate
#            - taxPaid
#            - taxDue
#            - settlementAccountKey
#            - interestCommission
#            - fundingSources.amount
#            - fundingSources.sharePercentage
#            - numberOfFunds
#            - fundsEnabled
#            - availableAmount
#            - wasRescheduled
#            - wasRefinanced
#            - prepaymentSettings.prepaymentRecalculationMethod
#            - prepaymentSettings.applyInterestOnPrepaymentMethod
#            - latePaymentsRecalculationMethod
#            - balances.redrawBalance
#            - expectedPrincipalRedraw
#            - tranches.parentAccountKey
#            - tranches.disbursementDetails.disbursementTransactionKey
#            - tranches.amount
#            - tranches.disbursementDetails.expectedDisbursementDate
#            - disbursementDetails.expectedDisbursementDate
#            - disbursementDetails.disbursementDate
#            - lastAccountAppraisalDate
#        value:
#          type: string
#          description: The value to match the searching criteria.
#        operator:
#          type: string
#          enum:
#            - EQUALS
#            - EQUALS_CASE_SENSITIVE
#            - DIFFERENT_THAN
#            - MORE_THAN
#            - LESS_THAN
#            - BETWEEN
#            - 'ON'
#            - AFTER
#            - AFTER_INCLUSIVE
#            - BEFORE
#            - BEFORE_INCLUSIVE
#            - STARTS_WITH
#            - STARTS_WITH_CASE_SENSITIVE
#            - IN
#            - TODAY
#            - THIS_WEEK
#            - THIS_MONTH
#            - THIS_YEAR
#            - LAST_DAYS
#            - EMPTY
#            - NOT_EMPTY
#        secondValue:
#          type: string
#          description: The second value to match the searching criteria, when the `BETWEEN`
#            operator is used.
#        values:
#          type: array
#          description: List of values when the `IN` operator is used.
#          items:
#            type: string
#      description: Wrapper that holds a list of filtering criteria and a sorting criteria
#        for Loan account directed query
#    GetAuthorizationHold:
#      type: object
#      required:
#        - advice
#        - amount
#        - externalReferenceId
#      properties:
#        customExpirationPeriod:
#          type: integer
#          format: int32
#          description: The custom expiration period for the hold which overwrites mcc
#            and default expiration periods
#        amount:
#          type: number
#          description: The amount of money to be held as a result of the authorization
#            hold request.
#        advice:
#          type: boolean
#          description: Whether the given request should be accepted without balance
#            validations.
#        cardAcceptor:
#          #$ref: "#/components/schemas/CardAcceptor"
#          type: object
#        source:
#          type: string
#          description: Indicates the source of the authorization hold, the default values
#            is CARD.
#          readOnly: true
#          enum:
#            - CARD
#            - ACCOUNT
#        creationDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The organization time when the authorization hold was created
#          readOnly: true
#        creditDebitIndicator:
#          type: string
#          description: Indicates whether the authorization hold amount is credited or
#            debited.If not provided, the default values is DBIT.
#          enum:
#            - DBIT
#            - CRDT
#        cardToken:
#          type: string
#          description: The reference token of the card.
#          readOnly: true
#        referenceDateForExpiration:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date to consider as start date when calculating the number
#            of days passed until expiration
#          readOnly: true
#        accountKey:
#          type: string
#          description: The key of the account linked with the authorization hold.
#          readOnly: true
#        externalReferenceId:
#          type: string
#          description: The external reference ID to be used to reference the account
#            hold in subsequent requests.
#        balances:
#          #$ref: "#/components/schemas/AccountBalances"
#          type: object
#        originalAmount:
#          type: number
#          description: The original amount of money to be held as a result of the authorization
#            hold request.
#        exchangeRate:
#          type: number
#          description: The exchange rate for the original currency.
#        encodedKey:
#          type: string
#          description: The internal ID of the authorization hold, auto generated, unique.
#          readOnly: true
#        userTransactionTime:
#          type: string
#          description: The formatted time at which the user made this authorization
#            hold.
#        originalCurrency:
#          type: string
#          description: The original currency in which the hold was created.
#        currencyCode:
#          type: string
#          description: The ISO currency code in which the hold was created. The amounts
#            are stored in the base currency, but the user could have enter it in a foreign
#            currency.
#        partial:
#          type: boolean
#          description: Indicates whether the authorization is partial or not
#        status:
#          type: string
#          description: The authorization hold status.
#          readOnly: true
#          enum:
#            - PENDING
#            - REVERSED
#            - SETTLED
#            - EXPIRED
#      description: Details for retrieving a authorization hold. Deprecated due to encodedKey
#        field.
#    RevolvingAccountSettings:
#      type: object
#      properties:
#        numberOfPreviewedInstalments:
#          type: integer
#          format: int32
#          description: The number of previewed instalments
#      description: The number of previewed instalments for an account
#    LoanTransactionFilterCriteria:
#      type: object
#      required:
#        - field
#        - operator
#      properties:
#        field:
#          type: string
#          description: |
#            Contains the actual searching fields that can be native (one from the provided list) or otherwise can specify a custom field definition using the format [customFieldSetId].[customFieldId].
#            |Field with limited capabilities          |Data Type |Operators   |
#            |-----------------------------------------|----------|------------|
#            |originalTransactionKey                   |KEY       |EQUALS, IN  |
#            |transactionDetails.transactionChannelId  |STRING    |EQUALS      |
#            |originalTransactionID                    |STRING    |EQUALS      |
#          enum:
#            - encodedKey
#            - id
#            - externalId
#            - creationDate
#            - valueDate
#            - parentAccountKey
#            - productTypeKey
#            - productID
#            - type
#            - amount
#            - originalAmount
#            - originalCurrencyCode
#            - affectedAmounts.principalAmount
#            - affectedAmounts.interestAmount
#            - affectedAmounts.fundersInterestAmount
#            - affectedAmounts.organizationCommissionAmount
#            - affectedAmounts.deferredInterestAmount
#            - affectedAmounts.feesAmount
#            - affectedAmounts.penaltyAmount
#            - taxes.taxRate
#            - accountBalances.totalBalance
#            - accountBalances.advancePosition
#            - accountBalances.arrearsPosition
#            - accountBalances.expectedPrincipalRedraw
#            - accountBalances.redrawBalance
#            - accountBalances.principalBalance
#            - userKey
#            - branchKey
#            - branchID
#            - centreKey
#            - centreID
#            - tillKey
#            - tillID
#            - adjustmentTransactionKey
#            - originalTransactionKey
#            - terms.interestSettings.interestRate
#            - transactionDetails.transactionChannelKey
#            - transactionDetails.transactionChannelId
#            - wasAdjusted
#            - typeIsAdjustment
#            - fees.predefinedFeeKey
#            - fees.trigger
#            - fees.name
#            - parentAccountID
#            - adjustmentTransactionID
#            - originalTransactionID
#        value:
#          type: string
#          description: The value to match the searching criteria.
#        operator:
#          type: string
#        secondValue:
#          type: string
#          description: The second value to match the searching criteria, when the `BETWEEN`
#            operator is used.
#        values:
#          type: array
#          description: List of values when the `IN` operator is used.
#          items:
#            type: string
#      description: The unit that composes the list used for Loan transaction client
#        directed queries searching
#    LoanTransactionSortingCriteria:
#      type: object
#      required:
#        - field
#      properties:
#        field:
#          type: string
#          description: Contains the field that can be used as sorting selection. Can
#            be native (one from the provided list) or otherwise can specify a custom
#            field using the format [customFieldSetId].[customFieldId].
#          enum:
#            - id
#            - externalId
#            - creationDate
#            - valueDate
#            - parentAccountId
#            - productId
#            - amount
#            - originalAmount
#            - originalCurrencyCode
#            - branchId
#            - centreId
#            - tillId
#            - terms.interestSettings.interestRate
#            - transactionDetails.transactionChannelId
#            - fees.name
#            - accountBalances.totalBalance
#            - accountBalances.principalBalance
#            - accountBalances.redrawBalance
#            - accountBalances.expectedPrincipalRedraw
#            - accountBalances.advancePosition
#            - accountBalances.arrearsPosition
#            - affectedAmounts.principalAmount
#            - affectedAmounts.interestAmount
#            - affectedAmounts.interestFromArrearsAmount
#            - affectedAmounts.deferredInterestAmount
#            - affectedAmounts.feesAmount
#            - affectedAmounts.penaltyAmount
#            - affectedAmounts.organizationCommissionAmount
#            - affectedAmounts.fundersInterestAmount
#            - taxes.taxRate
#        order:
#          type: string
#          description: 'The sorting order: `ASC` or `DESC`. The default order is `DESC`.'
#          enum:
#            - ASC
#            - DESC
#      description: The sorting criteria used for when searching loan transactions.
#    LoanTransactionSearchCriteria:
#      type: object
#      properties:
#        sortingCriteria:
#          #$ref: "#/components/schemas/LoanTransactionSortingCriteria"
#          type: object
#        filterCriteria:
#          type: array
#          description: The list of filtering criteria.
#          items:
#            #$ref: "#/components/schemas/LoanTransactionFilterCriteria"
#            type: object
#      description: Represents the filtering and sorting criteria when searching loan
#        transactions.
#    TransactionBalances:
#      type: object
#      properties:
#        redrawBalance:
#          type: number
#          description: The account redraw balance captured after the transaction update.
#        principalBalance:
#          type: number
#          description: The account redraw balance captured after the transaction update.
#        totalBalance:
#          type: number
#          description: The running balance still owed for the loan.
#        expectedPrincipalRedraw:
#          type: number
#          description: The difference between principal balance and redraw balance after
#            each transaction performed on the loan account.
#        advancePosition:
#          type: number
#          description: Captures the advance (prepaid) amount.
#        arrearsPosition:
#          type: number
#          description: Captures the arrears position amount for the account in arrears.
#      description: The balances changed within a transaction.
#    ErrorResponse:
#      type: object
#      properties:
#        errors:
#          type: array
#          items:
#            #$ref: "#/components/schemas/RestError"
#            type: object
#    CardTransaction:
#      type: object
#      required:
#        - advice
#        - amount
#        - externalReferenceId
#      properties:
#        externalReferenceId:
#          type: string
#          description: The external reference ID to be used to reference the card transaction
#            in subsequent requests.
#        amount:
#          type: number
#          description: The amount of money to be withdrawn in the financial transaction.
#        advice:
#          type: boolean
#          description: Whether the given request should be accepted without balance
#            validations.
#        externalAuthorizationReferenceId:
#          type: string
#          description: The external authorization hold reference ID, which relates this
#            card transaction to a previous authorization hold.
#        cardAcceptor:
#          #$ref: "#/components/schemas/CardAcceptor"
#          type: object
#        encodedKey:
#          type: string
#          description: The encoded key of the entity, generated, globally unique
#          readOnly: true
#        userTransactionTime:
#          type: string
#          description: The formatted time at which the user made this card transaction.
#        currencyCode:
#          type: string
#          description: The ISO currency code in which the card reversal transaction
#            is posted. The amounts are stored in the base currency, but the transaction
#            can be created with a foreign currency.
#        cardToken:
#          type: string
#          description: The reference token of the card.
#          readOnly: true
#      description: A card transaction entry which will have a corresponding a financial
#        transaction performed.
#    TransactionDetailsInput:
#      type: object
#      properties:
#        transactionChannelId:
#          type: string
#          description: The id of the transaction channel associated with the transaction
#            details.
#        transactionChannelKey:
#          type: string
#          description: The encoded key of the transaction channel associated with the
#            transaction details.
#      description: Contains the details about transaction including fields like transaction
#        channel key and channel ID
#    Taxes:
#      type: object
#      properties:
#        taxOnInterestFromArrearsAmount:
#          type: number
#          description: The amount of taxes on the interest from arrears that were applied/paid
#            in account, within this transaction.
#        taxOnFeesAmount:
#          type: number
#          description: How much taxes on the fees that were paid in this transaction
#            were added/removed in account, within this transaction.
#        taxRate:
#          type: number
#          description: The tax rate that was set or changed in this transaction.
#        taxOnPaymentHolidaysInterest:
#          type: number
#          description: The amount of taxes on the Payment Holidays interest that were
#            added/removed in account, within this transaction.
#        taxOnInterestAmount:
#          type: number
#          description: How much taxes on the interest that was paid in this transaction
#            were added/removed in account, within this transaction.
#        taxOnPenaltyAmount:
#          type: number
#          description: How much taxes on the penalties that were paid in this transaction
#            were added/removed in account, within this transaction.
#        deferredTaxOnInterestAmount:
#          type: number
#          description: How much taxes on the interest that was pre-paid were added/removed
#            in account, within this transaction. If there is any deferred tax on interest
#            amount set in this transaction, that amount should be included in this field.
#      description: The taxes applied within a transaction.
#    LoanTransaction:
#      type: object
#      properties:
#        migrationEventKey:
#          type: string
#          description: The migration event encoded key associated with the loan account.
#            If the account was imported, track which 'migration event' it came from.
#        transactionDetails:
#          #$ref: "#/components/schemas/TransactionDetails"
#          type: object
#        fees:
#          type: array
#          description: The amounts that have been applied or paid as part of this transaction
#            and involved predefined fees.
#          items:
#            #$ref: "#/components/schemas/Fee"
#            type: object
#        notes:
#          type: string
#          description: The notes or description for the loan transaction.
#        affectedAmounts:
#          #$ref: "#/components/schemas/LoanAffectedAmounts"
#          type: object
#        cardTransaction:
#          #$ref: "#/components/schemas/CardTransaction"
#          type: object
#        taxes:
#          #$ref: "#/components/schemas/Taxes"
#          type: object
#        tillKey:
#          type: string
#          description: The till key associated with the transaction.
#        adjustmentTransactionKey:
#          type: string
#          description: The key of the loan transaction where the adjustment for the
#            transaction was made (if any adjustment was involved).
#        type:
#          type: string
#          description: The type of loan transaction.
#          enum:
#            - IMPORT
#            - DISBURSEMENT
#            - DISBURSEMENT_ADJUSTMENT
#            - WRITE_OFF
#            - WRITE_OFF_ADJUSTMENT
#            - REPAYMENT
#            - PAYMENT_MADE
#            - WITHDRAWAL_REDRAW
#            - WITHDRAWAL_REDRAW_ADJUSTMENT
#            - FEE_APPLIED
#            - FEE_CHARGED
#            - FEE_CAPITALISED
#            - SCHEDULE_FIX_APPLIED
#            - FEES_DUE_REDUCED
#            - FEE_ADJUSTMENT
#            - PENALTY_APPLIED
#            - PENALTY_ADJUSTMENT
#            - PENALTIES_DUE_REDUCED
#            - REPAYMENT_ADJUSTMENT
#            - FEE_CAPITALISED_ADJUSTMENT
#            - PAYMENT_MADE_ADJUSTMENT
#            - INTEREST_RATE_CHANGED
#            - TAX_RATE_CHANGED
#            - PENALTY_RATE_CHANGED
#            - INTEREST_APPLIED
#            - INTEREST_APPLIED_ADJUSTMENT
#            - INTEREST_DUE_REDUCED
#            - PENALTY_REDUCTION_ADJUSTMENT
#            - FEE_REDUCTION_ADJUSTMENT
#            - INTEREST_REDUCTION_ADJUSTMENT
#            - DEFERRED_INTEREST_APPLIED
#            - DEFERRED_INTEREST_APPLIED_ADJUSTMENT
#            - DEFERRED_INTEREST_PAID
#            - DEFERRED_INTEREST_PAID_ADJUSTMENT
#            - INTEREST_LOCKED
#            - FEE_LOCKED
#            - PENALTY_LOCKED
#            - INTEREST_UNLOCKED
#            - FEE_UNLOCKED
#            - PENALTY_UNLOCKED
#            - REDRAW_TRANSFER
#            - REDRAW_REPAYMENT
#            - REDRAW_TRANSFER_ADJUSTMENT
#            - REDRAW_REPAYMENT_ADJUSTMENT
#            - TRANSFER
#            - TRANSFER_ADJUSTMENT
#            - BRANCH_CHANGED
#            - TERMS_CHANGED
#            - CARD_TRANSACTION_REVERSAL
#            - CARD_TRANSACTION_REVERSAL_ADJUSTMENT
#            - DUE_DATE_CHANGED
#            - DUE_DATE_CHANGED_ADJUSTMENT
#            - ACCOUNT_TERMINATED
#            - ACCOUNT_TERMINATED_ADJUSTMENT
#        branchKey:
#          type: string
#          description: The branch where the transaction was performed.
#        terms:
#          #$ref: "#/components/schemas/LoanTerms"
#          type: object
#        transferDetails:
#          #$ref: "#/components/schemas/TransferDetails"
#          type: object
#        parentLoanTransactionKey:
#          type: string
#          description: The key of the parent loan transaction.
#        customPaymentAmounts:
#          type: array
#          description: The list of custom amounts which the user has paid as part of
#            this transaction.
#          items:
#            #$ref: "#/components/schemas/CustomPaymentAmount"
#            type: object
#        encodedKey:
#          type: string
#          description: The encoded key of the loan transaction, which is auto generated,
#            and must be unique.
#        currency:
#          #$ref: "#/components/schemas/Currency"
#          type: object
#        id:
#          type: string
#          description: The ID of the loan transaction, can be generated and customized,
#            and must be unique.
#        originalCurrencyCode:
#          type: string
#          description: The currency in which this transaction was posted. The amounts
#            are stored in the base currency, but the user may enter it in a foreign
#            currency.
#        originalTransactionKey:
#          type: string
#          description: The encoded key of the transaction that was adjusted as part
#            of this one. Available only for adjustment transactions.
#        amount:
#          type: number
#          description: The amount that was added or removed on the loan account.
#        centreKey:
#          type: string
#          description: The center where the transaction was performed.
#        externalId:
#          type: string
#          description: The external ID of the loan transaction, it is customizable,
#            and must be unique.
#        valueDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date of the entry in the organization time format and timezone.
#        creationDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date when this loan transaction was created.
#        userKey:
#          type: string
#          description: The user that performed the transaction.
#        parentAccountKey:
#          type: string
#          description: The key of the parent loan account.
#        originalAmount:
#          type: number
#          description: The amount that was posted in a foreign currency. This amount
#            was converted using the exchange rate available at entry date and set into
#            the amount field.
#        accountBalances:
#          #$ref: "#/components/schemas/TransactionBalances"
#          type: object
#        bookingDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date when the corresponding journal entry is booked.
#        prepaymentRecalculationMethod:
#          type: string
#          description: The prepayment recalculation method of the loan transaction.
#          enum:
#            - NO_RECALCULATION
#            - RESCHEDULE_REMAINING_REPAYMENTS
#            - RECALCULATE_SCHEDULE_KEEP_SAME_NUMBER_OF_TERMS
#            - RECALCULATE_SCHEDULE_KEEP_SAME_PRINCIPAL_AMOUNT
#            - RECALCULATE_SCHEDULE_KEEP_SAME_TOTAL_REPAYMENT_AMOUNT
#            - REDUCE_AMOUNT_PER_INSTALLMENT
#            - REDUCE_NUMBER_OF_INSTALLMENTS
#            - REDUCE_NUMBER_OF_INSTALLMENTS_NEW
#        installmentEncodedKey:
#          type: string
#          description: The specific installment encoded key associated to the loan transaction.
#      description: Represents the action performed on a loan account after which the
#        account's amount changes its value.
#    FeeInput:
#      type: object
#      required:
#        - predefinedFeeKey
#      properties:
#        amount:
#          type: number
#          description: The amount of the fee to apply
#        predefinedFeeKey:
#          type: string
#          description: The encoded key of the predefined fee
#        percentage:
#          type: number
#          description: The percentage of the fee to apply
#      description: An amount of predefined fee to apply on account.
#    CustomPredefinedFee:
#      type: object
#      properties:
#        predefinedFeeEncodedKey:
#          type: string
#          description: The encoded key of the predefined fee
#        encodedKey:
#          type: string
#          description: The encoded key of the custom predefined fee, auto generated,
#            unique.
#          readOnly: true
#        amount:
#          type: number
#          description: The amount of the custom fee.
#        percentage:
#          type: number
#          description: The percentage of the custom fee.
#      description: The custom predefined fees, they may be used as the expected predefined
#        fees that will be applied on the disbursement.
#    InstallmentFeeDetails:
#      type: object
#      properties:
#        name:
#          type: string
#          description: The name of the fee
#        amount:
#          #$ref: "#/components/schemas/AmountWithReduced"
#          type: object
#        tax:
#          #$ref: "#/components/schemas/AmountWithReduced"
#          type: object
#        encodedKey:
#          type: string
#          description: The encoded key of the predefined fee, auto generated, unique
#          readOnly: true
#        id:
#          type: string
#          description: The id of the fee, provided by the client
#      description: Represents fee details for an installment.
#    AccountInterestRateSettings:
#      type: object
#      required:
#        - interestRateSource
#        - validFrom
#      properties:
#        interestRateReviewUnit:
#          type: string
#          description: Interest rate review frequency measurement unit. Valid only for
#            index interest rate.
#          enum:
#            - DAYS
#            - WEEKS
#            - MONTHS
#        interestRate:
#          type: number
#          description: Interest rate value.
#        interestSpread:
#          type: number
#          description: Interest spread value.
#        interestRateSource:
#          type: string
#          description: 'Interest calculation method: fixed or indexed(interest spread
#            + active organization index interest rate)'
#          enum:
#            - FIXED_INTEREST_RATE
#            - INDEX_INTEREST_RATE
#        interestRateReviewCount:
#          type: integer
#          format: int32
#          description: Interest rate review frequency unit count. Valid only for index
#            interest rate.
#        indexSourceKey:
#          type: string
#          description: Index rate source key.
#        interestRateCeilingValue:
#          type: number
#          description: Maximum value allowed for index based interest rate. Valid only
#            for index interest rate.
#        encodedKey:
#          type: string
#          description: The encoded key of the interest rate settings, auto generated,
#            unique
#          readOnly: true
#        validFrom:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: Date since an interest rate is valid
#        interestRateFloorValue:
#          type: number
#          description: Minimum value allowed for index based interest rate. Valid only
#            for index interest rate.
#      description: Adjustable interest rates settings for loan account
#    LoanAccountSchedule:
#      type: object
#      properties:
#        installments:
#          type: array
#          description: The loan account schedule installments list.
#          items:
#            #$ref: "#/components/schemas/Installment"
#            type: object
#        currency:
#          #$ref: "#/components/schemas/Currency"
#          type: object
#      description: Represents a single loan account schedule structure.
#    RestError:
#      type: object
#      properties:
#        errorCode:
#          type: integer
#          format: int32
#        errorSource:
#          type: string
#        errorReason:
#          type: string
#    Currency:
#      type: object
#      properties:
#        currencyCode:
#          type: string
#          description: Currency code for NON_FIAT currency.
#        code:
#          type: string
#          description: Fiat(ISO-4217) currency code or NON_FIAT for non fiat currencies.
#          enum:
#            - AED
#            - AFN
#            - ALL
#            - AMD
#            - ANG
#            - AOA
#            - ARS
#            - AUD
#            - AWG
#            - AZN
#            - BAM
#            - BBD
#            - BDT
#            - BGN
#            - BHD
#            - BIF
#            - BMD
#            - BND
#            - BOB
#            - BOV
#            - BRL
#            - BSD
#            - BTN
#            - BWP
#            - BYR
#            - BYN
#            - BZD
#            - CAD
#            - CDF
#            - CHE
#            - CHF
#            - CHW
#            - CLF
#            - CLP
#            - CNY
#            - COP
#            - COU
#            - CRC
#            - CUC
#            - CUP
#            - CVE
#            - CZK
#            - DJF
#            - DKK
#            - DOP
#            - DZD
#            - EGP
#            - ERN
#            - ETB
#            - EUR
#            - FJD
#            - FKP
#            - GBP
#            - GEL
#            - GHS
#            - GIP
#            - GMD
#            - GNF
#            - GTQ
#            - GYD
#            - HKD
#            - HNL
#            - HRK
#            - HTG
#            - HUF
#            - IDR
#            - ILS
#            - INR
#            - IQD
#            - IRR
#            - ISK
#            - JMD
#            - JOD
#            - JPY
#            - KES
#            - KGS
#            - KHR
#            - KMF
#            - KPW
#            - KRW
#            - KWD
#            - KYD
#            - KZT
#            - LAK
#            - LBP
#            - LKR
#            - LRD
#            - LSL
#            - LTL
#            - LVL
#            - LYD
#            - MAD
#            - MDL
#            - MGA
#            - MKD
#            - MMK
#            - MNT
#            - MOP
#            - MRO
#            - MRU
#            - MUR
#            - MVR
#            - MWK
#            - MXN
#            - MXV
#            - MYR
#            - MZN
#            - NAD
#            - NGN
#            - NIO
#            - NOK
#            - NPR
#            - NZD
#            - OMR
#            - PAB
#            - PEN
#            - PGK
#            - PHP
#            - PKR
#            - PLN
#            - PYG
#            - QAR
#            - RON
#            - RSD
#            - RUB
#            - RWF
#            - SAR
#            - SBD
#            - SCR
#            - SDG
#            - SEK
#            - SGD
#            - SHP
#            - SLL
#            - SOS
#            - SRD
#            - STD
#            - STN
#            - SVC
#            - SYP
#            - SZL
#            - THB
#            - TJS
#            - TMT
#            - TND
#            - TOP
#            - TRY
#            - TTD
#            - TWD
#            - TZS
#            - UAH
#            - UGX
#            - USD
#            - USN
#            - UYI
#            - UYU
#            - UYW
#            - UZS
#            - VED
#            - VEF
#            - VES
#            - VND
#            - VUV
#            - WST
#            - XAG
#            - XAU
#            - XAF
#            - XBA
#            - XBB
#            - XBC
#            - XBD
#            - XCD
#            - XDR
#            - XOF
#            - XPD
#            - XPF
#            - XPT
#            - XSU
#            - XTS
#            - XUA
#            - XXX
#            - YER
#            - ZAR
#            - ZIG
#            - ZMK
#            - ZWL
#            - ZMW
#            - SSP
#            - NON_FIAT
#      description: Represents a currency eg. USD, EUR.
#    InstallmentAllocationElementAmount:
#      type: object
#      properties:
#        amount:
#          #$ref: "#/components/schemas/Amount"
#          type: object
#      description: Represents an installment allocation element amount structure.
#    PatchOperation:
#      type: object
#      required:
#        - op
#        - path
#      properties:
#        op:
#          type: string
#          description: The change to perform
#          enum:
#            - ADD
#            - REPLACE
#            - REMOVE
#            - MOVE
#        path:
#          type: string
#          description: The field to perform the operation on
#        from:
#          type: string
#          description: The field from where a value should be moved, when using move
#        value:
#          type: object
#          description: The value of the field, can be null
#      description: A single change that needs to be made to a resource
#    PatchOperationsList:
#      type: array
#      items:
#        #$ref: "#/components/schemas/PatchOperation"
#        type: object
#    FeeAmount:
#      type: object
#      properties:
#        paid:
#          type: number
#          description: The paid amount.
#        due:
#          type: number
#          description: The due amount.
#        expected:
#          type: number
#          description: The expected amount, which is sum of paid and due amounts.
#        expectedUnapplied:
#          type: number
#          description: The expected amount, which is the sum of unapplied fee and planned
#            fee due amounts.
#      description: Represents a fee amount.
#    Installment:
#      type: object
#      properties:
#        penalty:
#          #$ref: "#/components/schemas/InstallmentAllocationElementTaxableAmount"
#          type: object
#        dueDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The installment due date.
#        fee:
#          #$ref: "#/components/schemas/InstallmentFee"
#          type: object
#        expectedClosingBalance:
#          type: number
#          description: The expected closing balance is the remaining amount per installment
#            only applicable for interest only equal installment products.
#        repaidDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The installment repaid date.
#        principal:
#          #$ref: "#/components/schemas/InstallmentAllocationElementAmount"
#          type: object
#        number:
#          type: string
#          description: The order number of an installment among all the installments
#            generated for a loan. Loan installments are put in ascending order by due
#            date. The order number only applies to the content of a particular JSON
#            response therefore it is not unique.
#        lastPaidDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The installment last paid date.
#        parentAccountKey:
#          type: string
#          description: The parent account key of the installment.
#        interest:
#          #$ref: "#/components/schemas/InstallmentAllocationElementTaxableAmount"
#          type: object
#        feeDetails:
#          type: array
#          description: The breakdown of the fee amounts that have been applied to the
#            loan account.
#          items:
#            #$ref: "#/components/schemas/InstallmentFeeDetails"
#            type: object
#        encodedKey:
#          type: string
#          description: The encoded key of the installment, which is auto generated,
#            and unique.
#          readOnly: true
#        state:
#          type: string
#          description: The installment state.
#          enum:
#            - PENDING
#            - LATE
#            - PAID
#            - PARTIALLY_PAID
#            - GRACE
#        isPaymentHoliday:
#          type: boolean
#          description: "`TRUE` if a payment holiday is offered for the installment,
#            `FALSE` otherwise."
#        interestAccrued:
#          type: number
#          description: The interest accrued calculated on previous repayment closing
#            balance only applicable interest only equal installment products.
#      description: Represents a single installment details structure.
#    InstallmentFee:
#      type: object
#      properties:
#        amount:
#          #$ref: "#/components/schemas/FeeAmount"
#          type: object
#        tax:
#          #$ref: "#/components/schemas/Amount"
#          type: object
#      description: Represents an installment fee structure.
#    Amount:
#      type: object
#      properties:
#        paid:
#          type: number
#          description: The paid amount.
#        due:
#          type: number
#          description: The due amount.
#        expected:
#          type: number
#          description: The expected amount, which is sum of paid and due amounts.
#      description: Represents a simple installment amount structure.
#    AmountWithReduced:
#      type: object
#      properties:
#        paid:
#          type: number
#          description: The paid amount.
#        reduced:
#          type: number
#          description: The reduced amount.
#        due:
#          type: number
#          description: The due amount.
#        expected:
#          type: number
#          description: The expected amount, which is sum of paid and due amounts.
#      description: Represents a simple installment amount structure.
#    LoanTranche:
#      type: object
#      required:
#        - amount
#      properties:
#        encodedKey:
#          type: string
#          description: The encoded key of the transaction details , auto generated,
#            unique.
#          readOnly: true
#        amount:
#          type: number
#          description: The amount this tranche has available for disburse
#        fees:
#          type: array
#          description: Fees that are associated with this tranche
#          items:
#            #$ref: "#/components/schemas/CustomPredefinedFee"
#            type: object
#        disbursementDetails:
#          #$ref: "#/components/schemas/TrancheDisbursementDetails"
#          type: object
#        trancheNumber:
#          type: integer
#          format: int32
#          description: Index indicating the tranche number
#      description: 'In some cases organizations may approve loans but not disburse the
#        full amount initially. They would like to spread the disbursement (and risk)
#        over time. Likewise for the client, they may not need the full loan amount up
#        front. They may want to have a loan to buy some equipment for their business
#        but will make one purchase today and another purchase in a few months.  In these
#        cases, they don''t need the full amount and wouldn''t want to pay interest on
#        cash they don''t need yet. A solution for this matter is the usage of disbursement
#        in tranches. This class holds the information required for one of this tranche. '
#    TrancheDisbursementDetails:
#      type: object
#      properties:
#        expectedDisbursementDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date when this tranche is supposed to be disbursed (as Organization
#            Time)
#        disbursementTransactionKey:
#          type: string
#          description: The key of the disbursement transaction logged when this tranche
#            was disbursed. This field will be null until the tranche disbursement
#      description: The disbursement details regarding a loan tranche.
#    PlannedInstallmentFee:
#      type: object
#      required:
#        - predefinedFeeKey
#      properties:
#        installmentNumber:
#          type: integer
#          format: int32
#          description: The number of the installment on which the predefined fee is
#            planned. It is used only in the case when fees are created at the same time
#            with the loan account creation or during preview schedule, before account
#            creation, otherwise this should be empty and installmentKey will be used
#            to identify an installment.
#        amount:
#          type: number
#          description: The amount of the planned fee.
#        applyOnDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date when a planned fee should be applied, overriding installment's
#            due date. It should match the interval of the installment. If it belong
#            to first installment, it should be between disbursement date and installment
#            due date.
#        predefinedFeeKey:
#          type: string
#          description: The encoded key of the predefined fee which is planned.
#        encodedKey:
#          type: string
#          description: The encoded key of the planned installment fee, auto generated,
#            unique.
#          readOnly: true
#        installmentKey:
#          type: string
#          description: The encoded key of the installment on which the predefined fee
#            is planned.
#      description: The planned fee details holds the information related to the installment
#        key, predefined fee key and amount
#    InstallmentAllocationElementTaxableAmount:
#      type: object
#      properties:
#        amount:
#          #$ref: "#/components/schemas/Amount"
#          type: object
#        tax:
#          #$ref: "#/components/schemas/Amount"
#          type: object
#      description: Represents an installment allocation element taxable amount structure.
#    PMTAdjustmentThreshold:
#      type: object
#      properties:
#        method:
#          type: string
#          description: The method used to calculate the PMT Adjustment threshold. Supported
#            value is CALENDAR_DAYS
#          enum:
#            - WORKING_DAYS
#            - CALENDAR_DAYS
#        numberOfDays:
#          type: integer
#          format: int32
#          description: The number of days that trigger a PMT Adjustment.
#      description: Represents PMT Adjustment threshold settings for loan accounts and
#        loan products.
#    DaysInMonth:
#      type: object
#      properties:
#        daysInMonth:
#          type: array
#          description: " Specifies the day(s) of the month when the interest application
#                dates should be. Only available if the Interest Application Method is InterestApplicationMethodDTO#FIXED_DAYS_OF_MONTH.
#                Currently only 1 value can be specified."
#          items:
#            type: integer
#            format: int32
#        shortMonthHandlingMethod:
#          type: string
#          description: Determines how to handle the short months, if they select a fixed
#            day of month > 28. Will be null if no such date is selected. Only available
#            if the Interest Application Method is InterestApplicationMethodDTO#FIXED_DAYS_OF_MONTH.
#          enum:
#            - LAST_DAY_IN_MONTH
#            - FIRST_DAY_OF_NEXT_MONTH
#      description: Enumeration for days of month and method of handling shorter months.
#    TransactionDetails:
#      type: object
#      properties:
#        transactionChannelId:
#          type: string
#          description: The id of the transaction channel associated with the transaction
#            details.
#        transactionChannelKey:
#          type: string
#          description: The encoded key of the transaction channel associated with the
#            transaction details.
#      description: Contains the details about transaction including fields like transaction
#        channel key and channel id
#    CardAcceptor:
#      type: object
#      properties:
#        zip:
#          type: string
#          description: The ZIP code of the location in which the card acceptor has the
#            business.
#        country:
#          type: string
#          description: The country in which the card acceptor has the business.
#        city:
#          type: string
#          description: The city in which the card acceptor has the business.
#        street:
#          type: string
#          description: The street in which the card acceptor has the business.
#        name:
#          type: string
#          description: The name of the card acceptor.
#        state:
#          type: string
#          description: The state in which the card acceptor has the business.
#        mcc:
#          type: integer
#          format: int32
#          description: The Merchant Category Code of the card acceptor.
#      description: The details of the card acceptor (merchant) in a transaction hold.
#    CustomPaymentAmount:
#      type: object
#      required:
#        - amount
#        - customPaymentAmountType
#      properties:
#        taxOnAmount:
#          type: number
#          description: The amount of the taxes paid in the transaction for the given
#            type.
#        amount:
#          type: number
#          description: The amount of the payment paid in the transaction for the given
#            type.
#        predefinedFeeKey:
#          type: string
#          description: The encodedKey of the predefined fee to be paid.
#        customPaymentAmountType:
#          type: string
#          description: The type of the custom payment
#          enum:
#            - PRINCIPAL
#            - INTEREST
#            - MANUAL_FEE
#            - UPFRONT_DISBURSEMENT_FEE
#            - LATE_REPAYMENT_FEE
#            - PAYMENT_DUE_FEE
#            - PENALTY
#      description: Custom payment amount for a specific element type
#    Fee:
#      type: object
#      required:
#        - predefinedFeeKey
#      properties:
#        name:
#          type: string
#          description: The name of the predefined fee
#          readOnly: true
#        amount:
#          type: number
#          description: The amount of the fee that was applied/paid in the transaction
#            for the given predefined fee.
#        trigger:
#          type: string
#          description: Shows the event that will trigger a fee
#          readOnly: true
#          enum:
#            - MANUAL
#            - MANUAL_PLANNED
#            - DISBURSEMENT
#            - CAPITALIZED_DISBURSEMENT
#            - UPFRONT_DISBURSEMENT
#            - LATE_REPAYMENT
#            - PAYMENT_DUE
#            - PAYMENT_DUE_APPLIED_ON_DUE_DATES
#            - ARBITRARY
#            - IOF
#            - EARLY_REPAYMENT_CHARGE
#        taxAmount:
#          type: number
#          description: The amount of the taxes on fee that was applied/paid in the transaction.
#        predefinedFeeKey:
#          type: string
#          description: The encoded key of the predefined fee, auto generated, unique
#      description: An amount of predefined fee that was applied or paid on an account.
#    LoanAffectedAmounts:
#      type: object
#      properties:
#        feesAmount:
#          type: number
#          description: " How much fees was added/removed in account, within this transaction."
#        fundersInterestAmount:
#          type: number
#          description: How much interest is given to the investors, within this transaction
#            (only for p2p products)
#        organizationCommissionAmount:
#          type: number
#          description: How much interest is given to the organization, within this transaction
#            (only for p2p products)
#        deferredInterestAmount:
#          type: number
#          description: How much interest pre-paid was added/removed in account, within
#            this transaction (including taxes).
#        interestAmount:
#          type: number
#          description: How much interest was added/removed in account, within this transaction
#            (including taxes). If there is any deferred interest amount set in this
#            transaction, that amount should be included in this field.
#        paymentHolidaysInterestAmount:
#          type: number
#          description: How much Payment Holidays interest was added/removed in account,
#            within this transaction (including taxes).
#        penaltyAmount:
#          type: number
#          description: How much penalties was added/removed in account, within this
#            transaction.
#        principalAmount:
#          type: number
#          description: How much principal was added/removed in account, within this
#            transaction.
#        interestFromArrearsAmount:
#          type: number
#          description: How much interest from arrears was added/removed in account,
#            within this transaction (including taxes).
#      description: The amounts affected after completing the loan transaction
#    LoanTerms:
#      type: object
#      properties:
#        interestSettings:
#          #$ref: "#/components/schemas/TransactionInterestSettings"
#          type: object
#        periodicPayment:
#          type: number
#          description: The periodic payment value logged when changing it for a Balloon
#            Payments account
#        principalPaymentAmount:
#          type: number
#          description: The principal payment flat amount logged when changing it for
#            a Revolving Credit account
#        principalPaymentPercentage:
#          type: number
#          description: The principal payment percentage value logged when changing it
#            for a Revolving Credit account
#      description: The loan transaction terms
#    TransferDetails:
#      type: object
#      properties:
#        linkedLoanTransactionKey:
#          type: string
#          description: The key of the related loan transaction
#        linkedDepositTransactionKey:
#          type: string
#          description: The key of the related deposit transaction
#      description: Represents the transfer details, such as the linked transaction key
#    TransactionInterestSettings:
#      type: object
#      properties:
#        interestRate:
#          type: number
#          description: The interest rate. Represents the interest rate for the loan
#            account. The interest on loans is accrued on a daily basis, which allows
#            charging the clients only for the days they actually used the loan amount.
#        indexInterestRate:
#          type: number
#          description: The value of the index interest rate
#      description: The interest settings, holds all the properties regarding interests
#        for the loan account.
#    Address:
#      type: object
#      properties:
#        country:
#          type: string
#          description: The country.
#        parentKey:
#          type: string
#          description: >-
#            The address parent key indicating the object owning this address. For
#            example: client, centre, or branch.
#          readOnly: true
#        city:
#          type: string
#          description: The city for the address.
#        latitude:
#          type: number
#          description: >-
#            The GPS latitude of this address in signed degrees format (DDD.dddd)
#            with 6 decimal positions, ranging from -90 to +90.
#        postcode:
#          type: string
#          description: The post code.
#        indexInList:
#          type: integer
#          format: int32
#          description: The index of this address in the list of addresses.
#        encodedKey:
#          type: string
#          description: 'The address encoded key, which is unique and generated.'
#          readOnly: true
#        region:
#          type: string
#          description: The region for the address.
#        line2:
#          type: string
#          description: The second line of the address.
#        line1:
#          type: string
#          description: The first line of the address.
#        longitude:
#          type: number
#          description: >-
#            The GPS longitude of this address in signed degrees format (DDD.dddd)
#            with 6 decimal positions, ranging from -180 to +180.
#      description: Represents an address.
#    PortalSettings:
#      type: object
#      properties:
#        encodedKey:
#          type: string
#          description: 'The encoded key of the entity, generated, globally unique'
#          readOnly: true
#        portalState:
#          type: string
#          description: The state of the client's portal preferences.
#          enum:
#            - ENABLED
#            - DISABLED
#        lastLoggedInDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The last date the client logged in to the portal.
#      description: Represents portal settings for an individual client.
#    ClientRole:
#      type: object
#      properties:
#        clientType:
#          type: string
#          description: The type of the client for which this role was created.
#          enum:
#            - CLIENT
#            - GROUP
#        requireID:
#          type: boolean
#          description: >-
#            `TRUE` if identification documents must be provided for the client to
#            be created, `FALSE` otherwise. Does not apply for groups.
#        canGuarantee:
#          type: boolean
#          description: >-
#            `TRUE` if clients with this client role can be used as guarantors,
#            `FALSE` otherwise.
#        useDefaultAddress:
#          type: boolean
#          description: >-
#            `TRUE` if the Mambu default address section is available, `FALSE`
#            otherwise.
#        name:
#          type: string
#          description: The name of the client role.
#        canOpenAccounts:
#          type: boolean
#          description: >-
#            `TRUE` if new accounts for this client type can be created, `FALSE`
#            otherwise.
#        description:
#          type: string
#          description: The text description for this client role.
#        encodedKey:
#          type: string
#          description: 'The encoded key of the client, which is unique and generated.'
#          readOnly: true
#        id:
#          type: string
#          description: >-
#            The ID of the client role, which can be generated and customized - but
#            must be unique.
#        creationDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The creation date of the client role.
#          readOnly: true
#        idPattern:
#          type: string
#          description: The pattern used in generating the client ID.
#      description: Represents a client or group role.
#    IdentificationDocument:
#      type: object
#      required:
#        - documentId
#        - documentType
#      properties:
#        identificationDocumentTemplateKey:
#          type: string
#          description: Encoded key of the template used for this document
#        issuingAuthority:
#          type: string
#          description: 'Authority that issued the document, eg. Police'
#        attachments:
#          type: array
#          description: >-
#            A list containing information about the attached files for this
#            document
#          items:
#            #$ref: '#/components/schemas/Document'
#            type: object
#        clientKey:
#          type: string
#          description: The encoded key of the client that owns this document
#          readOnly: true
#        documentType:
#          type: string
#          description: 'The type of the document, Passport, Id card Drivers license, etc.'
#        indexInList:
#          type: integer
#          format: int32
#          description: This document's index in the list of documents
#        validUntil:
#          type: string
#          format: date
#          example: '1987-04-26'
#          description: Date when the validity of the document ends
#        encodedKey:
#          type: string
#          description: 'The encoded key of the document, generated, unique'
#          readOnly: true
#        documentId:
#          type: string
#          description: The id of the document
#      description: >-
#        An Id document represents a document that can be used to identify a person
#        like a passport, a drivers license an id card etc.
#    ClientSearchCriteria:
#      type: object
#      required:
#        - filterCriteria
#      properties:
#        sortingCriteria:
#          #$ref: '#/components/schemas/ClientSortingCriteria'
#          type: object
#        filterCriteria:
#          type: array
#          description: The list of filtering criteria
#          items:
#            #$ref: '#/components/schemas/ClientFilterCriteria'
#            type: object
#      description: >-
#        Wrapper that holds a list of filtering criteria and a sorting criteria for
#        clients
#    ClientSortingCriteria:
#      type: object
#      required:
#        - field
#      properties:
#        field:
#          type: string
#          description: >-
#            The field to sort by. It can be native (one from the provided list) or
#            otherwise can specify a custom field definition using the format
#            [customFieldSetId].[customFieldId].
#          enum:
#            - encodedKey
#            - id
#            - fullName
#            - firstName
#            - middleName
#            - lastName
#            - creationDate
#            - lastModifiedDate
#            - depositsBalance
#            - loansBalance
#            - pendingLoanAmount
#            - approvedLoanAmount
#            - totalBalance
#            - totalDue
#            - homePhoneNumber
#            - mobilePhoneNumber
#            - mobilePhoneNumber2
#            - emailAddress
#            - birthdate
#            - loanCycle
#            - groupLoanCycle
#            - portalState
#        order:
#          type: string
#          description: 'The sorting order: `ASC` or `DESC`. The default order is `DESC`.'
#          enum:
#            - ASC
#            - DESC
#      description: The sorting criteria used for Clients
#    Document:
#      type: object
#      required:
#        - id
#        - name
#        - type
#      properties:
#        ownerType:
#          type: string
#          description: Determines the owner type of the document
#          readOnly: true
#          enum:
#            - CLIENT
#            - GROUP
#            - LOAN_PRODUCT
#            - SAVINGS_PRODUCT
#            - CENTRE
#            - BRANCH
#            - USER
#            - LOAN_ACCOUNT
#            - DEPOSIT_ACCOUNT
#            - ID_DOCUMENT
#            - LINE_OF_CREDIT
#            - GL_JOURNAL_ENTRY
#        fileName:
#          type: string
#          description: The original file name of the document
#        notes:
#          type: string
#          description: Detailed notes about the document
#        lastModifiedDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: 'The last modified date of the document, stored as UTC'
#          readOnly: true
#        creationDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: 'The creation date of the document, stored as UTC'
#          readOnly: true
#        type:
#          type: string
#          description: The extension of the document
#        ownerKey:
#          type: string
#          description: >-
#            Represents the holder of this document. If null, means nobody is the
#            owner of this document
#          readOnly: true
#        fileSize:
#          type: integer
#          format: int64
#          description: The file size of the document
#        name:
#          type: string
#          description: The name of the document
#        encodedKey:
#          type: string
#          description: The document encodedKey
#          readOnly: true
#        location:
#          type: string
#          description: 'Location where the document can be found, eg /myfiles/mypicture.jpeg'
#        id:
#          type: integer
#          format: int64
#          description: The document id
#      description: Holds information regarding the documents uploaded as attachments
#    ClientFilterCriteria:
#      type: object
#      required:
#        - field
#        - operator
#      properties:
#        field:
#          type: string
#          description: >
#            The fields to perform the search. They can be native (one from the
#            provided list) or otherwise can specify a custom field definition
#            using the format [customFieldSetId].[customFieldId].
#          enum:
#            - encodedKey
#            - creditOfficerKey
#            - clientRoleKey
#            - branchKey
#            - centreKey
#            - groupKey
#            - fullName
#            - firstName
#            - middleName
#            - lastName
#            - creationDate
#            - lastModifiedDate
#            - id
#            - depositsBalance
#            - loansBalance
#            - pendingLoanAmount
#            - approvedLoanAmount
#            - totalBalance
#            - totalDue
#            - homePhoneNumber
#            - mobilePhoneNumber
#            - mobilePhoneNumber2
#            - emailAddress
#            - clientAddress
#            - birthdate
#            - gender
#            - loanCycle
#            - groupLoanCycle
#            - clientState
#            - portalState
#            - preferredLanguage
#            - groupId
#        value:
#          type: string
#          description: The value to match the searching criteria.
#        operator:
#          type: string
#          description: "| **Operator**                | **Affected values**  | **Available for**                                                    |\n|---------------               |----------------------|----------------------------------------------------------------------|\n| EQUALS                       | ONE_VALUE            | BIG_DECIMAL,BOOLEAN,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY        |\n| EQUALS_CASE_SENSITIVE        | ONE_VALUE            | BIG_DECIMAL,BOOLEAN,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY \t\t  |\n| MORE_THAN                    | ONE_VALUE            | BIG_DECIMAL,NUMBER,MONEY                                             |\n| LESS_THAN                    | ONE_VALUE            | BIG_DECIMAL,NUMBER,MONEY                                             |\n| BETWEEN                      | TWO_VALUES           | BIG_DECIMAL,NUMBER,MONEY,DATE,DATE_TIME                              |\n| ON                           | ONE_VALUE            | DATE,DATE_TIME                                                       |\n| AFTER                        | ONE_VALUE            | DATE,DATE_TIME                                                       |\n| BEFORE                       | ONE_VALUE            | DATE,DATE_TIME                                                       |\n| BEFORE_INCLUSIVE             | ONE_VALUE            | DATE,DATE_TIME                                                       |\n| STARTS_WITH                  | ONE_VALUE            | STRING                                                               |\n| STARTS_WITH_CASE_SENSITIVE   | ONE_VALUE            | STRING                                                               |\n| IN                           | LIST                 | ENUM,KEY                                                             |\n| TODAY                        | NO_VALUE             | DATE,DATE_TIME                                                       |\n| THIS_WEEK                    | NO_VALUE             | DATE,DATE_TIME                                                       |\n| THIS_MONTH                   | NO_VALUE             | DATE,DATE_TIME                                                       |\n| THIS_YEAR                    | NO_VALUE             | DATE,DATE_TIME                                                       |\n| LAST_DAYS                    | ONE_VALUE            | NUMBER                                                               |\n| EMPTY                        | NO_VALUE             | BIG_DECIMAL,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY,DATE,DATE_TIME |\n| NOT_EMPTY                    | NO_VALUE             | BIG_DECIMAL,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY,DATE,DATE_TIME |"
#          enum:
#            - EQUALS
#            - EQUALS_CASE_SENSITIVE
#            - DIFFERENT_THAN
#            - MORE_THAN
#            - LESS_THAN
#            - BETWEEN
#            - 'ON'
#            - AFTER
#            - AFTER_INCLUSIVE
#            - BEFORE
#            - BEFORE_INCLUSIVE
#            - STARTS_WITH
#            - STARTS_WITH_CASE_SENSITIVE
#            - IN
#            - TODAY
#            - THIS_WEEK
#            - THIS_MONTH
#            - THIS_YEAR
#            - LAST_DAYS
#            - EMPTY
#            - NOT_EMPTY
#        secondValue:
#          type: string
#          description: >-
#            The second value to match the searching criteria, when the `BETWEEN`
#            operator is used.
#        values:
#          type: array
#          description: List of values when the `IN` operator is used.
#          items:
#            type: string
#      description: The unit that composes the list used for Clients searching
#    CreditArrangement:
#      type: object
#      required:
#        - amount
#        - expireDate
#        - holderType
#        - startDate
#      properties:
#        availableCreditAmount:
#          type: number
#          description: The available amount of the credit arrangement.
#          readOnly: true
#        amount:
#          type: number
#          description: The maximum credit amount the client can be exposed to.
#        notes:
#          type: string
#          description: The notes or description of the credit arrangement.
#        lastModifiedDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The last date when the credit arrangement was modified.
#          readOnly: true
#        holderKey:
#          type: string
#          description: >-
#            The encoded key of the credit arrangement holder (individual client or
#            group).
#        consumedCreditAmount:
#          type: number
#          description: >-
#            The consumed amount of the credit arrangement, which is calculated as
#            the difference between the amount and available amount.
#          readOnly: true
#        creationDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date when the credit arrangement was created.
#          readOnly: true
#        approvedDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date when the credit arrangement was approved.
#          readOnly: true
#        subState:
#          type: string
#          description: The substate of credit arrangement.
#          readOnly: true
#          enum:
#            - PENDING_APPROVAL
#            - APPROVED
#            - ACTIVE
#            - CLOSED
#            - WITHDRAWN
#            - REJECTED
#        closedDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date when the credit arrangement was closed.
#          readOnly: true
#        exposureLimitType:
#          type: string
#          description: >-
#            The type of exposure limit calculation method used for the credit
#            arrangement.
#          enum:
#            - APPROVED_AMOUNT
#            - OUTSTANDING_AMOUNT
#        encodedKey:
#          type: string
#          description: >-
#            The encoded key of the credit arrangement, it is auto generated, and
#            unique.
#          readOnly: true
#        expireDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date when the credit arrangement expires.
#        currency:
#          #$ref: '#/components/schemas/Currency'
#          type: object
#        id:
#          type: string
#          description: >-
#            The ID of credit arrangement, can be generated and customized, and
#            must be unique.
#        state:
#          type: string
#          description: The state of the credit arrangement.
#          readOnly: true
#          enum:
#            - PENDING_APPROVAL
#            - APPROVED
#            - ACTIVE
#            - CLOSED
#            - WITHDRAWN
#            - REJECTED
#        holderType:
#          type: string
#          description: >-
#            The type of the credit arrangement holder (individual client or
#            group).
#          enum:
#            - CLIENT
#            - GROUP
#        startDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The start date from which the credit arrangement became active.
#      description: Represents a credit arrangement.
#    Client:
#      type: object
#      properties:
#        lastName:
#          type: string
#          description: 'The last name, surname, or family name of the client.'
#        migrationEventKey:
#          type: string
#          description: The migration event encoded key associated with a client.
#          readOnly: true
#        preferredLanguage:
#          type: string
#          description: >-
#            The client's preferred language. This will determine the language for
#            the reports, schedules, and account statements you generate for the
#            client.
#          enum:
#            - ENGLISH
#            - PORTUGESE
#            - SPANISH
#            - RUSSIAN
#            - FRENCH
#            - GEORGIAN
#            - CHINESE
#            - INDONESIAN
#            - ROMANIAN
#            - BURMESE
#            - GERMAN
#            - PORTUGUESE_BRAZIL
#            - VIETNAMESE
#            - ITALIAN
#            - THAI
#            - NORWEGIAN
#            - PHRASE
#        addresses:
#          type: array
#          description: The addresses associated with this client.
#          items:
#            #$ref: '#/components/schemas/Address'
#            type: object
#        notes:
#          type: string
#          description: The additional notes about a client.
#        gender:
#          type: string
#          description: 'The client''s gender, the options are male or female.'
#          enum:
#            - MALE
#            - FEMALE
#        groupKeys:
#          type: array
#          description: The groups to which this client belongs.
#          items:
#            type: string
#        mobilePhone2:
#          type: string
#          description: The client's second mobile phone number.
#        groupLoanCycle:
#          type: integer
#          format: int32
#          description: >-
#            Number of paid and closed (with 'obligations met') accounts for a
#            client's group; when the closing operation is reverted, this is
#            reduced.
#          readOnly: true
#        portalSettings:
#          #$ref: '#/components/schemas/PortalSettings'
#          type: object
#        assignedBranchKey:
#          type: string
#          description: The encoded key of the branch a client is assigned to.
#        loanCycle:
#          type: integer
#          format: int32
#          description: >-
#            Number of paid and closed (with 'obligations met') accounts for a
#            client; when the closing operation is reverted, this is reduced.
#          readOnly: true
#        emailAddress:
#          type: string
#          description: The client's email address.
#        encodedKey:
#          type: string
#          description: 'The encoded key of the client, which is unique and generated.'
#          readOnly: true
#        id:
#          type: string
#          description: >-
#            The ID of the client, which can be generated and customized - but must
#            be unique.
#        state:
#          type: string
#          description: >-
#            The state of a client. It shows where the client is in the client life
#            cycle.
#          enum:
#            - PENDING_APPROVAL
#            - INACTIVE
#            - ACTIVE
#            - EXITED
#            - BLACKLISTED
#            - REJECTED
#        assignedUserKey:
#          type: string
#          description: The encoded key of the user a client is assigned to.
#        clientRoleKey:
#          type: string
#          description: A role which describes the intended use of a client in the system.
#        lastModifiedDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The last date a client was modified.
#          readOnly: true
#        homePhone:
#          type: string
#          description: The client's home phone number.
#        creationDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date a client was created.
#          readOnly: true
#        birthDate:
#          type: string
#          format: date
#          example: '1987-04-26'
#          description: The client's date of birth.
#        assignedCentreKey:
#          type: string
#          description: The encoded key of the centre a client is assigned to.
#        approvedDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date when a client was approved.
#          readOnly: true
#        firstName:
#          type: string
#          description: 'The first name, personal name, given name, or forename of the client.'
#        idDocuments:
#          type: array
#          description: The identification documents for this client.
#          items:
#            #$ref: '#/components/schemas/IdentificationDocument'
#            type: object
#        profilePictureKey:
#          type: string
#          description: The encoded key of a client's profile picture.
#          readOnly: true
#        profileSignatureKey:
#          type: string
#          description: The encoded key of the client's profile signature.
#          readOnly: true
#        mobilePhone:
#          type: string
#          description: The client's mobile phone number.
#        closedDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date when the client state was changed to closed.
#          readOnly: true
#        middleName:
#          type: string
#          description: The middle name of the client.
#        activationDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date when a client was set as active for the first time.
#          readOnly: true
#      description: Represents a client.
#    AccountAuthorizationHold:
#      type: object
#      required:
#        - amount
#        - externalReferenceId
#      properties:
#        amount:
#          type: number
#          description: >-
#            The amount of money to be held as a result of the authorization hold
#            request.
#        advice:
#          type: boolean
#          description: >-
#            Whether the given request should be accepted without balance
#            validations.
#        cardAcceptor:
#          #$ref: '#/components/schemas/CardAcceptor'
#          type: object
#        source:
#          type: string
#          description: Indicates the source of the authorization hold.
#          readOnly: true
#          enum:
#            - CARD
#            - ACCOUNT
#        creationDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The organization time when the authorization hold was created
#          readOnly: true
#        creditDebitIndicator:
#          type: string
#          description: >-
#            Indicates whether the authorization hold amount is credited or
#            debited. If not provided, the default value is DBIT.
#          enum:
#            - DBIT
#            - CRDT
#        cardToken:
#          type: string
#          description: The reference token of the card.
#          readOnly: true
#        accountKey:
#          type: string
#          description: The key of the account linked with the authorization hold.
#          readOnly: true
#        externalReferenceId:
#          type: string
#          description: >-
#            The external reference ID to be used to reference the account hold in
#            subsequent requests.
#        originalAmount:
#          type: number
#          description: >-
#            The original amount of money to be held as a result of the
#            authorization hold request.
#        exchangeRate:
#          type: number
#          description: The exchange rate for the original currency.
#        userTransactionTime:
#          type: string
#          description: The formatted time at which the user made this authorization hold.
#        originalCurrency:
#          type: string
#          description: The original currency in which the hold was created.
#        currencyCode:
#          type: string
#          description: >-
#            The ISO currency code in which the hold was created. The amounts are
#            stored in the base currency, but the user could have enter it in a
#            foreign currency.
#        status:
#          type: string
#          description: The authorization hold status.
#          readOnly: true
#          enum:
#            - PENDING
#            - REVERSED
#            - SETTLED
#            - EXPIRED
#      description: The account authorization hold corresponding to a deposit account
#    DepositAccount:
#      type: object
#      required:
#        - accountHolderKey
#        - accountHolderType
#        - name
#        - productTypeKey
#      properties:
#        accountState:
#          type: string
#          description: The state of the deposit account.
#          readOnly: true
#          enum:
#            - PENDING_APPROVAL
#            - APPROVED
#            - ACTIVE
#            - ACTIVE_IN_ARREARS
#            - MATURED
#            - LOCKED
#            - DORMANT
#            - CLOSED
#            - CLOSED_WRITTEN_OFF
#            - WITHDRAWN
#            - CLOSED_REJECTED
#        migrationEventKey:
#          type: string
#          description: >-
#            The migration event encoded key associated with this deposit account.
#            If this account was imported, you can track which migration event it
#            came from.
#          readOnly: true
#        notes:
#          type: string
#          description: The notes or description attached to this object.
#        lastSetToArrearsDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: >-
#            The date when the deposit account was set to In Arrears, or null if
#            the account is not In Arrears. The date is in the organization's
#            timezone and time format.
#          readOnly: true
#        assignedBranchKey:
#          type: string
#          description: The key of the branch that this deposit account is assigned to.
#        lastOverdraftInterestReviewDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: >-
#            The date when the overdraft interest was last reviewed, in the
#            organization's timezone and time format.
#          readOnly: true
#        lastInterestStoredDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: >-
#            The date when interest was last applied on the account, in the
#            organization's timezone and time format.
#          readOnly: true
#        interestSettings:
#          #$ref: '#/components/schemas/DepositAccountInterestSettings'
#          type: object
#        balances:
#          #$ref: '#/components/schemas/DepositAccountBalances'
#          type: object
#        creditArrangementKey:
#          type: string
#          description: The key to the credit arrangement where this account is registered.
#        maturityDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: >-
#            The date when the account matures, for fixed or compulsory savings
#            plans, in the organization's timezone and time format.
#          readOnly: true
#        lastInterestReviewDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: >-
#            The date when regular interest was last reviewed, in the
#            organization's timezone and time format.
#          readOnly: true
#        encodedKey:
#          type: string
#          description: >-
#            The encoded key of the deposit account, which is auto-generated and
#            unique.
#          readOnly: true
#        id:
#          type: string
#          description: >-
#            The ID of the deposit account, which can be generated and customized -
#            but must be unique.
#        overdraftSettings:
#          #$ref: '#/components/schemas/DepositAccountOverdraftSettings'
#          type: object
#        lastAccountAppraisalDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: >-
#            The date when the account was last evaluated for interest calculations
#            and maturity, in the organization's timezone and time format.
#          readOnly: true
#        withholdingTaxSourceKey:
#          type: string
#          description: The tax source where the account withholding taxes will be updated.
#        assignedUserKey:
#          type: string
#          description: The key of the user that this deposit is assigned to.
#        overdraftInterestSettings:
#          #$ref: '#/components/schemas/DepositAccountOverdraftInterestSettings'
#          type: object
#        lastModifiedDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: 'The last update date for the deposit account, in UTC.'
#          readOnly: true
#        accountType:
#          type: string
#          description: The deposit account type and the product that it belongs to.
#          enum:
#            - CURRENT_ACCOUNT
#            - REGULAR_SAVINGS
#            - FIXED_DEPOSIT
#            - SAVINGS_PLAN
#            - INVESTOR_ACCOUNT
#        lockedDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: >-
#            The date when the deposit account was locked, in the organization's
#            timezone and time format.
#          readOnly: true
#        creationDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: 'The date this deposit account was created, in UTC.'
#          readOnly: true
#        lastInterestCalculationDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: >-
#            The date when interest was last calculated for the account, in the
#            organization's timezone and time format.
#          readOnly: true
#        assignedCentreKey:
#          type: string
#          description: The key of the centre that this account is assigned to.
#        approvedDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: >-
#            The date when the deposit account was approved, in the organization's
#            timezone and time format.
#          readOnly: true
#        closedDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: 'The date when the deposit account was closed, in UTC.'
#          readOnly: true
#        accruedAmounts:
#          #$ref: '#/components/schemas/DepositAccountAccruedAmounts'
#          type: object
#        name:
#          type: string
#          description: The deposit account name.
#        accountHolderKey:
#          type: string
#          description: >-
#            The encoded key of the account holder, which is an individual client
#            or group.
#        productTypeKey:
#          type: string
#          description: The key to the product type that this account is based on.
#        activationDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: >-
#            The date when the deposit account was activated, in the organization's
#            timezone and time format.
#          readOnly: true
#        internalControls:
#          #$ref: '#/components/schemas/DepositAccountInternalControls'
#          type: object
#        currencyCode:
#          type: string
#          description: The currency code.
#        accountHolderType:
#          type: string
#          description: The account holder type.
#          enum:
#            - CLIENT
#            - GROUP
#        linkedSettlementAccountKeys:
#          type: array
#          description: >-
#            Lists all loan account keys on which the deposit account is used as
#            the settlement account.
#          readOnly: true
#          items:
#            type: string
#      description: Represents information about a deposit account.
#    DepositAccountAccruedAmounts:
#      type: object
#      properties:
#        overdraftInterestAccrued:
#          type: number
#          description: The amount of overdraft interest that has been accrued in the account.
#          readOnly: true
#        interestAccrued:
#          type: number
#          description: The amount of positive interest that has been accrued in the account.
#          readOnly: true
#        technicalOverdraftInterestAccrued:
#          type: number
#          description: >-
#            The amount of technical overdraft interest that has been accrued in
#            the account.
#          readOnly: true
#        negativeInterestAccrued:
#          type: number
#          description: The amount of negative interest that has been accrued in the account.
#          readOnly: true
#      description: Represents information about the accrued amounts of deposit accounts.
#    DepositAccountInterestSettings:
#      type: object
#      properties:
#        interestRateSettings:
#          #$ref: '#/components/schemas/DepositAccountInterestRateSettings'
#          type: object
#        interestPaymentSettings:
#          #$ref: '#/components/schemas/DepositAccountInterestPaymentSettings'
#          type: object
#      description: Represents information about the deposit account's interest settings.
#    DepositAccountBalances:
#      type: object
#      properties:
#        overdraftInterestDue:
#          type: number
#          description: >-
#            The amount of interest due to be paid on an account as a result of an
#            authorized overdraft.
#          readOnly: true
#        forwardAvailableBalance:
#          type: number
#          description: >-
#            The sum of all the authorization hold amounts that have `CRDT` as the
#            `creditDebitIndicator` for an account.
#          readOnly: true
#        totalBalance:
#          type: number
#          description: The current balance of the account.
#          readOnly: true
#        lockedBalance:
#          type: number
#          description: >-
#            The locked amount that is not available for withdrawal in the account.
#            For more information, see [Deposit Account Overview
#            Details](https://support.mambu.com/docs/deposit-account-overview-details).
#          readOnly: true
#        technicalOverdraftAmount:
#          type: number
#          description: >-
#            The technical overdraft amount that has been taken out in the account.
#            For more information, see [Technical
#            Overdraft](https://support.mambu.com/docs/en/overdraft-products#technical-overdraft).
#          readOnly: true
#        overdraftAmount:
#          type: number
#          description: >-
#            The overdraft amount that has been taken out in the account. For more
#            information, see [Overdraft
#            Products](https://support.mambu.com/docs/en/overdraft-products).
#          readOnly: true
#        holdBalance:
#          type: number
#          description: >-
#            The sum of all the authorization hold amounts that have `DBIT` as the
#            `creditDebitIndicator` for an account.
#          readOnly: true
#        technicalOverdraftInterestDue:
#          type: number
#          description: >-
#            The amount of interest due to be paid on an account as a result of a
#            technical overdraft.
#          readOnly: true
#        feesDue:
#          type: number
#          description: The amount of fees due to be paid on this account.
#          readOnly: true
#        blockedBalance:
#          type: number
#          description: The sum of all the blocked amounts on an account.
#          readOnly: true
#        availableBalance:
#          type: number
#          description: The current available balance for deposit transactions.
#          readOnly: true
#      description: Represents information about the balances of a deposit account.
#    DepositAccountInterestRateSettings:
#      type: object
#      properties:
#        interestRate:
#          type: number
#          description: The interest rate for the deposit account.
#        interestSpread:
#          type: number
#          description: >-
#            The index interest rate that is used to calculate the interest rate
#            that is applied to accounts.
#        interestRateReviewUnit:
#          type: string
#          description: >-
#            The time unit to use to determine the frequency of interest rate
#            reviews.
#          enum:
#            - DAYS
#            - WEEKS
#            - MONTHS
#        interestRateSource:
#          type: string
#          description: The interest calculation method used.
#          readOnly: true
#          enum:
#            - FIXED_INTEREST_RATE
#            - INDEX_INTEREST_RATE
#        interestRateReviewCount:
#          type: integer
#          format: int32
#          description: The number of times to review the interest rate in a time period.
#        interestRateTiers:
#          type: array
#          description: >-
#            The list of interest rate tiers, which hold the values to define how
#            interest is calculated.
#          items:
#            #$ref: '#/components/schemas/DepositAccountInterestRateTier'
#            type: object
#        interestChargeFrequency:
#          type: string
#          description: >-
#            The interest charge frequency, which shows how often interest is
#            charged on loan or deposit accounts.
#          enum:
#            - ANNUALIZED
#            - EVERY_MONTH
#            - EVERY_FOUR_WEEKS
#            - EVERY_WEEK
#            - EVERY_DAY
#            - EVERY_X_DAYS
#        encodedKey:
#          type: string
#          description: >-
#            The encoded key for the set of interest settings, which is
#            auto-generated and unique.
#          readOnly: true
#        interestChargeFrequencyCount:
#          type: integer
#          format: int32
#          description: The number of times to apply interest in a time period.
#        interestRateTerms:
#          type: string
#          description: >-
#            The terms for how interest rate is determined when accruing for an
#            account.
#          enum:
#            - FIXED
#            - TIERED
#            - TIERED_PERIOD
#            - TIERED_BAND
#      description: >-
#        Represents information about the interest rate settings for deposit
#        accounts.
#    DepositAccountOverdraftSettings:
#      type: object
#      properties:
#        allowOverdraft:
#          type: boolean
#          description: '`TRUE` if this account supports overdraft, `FALSE` otherwise.'
#        overdraftLimit:
#          type: number
#          description: >-
#            The limit amount that may be taken out as overdraft, where null means
#            0.
#        overdraftExpiryDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The expiration date of an overdraft.
#      description: Represents information about a deposit account's overdraft settings.
#    DepositAccountOverdraftInterestSettings:
#      type: object
#      properties:
#        interestRateSettings:
#          #$ref: '#/components/schemas/DepositAccountOverdraftInterestRateSettings'
#          type: object
#      description: >-
#        Represents information about a deposit account's overdraft interest
#        settings.
#    DepositAccountInternalControls:
#      type: object
#      properties:
#        maxDepositBalance:
#          type: number
#          description: The maximum deposit balance of the account.
#        recommendedDepositAmount:
#          type: number
#          description: The recommended amount for a deposit.
#        targetAmount:
#          type: number
#          description: The target amount for a deposit made towards a savings goal.
#        maxWithdrawalAmount:
#          type: number
#          description: The maximum amount allowed for a withdrawal.
#      description: Represents information about internal controls.
#    DepositAccountInterestPaymentSettings:
#      type: object
#      properties:
#        interestPaymentDates:
#          type: array
#          description: >-
#            The list of all dates when the interest is paid into the deposit
#            account.
#          items:
#            #$ref: '#/components/schemas/MonthAndDay'
#            type: object
#        interestPaymentPoint:
#          type: string
#          description: >-
#            The interest payment point, which specifies when the interest should
#            be paid to the account.
#          enum:
#            - FIRST_DAY_OF_MONTH
#            - EVERY_WEEK
#            - EVERY_OTHER_WEEK
#            - EVERY_MONTH
#            - EVERY_3_MONTHS
#            - ON_FIXED_DATES
#            - DAILY
#            - ANNUALLY
#            - BI_ANNUALLY
#            - ON_ACCOUNT_MATURITY
#      description: Represents information about the interest payment settings.
#    DepositAccountInterestRateTier:
#      type: object
#      required:
#        - interestRate
#      properties:
#        endingBalance:
#          type: number
#          description: >-
#            The top-limit value for the account balance in order to determine if
#            this tier is used or not
#        interestRate:
#          type: number
#          description: >-
#            The rate used for computing the interest for an account which has the
#            balance less than the ending balance
#        encodedKey:
#          type: string
#          description: 'The encoded key of the interest rate tier, auto generated, unique'
#          readOnly: true
#        endingDay:
#          type: integer
#          format: int32
#          description: >-
#            The end date for the account period. Used to determine if this
#            interest rate tier is used or not.
#      description: Represents information about how interest rate is calculated.
#    DepositAccountOverdraftInterestRateSettings:
#      type: object
#      properties:
#        interestRate:
#          type: number
#          description: The interest rate for the deposit account.
#        interestSpread:
#          type: number
#          description: >-
#            The index interest rate that is used to calculate the interest rate
#            that is applied to accounts.
#        interestRateReviewUnit:
#          type: string
#          description: >-
#            The time unit to use to determine the frequency of interest rate
#            reviews.
#          enum:
#            - DAYS
#            - WEEKS
#            - MONTHS
#        interestRateSource:
#          type: string
#          description: The interest calculation method used.
#          readOnly: true
#          enum:
#            - FIXED_INTEREST_RATE
#            - INDEX_INTEREST_RATE
#        interestRateReviewCount:
#          type: integer
#          format: int32
#          description: The number of times to review the interest rate in a time period.
#        interestRateTiers:
#          type: array
#          description: >-
#            The list of interest rate tiers, which hold the values to define how
#            interest is calculated.
#          items:
#            #$ref: '#/components/schemas/DepositAccountInterestRateTier'
#            type: object
#        interestChargeFrequency:
#          type: string
#          description: >-
#            The interest charge frequency, which shows how often interest is
#            charged on loan or deposit accounts.
#          enum:
#            - ANNUALIZED
#            - EVERY_MONTH
#            - EVERY_FOUR_WEEKS
#            - EVERY_WEEK
#            - EVERY_DAY
#            - EVERY_X_DAYS
#        encodedKey:
#          type: string
#          description: >-
#            The encoded key for the set of interest settings, which is
#            auto-generated and unique.
#          readOnly: true
#        interestChargeFrequencyCount:
#          type: integer
#          format: int32
#          description: The number of times to apply interest in a time period.
#        interestRateTerms:
#          type: string
#          description: >-
#            The terms for how interest rate is determined when accruing for an
#            account.
#          enum:
#            - FIXED
#            - TIERED
#            - TIERED_PERIOD
#            - TIERED_BAND
#      description: >-
#        Represents information about overdraft interest rate settings for deposit
#        accounts.
#    MonthAndDay:
#      type: object
#      properties:
#        month:
#          type: integer
#          format: int32
#          description: The month of the year
#        day:
#          type: integer
#          format: int32
#          description: The day in the month
#      description: Wrapper for month and day for instances where the year isn't needed
#    DepositAccountSearchCriteria:
#      type: object
#      properties:
#        sortingCriteria:
#          #$ref: '#/components/schemas/DepositAccountSortingCriteria'
#          type: object
#        filterCriteria:
#          type: array
#          description: The list of filtering criteria.
#          items:
#            #$ref: '#/components/schemas/DepositAccountFilterCriteria'
#            type: object
#      description: >-
#        Represents the filtering criteria list and the sorting criteria for
#        searching deposit accounts.
#    DepositAccountSortingCriteria:
#      type: object
#      required:
#        - field
#      properties:
#        field:
#          type: string
#          description: >-
#            The field to use to sort the selection. This can be an enumerated
#            value or a custom field using the format
#            [customFieldSetId].[customFieldId].
#          enum:
#            - encodedKey
#            - id
#            - name
#            - creationDate
#            - activationDate
#            - approvedDate
#            - lastModifiedDate
#            - maturityDate
#            - lastSetToArrearsDate
#            - closedDate
#            - accountHolderName
#            - accruedAmounts.interestAccrued
#            - accruedAmounts.overdraftInterestAccrued
#            - accruedAmounts.technicalOverdraftInterestAccrued
#            - maxBalance
#            - balances.availableBalance
#            - balances.blockedBalance
#            - balances.feesDue
#            - balances.lockedBalance
#            - balances.overdraftAmount
#            - balances.technicalOverdraftAmount
#            - balances.totalBalance
#            - balances.holdBalance
#            - balances.overdraftInterestDue
#            - assignedBranchKey
#            - assignedCentreKey
#            - assignedUserKey
#            - interestSettings.interestRate
#            - currentInterestTier.startingBalance
#            - currentInterestTier.endingBalance
#            - currentInterestTier.index
#            - currentInterestTier.interestRate
#            - currentOverdraftInterestTier.startingBalance
#            - currentOverdraftInterestTier.endingBalance
#            - currentOverdraftInterestTier.index
#            - currentOverdraftInterestTier.interestRate
#            - internalControls.maxWithdrawalAmount
#            - internalControls.recommendedDepositAmount
#            - internalControls.targetAmount
#            - notes
#            - taxApplied
#            - taxRate
#            - withholdingTaxSourceKey
#            - lengthInDays
#            - productCategory
#            - overdraftInterestSettings.interestRateSettings.interestSpread
#            - overdraftInterestSettings.interestRateSettings.interestRate
#            - overdraftSettings.allowOverdraft
#            - overdraftSettings.overdraftExpiryDate
#            - overdraftSettings.overdraftLimit
#            - overdraftDaysInArrears
#            - overdraftInArrears
#            - overdraftAvailableLimit
#        order:
#          type: string
#          description: 'The sorting order: `ASC` or `DESC`. The default order is `DESC`.'
#          enum:
#            - ASC
#            - DESC
#      description: The sorting criteria used for searching deposit accounts.
#    DepositAccountFilterCriteria:
#      type: object
#      required:
#        - field
#        - operator
#      properties:
#        field:
#          type: string
#          description: >
#            The fields to search, which can be enumerated values or custom fields
#            using the format [customFieldSetId].[customFieldId].
#          enum:
#            - encodedKey
#            - id
#            - name
#            - accountHolderKey
#            - clientId
#            - groupId
#            - accountHolderName
#            - accountState
#            - accountType
#            - creationDate
#            - activationDate
#            - approvedDate
#            - lastModifiedDate
#            - maturityDate
#            - lastSetToArrearsDate
#            - closedDate
#            - accruedAmounts.interestAccrued
#            - accruedAmounts.overdraftInterestAccrued
#            - accruedAmounts.technicalOverdraftInterestAccrued
#            - maxBalance
#            - balances.availableBalance
#            - balances.blockedBalance
#            - balances.feesDue
#            - balances.lockedBalance
#            - balances.overdraftAmount
#            - balances.overdraftInterestDue
#            - balances.technicalOverdraftAmount
#            - balances.totalBalance
#            - balances.holdBalance
#            - assignedBranchKey
#            - assignedCentreKey
#            - assignedUserKey
#            - currencyCode
#            - interestSettings.interestRate
#            - currentInterestTier.endingBalance
#            - currentInterestTier.index
#            - currentInterestTier.interestRate
#            - currentInterestTier.startingBalance
#            - internalControls.maxWithdrawalAmount
#            - internalControls.recommendedDepositAmount
#            - internalControls.targetAmount
#            - lengthInDays
#            - overdraftRiskLevelKey
#            - overdraftAvailableLimit
#            - overdraftDaysInArrears
#            - overdraftInArrears
#            - overdraftInterestSettings.interestRateSettings.interestRate
#            - overdraftInterestSettings.interestRateSettings.interestSpread
#            - currentOverdraftInterestTier.endingBalance
#            - currentOverdraftInterestTier.index
#            - currentOverdraftInterestTier.interestRate
#            - currentOverdraftInterestTier.startingBalance
#            - overdraftSettings.overdraftExpiryDate
#            - overdraftSettings.overdraftLimit
#            - overdraftSettings.allowOverdraft
#            - productTypeKey
#            - productCategory
#            - taxApplied
#            - withholdingTaxSourceKey
#            - taxRate
#        value:
#          type: string
#          description: The value to match the searching criteria.
#        operator:
#          type: string
#          description: "| **Operator**                | **Affected values**  | **Available for**                                                    |\n|---------------               |----------------------|----------------------------------------------------------------------|\n| EQUALS                       | ONE_VALUE            | BIG_DECIMAL,BOOLEAN,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY        |\n| EQUALS_CASE_SENSITIVE        | ONE_VALUE            | BIG_DECIMAL,BOOLEAN,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY \t\t  |\n| MORE_THAN                    | ONE_VALUE            | BIG_DECIMAL,NUMBER,MONEY                                             |\n| LESS_THAN                    | ONE_VALUE            | BIG_DECIMAL,NUMBER,MONEY                                             |\n| BETWEEN                      | TWO_VALUES           | BIG_DECIMAL,NUMBER,MONEY,DATE,DATE_TIME                              |\n| ON                           | ONE_VALUE            | DATE,DATE_TIME                                                       |\n| AFTER                        | ONE_VALUE            | DATE,DATE_TIME                                                       |\n| BEFORE                       | ONE_VALUE            | DATE,DATE_TIME                                                       |\n| BEFORE_INCLUSIVE             | ONE_VALUE            | DATE,DATE_TIME                                                       |\n| STARTS_WITH                  | ONE_VALUE            | STRING                                                               |\n| STARTS_WITH_CASE_SENSITIVE   | ONE_VALUE            | STRING                                                               |\n| IN                           | LIST                 | ENUM,KEY                                                             |\n| TODAY                        | NO_VALUE             | DATE,DATE_TIME                                                       |\n| THIS_WEEK                    | NO_VALUE             | DATE,DATE_TIME                                                       |\n| THIS_MONTH                   | NO_VALUE             | DATE,DATE_TIME                                                       |\n| THIS_YEAR                    | NO_VALUE             | DATE,DATE_TIME                                                       |\n| LAST_DAYS                    | ONE_VALUE            | NUMBER                                                               |\n| EMPTY                        | NO_VALUE             | BIG_DECIMAL,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY,DATE,DATE_TIME |\n| NOT_EMPTY                    | NO_VALUE             | BIG_DECIMAL,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY,DATE,DATE_TIME |"
#          enum:
#            - EQUALS
#            - EQUALS_CASE_SENSITIVE
#            - DIFFERENT_THAN
#            - MORE_THAN
#            - LESS_THAN
#            - BETWEEN
#            - 'ON'
#            - AFTER
#            - AFTER_INCLUSIVE
#            - BEFORE
#            - BEFORE_INCLUSIVE
#            - STARTS_WITH
#            - STARTS_WITH_CASE_SENSITIVE
#            - IN
#            - TODAY
#            - THIS_WEEK
#            - THIS_MONTH
#            - THIS_YEAR
#            - LAST_DAYS
#            - EMPTY
#            - NOT_EMPTY
#        secondValue:
#          type: string
#          description: >-
#            The second value to match the searching criteria, when the `BETWEEN`
#            operator is used.
#        values:
#          type: array
#          description: List of values when the `IN` operator is used.
#          items:
#            type: string
#      description: Represents the filter list used for searching deposit accounts.
#    DepositAccountAction:
#      type: object
#      required:
#        - action
#      properties:
#        action:
#          type: string
#          description: The action type to be applied.
#          enum:
#            - APPROVE
#            - UNDO_APPROVE
#            - LOCK
#            - UNLOCK
#            - CLOSE
#            - CLOSE_WITHDRAW
#            - CLOSE_REJECT
#            - CLOSE_WRITE_OFF
#        notes:
#          type: string
#          description: The notes related to the action performed.
#      description: Represents the action details for a deposit account.
#
#    GLJournalEntry:
#      type: object
#      properties:
#        amount:
#          type: number
#          description: >-
#            The amount which was debited or credited in the organization's
#            currency.
#        notes:
#          type: string
#          description: >-
#            Optional notes entered by the user when they performed the journal
#            entry.
#        creationDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The creation date of the general ledger journal entry.
#          readOnly: true
#        productKey:
#          type: string
#          description: >-
#            The product associated with this journal entry. `Null` if the journal
#            entry is not associated with any product.
#        type:
#          type: string
#          description: 'The general ledger journal entry type, which may be debit or credit.'
#          enum:
#            - DEBIT
#            - CREDIT
#        assignedBranchKey:
#          type: string
#          description: The key of the assigned branch for this general ledger journal entry.
#        transactionId:
#          type: string
#          description: 'The transation ID, which is not unique.'
#        userKey:
#          type: string
#          description: The encoded key of the user that performed the transaction.
#        entryID:
#          type: integer
#          format: int64
#          description: The ID of the general ledger journal entry.
#          readOnly: true
#        accountKey:
#          type: string
#          description: >-
#            The account associated with this journal entry. `Null` if the journal
#            entry is not associated to any account.
#        foreignAmount:
#          #$ref: '#/components/schemas/GLJournalEntryForeignAmount'
#          type: object
#        reversalEntryKey:
#          type: string
#          description: >-
#            The entry key of the general ledger journal entry that reverses this
#            general ledger journal entry. Null if the general ledger journal entry
#            isn't reversed.
#        encodedKey:
#          type: string
#          description: 'The encoded key of the entity, generated, globally unique'
#          readOnly: true
#        bookingDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date and time when the general ledger journal entry was recorded.
#        glAccount:
#          #$ref: '#/components/schemas/GLAccount'
#          type: object
#        productType:
#          type: string
#          description: >-
#            The product type that is referenced by the account key. `Null` if the
#            journal entry is not associated to any product.
#          enum:
#            - LOAN
#            - SAVINGS
#      description: Represents a general ledger journal entry.
#    GLAccount:
#      type: object
#      properties:
#        migrationEventKey:
#          type: string
#          description: >-
#            The data migration event key if the general ledger account was created
#            as a part of a data migration event.
#        lastModifiedDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: 'The last modification date and time, which is stored as UTC.'
#        glCode:
#          type: string
#          description: >-
#            The general ledger code used to identify different account types. Also
#            used for grouping and categorizing accounts. For example: an account
#            code of '3201' is considered a subtype of '3200'.
#        usage:
#          type: string
#          description: >-
#            The usage type of the general ledger account. `DETAIL` accounts are
#            used to stores transaction balances. `HEADER` accounts are used to
#            organise and group detail accounts for reporting purposes.
#          enum:
#            - DETAIL
#            - HEADER
#        description:
#          type: string
#          description: A description of the general ledger account.
#        creationDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: 'The creation date for this account, which is stored as UTC.'
#        type:
#          type: string
#          description: The general ledger account type.
#          enum:
#            - ASSET
#            - LIABILITY
#            - EQUITY
#            - INCOME
#            - EXPENSE
#        allowManualJournalEntries:
#          type: boolean
#          description: '`TRUE` if manual journal entries are allowed, `FALSE` otherwise.'
#        balance:
#          type: number
#          description: >-
#            The balance of the general ledger account, which is only populated for
#            the GET /glaccounts endpoint.
#        name:
#          type: string
#          description: The name of the general ledger account.
#        encodedKey:
#          type: string
#          description: 'The encoded key of the entity, generated, globally unique'
#          readOnly: true
#        currency:
#          #$ref: '#/components/schemas/Currency'
#          type: object
#        stripTrailingZeros:
#          type: boolean
#          description: '`TRUE` if trailing zeros are stripped, `FALSE` otherwise.'
#        activated:
#          type: boolean
#          description: '`TRUE` if the account is activated and may be used, `FALSE` otherwise.'
#      description: Represents a general ledger account.
#    GLAccountAmount:
#      type: object
#      properties:
#        amount:
#          type: number
#          description: The amount which was debited or credited.
#        glAccount:
#          type: string
#          description: >-
#            Represents the general ledger account code of the the general ledger
#            account that was debited or credited.
#      description: >-
#        Represents the general ledger account and amount used in a journal entry
#        record.
#    GLJournalEntrySortingCriteria:
#      type: object
#      required:
#        - field
#      properties:
#        field:
#          type: string
#          description: >-
#            The field that can be used to sort the selection. These fields can be
#            from the enumerated values or you can specify a custom field using the
#            format [customFieldSetId].[customFieldId].
#          enum:
#            - encodedKey
#            - entryId
#            - bookingDate
#            - creationDate
#            - transactionId
#            - glAccountName
#            - glAccountId
#            - glAccountType
#            - debit
#            - credit
#            - foreignDebit
#            - foreignCredit
#            - loanAccountId
#            - userName
#            - user
#            - branchName
#            - foreignCurrency
#        order:
#          type: string
#          description: 'The sorting order: `ASC` or `DESC`. The default order is `DESC`.'
#          enum:
#            - ASC
#            - DESC
#      description: Represents the sorting criteria used for general ledger journal entries.
#    GLJournalEntryForeignAmount:
#      type: object
#      properties:
#        accountingRate:
#          #$ref: '#/components/schemas/AccountingRate'
#          type: object
#        amount:
#          type: number
#          description: The amount of an accounting entry in foreign currency.
#        currency:
#          #$ref: '#/components/schemas/Currency'
#          type: object
#      description: >-
#        Represents the details of the general ledger journal entry amount posted
#        in foreign currency.
#    GLJournalEntryFilterCriteria:
#      type: object
#      required:
#        - field
#        - operator
#      properties:
#        field:
#          type: string
#          description: >-
#            The fields used to search. These fields can be from the enumerated
#            values or you can specify a custom field using the format
#            [customFieldSetId].[customFieldId].
#          enum:
#            - productType
#            - glAccountKey
#            - userKey
#            - encodedKey
#            - entryId
#            - bookingDate
#            - creationDate
#            - transactionId
#            - glAccountId
#            - glAccountType
#            - source
#            - debit
#            - credit
#            - foreignDebit
#            - foreignCredit
#            - loanAccountId
#            - foreignCurrencyCode
#            - assignedBranchKey
#        value:
#          type: string
#          description: The value to match the searching criteria.
#        operator:
#          type: string
#          description: "| **Operator**                | **Affected values**  | **Available for**                                                    |\n|---------------               |----------------------|----------------------------------------------------------------------|\n| EQUALS                       | ONE_VALUE            | BIG_DECIMAL,BOOLEAN,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY        |\n| EQUALS_CASE_SENSITIVE        | ONE_VALUE            | BIG_DECIMAL,BOOLEAN,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY \t\t  |\n| MORE_THAN                    | ONE_VALUE            | BIG_DECIMAL,NUMBER,MONEY                                             |\n| LESS_THAN                    | ONE_VALUE            | BIG_DECIMAL,NUMBER,MONEY                                             |\n| BETWEEN                      | TWO_VALUES           | BIG_DECIMAL,NUMBER,MONEY,DATE,DATE_TIME                              |\n| ON                           | ONE_VALUE            | DATE,DATE_TIME                                                       |\n| AFTER                        | ONE_VALUE            | DATE,DATE_TIME                                                       |\n| BEFORE                       | ONE_VALUE            | DATE,DATE_TIME                                                       |\n| BEFORE_INCLUSIVE             | ONE_VALUE            | DATE,DATE_TIME                                                       |\n| STARTS_WITH                  | ONE_VALUE            | STRING                                                               |\n| STARTS_WITH_CASE_SENSITIVE   | ONE_VALUE            | STRING                                                               |\n| IN                           | LIST                 | ENUM,KEY                                                             |\n| TODAY                        | NO_VALUE             | DATE,DATE_TIME                                                       |\n| THIS_WEEK                    | NO_VALUE             | DATE,DATE_TIME                                                       |\n| THIS_MONTH                   | NO_VALUE             | DATE,DATE_TIME                                                       |\n| THIS_YEAR                    | NO_VALUE             | DATE,DATE_TIME                                                       |\n| LAST_DAYS                    | ONE_VALUE            | NUMBER                                                               |\n| EMPTY                        | NO_VALUE             | BIG_DECIMAL,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY,DATE,DATE_TIME |\n| NOT_EMPTY                    | NO_VALUE             | BIG_DECIMAL,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY,DATE,DATE_TIME |"
#          enum:
#            - EQUALS
#            - EQUALS_CASE_SENSITIVE
#            - DIFFERENT_THAN
#            - MORE_THAN
#            - LESS_THAN
#            - BETWEEN
#            - 'ON'
#            - AFTER
#            - AFTER_INCLUSIVE
#            - BEFORE
#            - BEFORE_INCLUSIVE
#            - STARTS_WITH
#            - STARTS_WITH_CASE_SENSITIVE
#            - IN
#            - TODAY
#            - THIS_WEEK
#            - THIS_MONTH
#            - THIS_YEAR
#            - LAST_DAYS
#            - EMPTY
#            - NOT_EMPTY
#        secondValue:
#          type: string
#          description: >-
#            The second value to match the searching criteria, when the `BETWEEN`
#            operator is used.
#        values:
#          type: array
#          description: List of values when the `IN` operator is used.
#          items:
#            type: string
#      description: >-
#        Represents the filtering criteria used for searching general ledger
#        journal entries.
#    GLJournalEntrySearchCriteria:
#      type: object
#      properties:
#        sortingCriteria:
#          #$ref: '#/components/schemas/GLJournalEntrySortingCriteria'
#          type: object
#        filterCriteria:
#          type: array
#          description: The list of filtering criteria.
#          items:
#            #$ref: '#/components/schemas/GLJournalEntryFilterCriteria'
#            type: object
#      description: >-
#        Represents the list of filtering criteria and the sorting criteria when
#        searching general ledger journal entries.
#    AccountingRate:
#      type: object
#      properties:
#        rate:
#          type: number
#          description: Value of rate to be used for accounting conversions
#        endDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: Rate validity end date
#        toCurrencyCode:
#          type: string
#          description: Foreign currency code
#        encodedKey:
#          type: string
#          description: 'The encoded key of the accounting rate, auto generated, unique'
#          readOnly: true
#        fromCurrencyCode:
#          type: string
#          description: Organisation currency code
#        startDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: Rate validity start date
#      description: >-
#        Represents the conversion rate used in accounting to convert amounts from
#        one currency to organisation currency
#    PostGLJournalEntriesDTO:
#      type: object
#      required:
#        - date
#      properties:
#        date:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: >-
#            The date and time when the general ledger journal entries were
#            recorded, also known as the booking date.
#        branchId:
#          type: string
#          description: The ID of the assigned branch for the journal entries.
#        notes:
#          type: string
#          description: The notes entered when the journal entry was posted.
#        credits:
#          type: array
#          description: >-
#            The list of general ledger accounts to be credited with corresponding
#            amounts.
#          items:
#            #$ref: '#/components/schemas/GLAccountAmount'
#            type: object
#        debits:
#          type: array
#          description: >-
#            The list of general ledger accounts to be debited with corresponding
#            amounts.
#          items:
#            #$ref: '#/components/schemas/GLAccountAmount'
#            type: object
#        transactionId:
#          type: string
#          description: >-
#            A non-unique trasanction ID. This will be autogenerated if an ID is
#            not provided.
#      description: Represents the information to create general ledger journal entries.
#    AuthorizationHoldAmountAdjustmentRequest:
#      type: object
#      required:
#        - amount
#      properties:
#        externalReferenceId:
#          type: string
#          description: >-
#            The external reference ID of the decrease/increase request (not of the
#            authorization hold).
#        encodedKey:
#          type: string
#          description: 'The encoded key of the entity, generated, globally unique'
#          readOnly: true
#        amount:
#          type: number
#          description: >-
#            The amount of money to be subtracted/added to the authorization hold
#            amount. For the decrease: if the amount is greater or equal to the
#            authorization hold amount, then the authorization hold is reversed.
#        currencyCode:
#          type: string
#          description: The ISO currency code in which the hold was created.
#        advice:
#          type: boolean
#          description: >-
#            Whether the given request should be accepted without balance
#            validations.
#      description: A request to decrease/increase the amount of an authorization hold.
#    AuthorizationHold:
#      type: object
#      required:
#        - advice
#        - amount
#        - externalReferenceId
#      properties:
#        customExpirationPeriod:
#          type: integer
#          format: int32
#          description: >-
#            The custom expiration period for the hold which overwrites mcc and
#            default expiration periods
#        amount:
#          type: number
#          description: >-
#            The amount of money to be held as a result of the authorization hold
#            request.
#        advice:
#          type: boolean
#          description: >-
#            Whether the given request should be accepted without balance
#            validations.
#        cardAcceptor:
#          #$ref: '#/components/schemas/CardAcceptor'
#          type: object
#        source:
#          type: string
#          description: >-
#            Indicates the source of the authorization hold, the default values is
#            CARD.
#          readOnly: true
#          enum:
#            - CARD
#            - ACCOUNT
#        creationDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The organization time when the authorization hold was created
#          readOnly: true
#        creditDebitIndicator:
#          type: string
#          description: >-
#            Indicates whether the authorization hold amount is credited or
#            debited.If not provided, the default values is DBIT.
#          enum:
#            - DBIT
#            - CRDT
#        cardToken:
#          type: string
#          description: The reference token of the card.
#          readOnly: true
#        referenceDateForExpiration:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: >-
#            The date to consider as start date when calculating the number of days
#            passed until expiration
#          readOnly: true
#        accountKey:
#          type: string
#          description: The key of the account linked with the authorization hold.
#          readOnly: true
#        externalReferenceId:
#          type: string
#          description: >-
#            The external reference ID to be used to reference the account hold in
#            subsequent requests.
#        balances:
#          #$ref: '#/components/schemas/AccountBalances'
#          type: object
#        originalAmount:
#          type: number
#          description: >-
#            The original amount of money to be held as a result of the
#            authorization hold request.
#        exchangeRate:
#          type: number
#          description: The exchange rate for the original currency.
#        userTransactionTime:
#          type: string
#          description: The formatted time at which the user made this authorization hold.
#        originalCurrency:
#          type: string
#          description: The original currency in which the hold was created.
#        currencyCode:
#          type: string
#          description: >-
#            The ISO currency code in which the hold was created. The amounts are
#            stored in the base currency, but the user could have enter it in a
#            foreign currency.
#        partial:
#          type: boolean
#          description: Indicates whether the authorization is partial or not
#        status:
#          type: string
#          description: The authorization hold status.
#          readOnly: true
#          enum:
#            - PENDING
#            - REVERSED
#            - SETTLED
#            - EXPIRED
#      description: The authorization hold corresponding to a card token
#    DepositTransaction:
#      type: object
#      properties:
#        migrationEventKey:
#          type: string
#          description: >-
#            The migration event encoded key associated with this deposit account.
#            If this account was imported, track which 'migration event' they came
#            from
#        transactionDetails:
#         #$ref: '#/components/schemas/TransactionDetails'
#         type: object
#        fees:
#          type: array
#          description: >-
#            All the amounts that have been applied or paid within this transaction
#            and involved predefined fees
#          readOnly: true
#          items:
#           #$ref: '#/components/schemas/DepositFee'
#           type: object
#        notes:
#          type: string
#          description: Extra notes about this deposit transaction
#        affectedAmounts:
#         #$ref: '#/components/schemas/DepositAffectedAmounts'
#         type: object
#        cardTransaction:
#         #$ref: '#/components/schemas/CardTransaction'
#         type: object
#        taxes:
#         #$ref: '#/components/schemas/DepositTaxes'
#         type: object
#        tillKey:
#          type: string
#          description: The till key associated with this transaction
#        adjustmentTransactionKey:
#          type: string
#          description: >-
#            The key of the deposit transaction where the adjustment for this
#            transaction was made (if any adjustment was involved)
#        type:
#          type: string
#          description: The type of the deposit transaction
#          enum:
#            - IMPORT
#            - WRITE_OFF
#            - WRITE_OFF_ADJUSTMENT
#            - DEPOSIT
#            - ADJUSTMENT
#            - WITHDRAWAL
#            - WITHDRAWAL_ADJUSTMENT
#            - CARD_TRANSACTION_REVERSAL
#            - CARD_TRANSACTION_REVERSAL_ADJUSTMENT
#            - TRANSFER
#            - TRANSFER_ADJUSTMENT
#            - FEE_APPLIED
#            - FEE_ADJUSTED
#            - FEES_DUE_REDUCED
#            - INTEREST_APPLIED
#            - INTEREST_APPLIED_ADJUSTMENT
#            - NET_DIFF_INTEREST
#            - FEE_REDUCTION_ADJUSTMENT
#            - WITHHOLDING_TAX
#            - WITHHOLDING_TAX_ADJUSTMENT
#            - INTEREST_RATE_CHANGED
#            - OVERDRAFT_INTEREST_RATE_CHANGED
#            - OVERDRAFT_LIMIT_CHANGED
#            - BRANCH_CHANGED
#            - ACCOUNT_HOLDER_CHANGED
#            - LOAN_FUNDED
#            - LOAN_FUNDED_ADJUSTMENT
#            - LOAN_REPAID
#            - LOAN_REPAID_ADJUSTMENT
#            - LOAN_FRACTION_BOUGHT
#            - LOAN_FRACTION_BOUGHT_ADJUSTMENT
#            - LOAN_FRACTION_SOLD
#            - LOAN_FRACTION_SOLD_ADJUSTMENT
#            - SEIZED_AMOUNT
#        branchKey:
#          type: string
#          description: The branch where the transaction was performed
#          readOnly: true
#        terms:
#         #$ref: '#/components/schemas/DepositTerms'
#         type: object
#        transferDetails:
#         #$ref: '#/components/schemas/TransferDetails'
#         type: object
#        paymentOrderId:
#          type: string
#          description: 'The payment order id of the deposit transaction, customizable'
#        encodedKey:
#          type: string
#          description: 'The encoded key of the deposit transaction, auto generated, unique'
#          readOnly: true
#        id:
#          type: string
#          description: 'The id of the deposit transaction, auto generated, unique'
#        paymentDetails:
#         #$ref: '#/components/schemas/PaymentDetails'
#         type: object
#        interestAccruedAmounts:
#         #$ref: '#/components/schemas/DepositInterestAccruedAmounts'
#         type: object
#        originalTransactionKey:
#          type: string
#          description: >-
#            The encodedKey of the transaction that was adjusted as part of this
#            one. Available only for adjustment transactions
#        amount:
#          type: number
#          description: How much was added/removed in account
#        centreKey:
#          type: string
#          description: The center where the transaction was performed
#          readOnly: true
#        externalId:
#          type: string
#          description: 'The external id of the deposit transaction, customizable, unique'
#        valueDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: >-
#            Date of the entry (eg date of repayment or disbursal, etc.) (as
#            Organization Time)
#        creationDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date when this deposit transaction was created
#          readOnly: true
#        userKey:
#          type: string
#          description: The person that performed the transaction
#        blockId:
#          type: string
#          description: The block fund id associated with the transaction
#        parentAccountKey:
#          type: string
#          description: The key of the parent deposit account
#        accountBalances:
#         #$ref: '#/components/schemas/DepositTransactionBalances'
#         type: object
#        bookingDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date when corresponding JE is booked (as Organization Time)
#        holdExternalReferenceId:
#          type: string
#          description: The external id of an account authorization hold
#        currencyCode:
#          type: string
#          description: The currency in which this transaction was posted
#      description: >-
#        Represents the action performed on an Deposit Account after which the
#        account's amount changes its value.
#    DepositFee:
#      type: object
#      required:
#        - predefinedFeeKey
#      properties:
#        name:
#          type: string
#          description: The name of the predefined fee
#          readOnly: true
#        amount:
#          type: number
#          description: >-
#            The amount of the fee that was applied/paid in the transaction for the
#            given predefined fee.
#        trigger:
#          type: string
#          description: Shows the event that will trigger a fee
#          readOnly: true
#          enum:
#            - MANUAL
#            - MONTHLY_FEE
#            - ARBITRARY
#        taxAmount:
#          type: number
#          description: >-
#            The amount of the taxes on fee that was applied/paid in the
#            transaction.
#        predefinedFeeKey:
#          type: string
#          description: 'The encoded key of the predefined fee, auto generated, unique'
#      description: An amount of predefined fee that was applied or paid on an account.
#    DepositAffectedAmounts:
#      type: object
#      properties:
#        feesAmount:
#          type: number
#          description: >-
#            Amount of fees involved in a transaction that affects an account with
#            positive balance
#        overdraftInterestAmount:
#          type: number
#          description: Interest amount involved in a transaction that affects an overdraft
#        overdraftFeesAmount:
#          type: number
#          description: Fees amount involved in a transaction that affects an overdraft
#        fractionAmount:
#          type: number
#          description: >-
#            In the case of an LOAN_FRACTION_BOUGHT this represent the fraction
#            amount which was bought from another investor
#        technicalOverdraftAmount:
#          type: number
#          description: >-
#            The amount of money that was added/subtracted from the account by this
#            transaction as technical overdraft
#        overdraftAmount:
#          type: number
#          description: >-
#            The amount of money that was added/subtracted from the account by this
#            transaction as overdraft
#        interestAmount:
#          type: number
#          description: >-
#            Amount of interest involved in a transaction that affects an account
#            with positive balance
#        technicalOverdraftInterestAmount:
#          type: number
#          description: >-
#            The amount of money that was added/subtracted from the account by this
#            transaction as technical overdraft interest
#        fundsAmount:
#          type: number
#          description: >-
#            Balance change amount involved in a transaction that affects an
#            account with positive balance
#      description: The amounts affected after completing the deposit transaction
#    DepositTaxes:
#      type: object
#      properties:
#        taxRate:
#          type: number
#          description: The tax rate that was set or changed in this transaction
#      description: The taxes applied within a transaction
#    DepositTerms:
#      type: object
#      properties:
#        interestSettings:
#         #$ref: '#/components/schemas/DepositTransactionInterestSettings'
#         type: object
#        overdraftSettings:
#         #$ref: '#/components/schemas/DepositOverdraftSettings'
#         type: object
#        overdraftInterestSettings:
#         #$ref: '#/components/schemas/DepositOverdraftInterestSettings'
#         type: object
#      description: The deposit transaction terms
#    PaymentDetails:
#      type: object
#      properties:
#        paymentIdentification:
#         #$ref: '#/components/schemas/PaymentIdentification'
#         type: object
#        debtorAccount:
#         #$ref: '#/components/schemas/AccountDetails'
#         type: object
#        debtor:
#         #$ref: '#/components/schemas/Party'
#         type: object
#        debtorAgent:
#         #$ref: '#/components/schemas/Agent'
#         type: object
#        creditorAgent:
#         #$ref: '#/components/schemas/Agent'
#         type: object
#        remittanceInformation:
#         #$ref: '#/components/schemas/RemittanceInformation'
#         type: object
#        creditorAccount:
#         #$ref: '#/components/schemas/AccountDetails'
#         type: object
#        creditor:
#         #$ref: '#/components/schemas/Party'
#         type: object
#        paymentTypeInformation:
#         #$ref: '#/components/schemas/PaymentTypeInformation'
#         type: object
#      description: The payment information including account identification details
#    DepositInterestAccruedAmounts:
#      type: object
#      properties:
#        overdraftInterestAccrued:
#          type: number
#          description: >-
#            The amount of overdraft interest accrued since last interest
#            application/activation date and applied within Interest Applied
#            transaction
#        interestAccrued:
#          type: number
#          description: >-
#            The amount of positive interest accrued since last interest
#            application/activation date and applied within Interest Applied
#            transaction
#        technicalOverdraftInterestAccrued:
#          type: number
#          description: >-
#            The amount of technical overdraft interest accrued since last interest
#            application/activation date and applied within Interest Applied
#            transaction
#        negativeInterestAccrued:
#          type: number
#          description: >-
#            The amount of negative interest accrued since last interest
#            application/activation date and applied within Interest Applied
#            transaction
#      description: >-
#        Represents the accrued interest amounts for an Interest Applied deposit
#        transaction.
#    DepositTransactionBalances:
#      type: object
#      properties:
#        totalBalance:
#          type: number
#          description: The running balance owed by deposit
#      description: The balances changed within a transaction.
#    DepositTransactionInterestSettings:
#      type: object
#      properties:
#        interestRate:
#          type: number
#          description: The interest rate for the deposit account
#        indexInterestRate:
#          type: number
#          description: >-
#            The value of the index interest rate set or changed in this
#            transaction
#      description: >-
#        The interest settings, holds all the properties regarding interests for
#        the deposit account
#    PaymentIdentification:
#      type: object
#      properties:
#        instructionIdentification:
#          type: string
#          description: Identifier of a payment instruction
#        endToEndIdentification:
#          type: string
#          description: Identifier assigned by the initiating party to the transaction
#        transactionIdentification:
#          type: string
#          description: >-
#            Identifier unique for a period assigned by the first initiating party
#            to the transaction
#      description: The payment identification details
#    AccountDetails:
#      type: object
#      properties:
#        currency:
#          type: string
#          description: The currency of the account
#        identification:
#         #$ref: '#/components/schemas/AccountIdentification'
#         type: object
#      description: The account currency and identification
#    DepositOverdraftSettings:
#      type: object
#      properties:
#        overdraftLimit:
#          type: number
#          description: The overdraft limit that was set or changed in this transaction
#      description: Holds the deposit overdraft settings for a transaction
#    DepositOverdraftInterestSettings:
#      type: object
#      properties:
#        interestRate:
#          type: number
#          description: >-
#            The interest rate that was set or changed in this transaction. Used on
#            product interest rate changes or interest tier switches
#        indexInterestRate:
#          type: number
#          description: >-
#            The value of the index interest rate set or changed in this
#            transaction
#      description: Holds the deposit overdraft interest settings
#    Party:
#      type: object
#      properties:
#        name:
#          type: string
#          description: The name of the party
#      description: The details of the party for a transaction
#    Agent:
#      type: object
#      properties:
#        financialInstitutionIdentification:
#         #$ref: '#/components/schemas/FinancialInstitutionIdentification'
#         type: object
#      description: The agent details for a party
#    RemittanceInformation:
#      type: object
#      properties:
#        structured:
#         #$ref: '#/components/schemas/Structured'
#         type: object
#        unstructured:
#          type: string
#          description: >-
#            Information supplied to match the items of the payment in an
#            unstructured form
#      description: The information specifying the payment items that are intended to settle
#    PaymentTypeInformation:
#      type: object
#      properties:
#        serviceLevel:
#         #$ref: '#/components/schemas/ServiceLevel'
#         type: object
#      description: The information specifying the type of transaction
#    AccountIdentification:
#      type: object
#      properties:
#        other:
#         #$ref: '#/components/schemas/OtherAccountIdentification'
#         type: object
#        iban:
#          type: string
#          description: The account unique identifier
#      description: The account identification details
#    OtherAccountIdentification:
#      type: object
#      properties:
#        scheme:
#          type: string
#          description: The identification scheme
#        identification:
#          type: string
#          description: The identification of the payer/payee
#      description: Represents other way of identification for the account.
#    FinancialInstitutionIdentification:
#      type: object
#      properties:
#        bic:
#          type: string
#          description: Business identifier code
#      description: The identification of the financial institution
#    Structured:
#      type: object
#      properties:
#        creditorReferenceInformation:
#         #$ref: '#/components/schemas/CreditorReferenceInformation'
#         type: object
#      description: The information specifying the payment items that are intended to settle
#    ServiceLevel:
#      type: object
#      properties:
#        code:
#          type: string
#          description: >-
#            The code for a pre-agreed service or level of service between the
#            parties
#      description: The rules under which the transaction should be processed
#    CreditorReferenceInformation:
#      type: object
#      properties:
#        reference:
#          type: string
#          description: The reference information of the creditor's underlying documents
#        referenceType:
#          type: string
#          description: The type of creditor reference
#        referenceIssuer:
#          type: string
#          description: The entity that assigns the reference type
#      description: Represents the reference to the underlying documents of the payment.
#    DepositTransactionInput:
#      type: object
#      required:
#        - amount
#      properties:
#        transactionDetails:
#         #$ref: '#/components/schemas/TransactionDetailsInput'
#         type: object
#        amount:
#          type: number
#          description: The amount that was added to an account
#        notes:
#          type: string
#          description: Extra notes about this deposit transaction
#        paymentOrderId:
#          type: string
#          description: 'The payment order id of the deposit transaction, customizable'
#        externalId:
#          type: string
#          description: 'The external id of the deposit transaction, customizable, unique'
#        skipMaximumBalanceValidation:
#          type: boolean
#          description: Flag indicating that a maximum balance validation should be skipped
#        bookingDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The date of Journal Entry (as Organization Time)
#        valueDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: The entry date of the deposit (as Organization Time)
#        paymentDetails:
#         #$ref: '#/components/schemas/PaymentDetails'
#         type: object
#        holdExternalReferenceId:
#          type: string
#          description: The external id of an account authorization hold
#      description: Represents the request payload for creating a transaction of type DEPOSIT.
#    DepositTransactionAdjustmentDetails:
#      type: object
#      properties:
#        bookingDate:
#          type: string
#          format: date-time
#          example: '2016-09-06T13:37:50+03:00'
#          description: >-
#            Date when the adjustment transaction is logged into accounting. Can be
#            null. Available only for DEPOSIT and WITHDRAWAL
#        notes:
#          type: string
#          description: Notes detailing why the transaction is adjusted
#      description: Contains the details of the transaction adjustment
#    AccountArrearsSettings:
#      type: object
#      properties:
#        dateCalculationMethod:
#          type: string
#        monthlyToleranceDay:
#          type: integer
#          format: int32
#        nonWorkingDaysMethod:
#          type: string
#        toleranceCalculationMethod:
#         type: string
#        toleranceFloorAmount:
#          type: integer
#          format: int32
#        tolerancePercentageOfOutstandingPrincipal:
#          type: integer
#          format: int32
#        tolerancePeriod:
#          type: integer
#          format: int32
#    AccountInterestRateSetting:
#      type: object
#      properties:
#        indexSourceKey:
#          type: string
#        interestRate:
#          type: integer
#          format: int32
#        interestRateCeilingValue:
#          type: integer
#          format: int32
#        interestRateFloorValue:
#          type: integer
#          format: int32
#        interestRateReviewCount:
#          type: integer
#          format: int32
#        interestRateReviewUnit:
#          type: string
#        interestRateSource:
#          type: string
#        interestSpread:
#          type: integer
#          format: int32
#        validFrom:
#          type: string
#    Asset:
#      type: object
#      properties:
#        assetDefaultAssets:
#          $ref: '#/components/schemas/AssetDefaultAssets'
#        amount:
#          type: integer
#          format: int32
#        assetName:
#          type: string
#        depositAccountKey:
#          type: string
#        guarantorKey:
#          type: string
#        guarantorType:
#          type: string
#        originalAmount:
#          type: integer
#          format: int32
#        originalCurrency:
#          $ref: '#/components/schemas/OriginalCurrency'
#    AssetDefaultAssets:
#      type: object
#      properties:
#        exampleCheckboxFieldAssets:
#          type: string
#        exampleFreeTextFieldAssets:
#          type: string
#        exampleNumberFieldAssets:
#          type: string
#        exampleSelectFieldAssets:
#          type: string
#    Balances:
#      type: object
#      properties:
#        redrawBalance:
#          type: integer
#          format: int32
#    BillingCycle:
#      type: object
#      properties:
#        days:
#          type: array
#          items:
#            type: integer
#            format: int32
#    Currency:
#      type: object
#      properties:
#        code:
#          type: string
#        currencyCode:
#          type: string
#    DisbursementDetails:
#      type: object
#      properties:
#        disbursementDate:
#          type: string
#        expectedDisbursementDate:
#          type: string
#        fees:
#          type: array
#          items:
#            $ref: '#/components/schemas/Fee'
#        firstRepaymentDate:
#          type: string
#        transactionDetails:
#          $ref: '#/components/schemas/TransactionDetails'
#    Fee:
#      type: object
#      properties:
#        amount:
#          type: integer
#          format: int32
#        percentage:
#          type: integer
#          format: int32
#        predefinedFeeEncodedKey:
#          type: string
#    FundingSource:
#      type: object
#      properties:
#        amount:
#          type: integer
#          format: int32
#        assetName:
#          type: string
#        depositAccountKey:
#          type: string
#        guarantorKey:
#          type: string
#        guarantorType:
#          type: string
#        id:
#          type: string
#        interestCommission:
#          type: integer
#          format: int32
#        sharePercentage:
#          type: integer
#          format: int32
#    Guarantor:
#      type: object
#      properties:
#        guarantorDefaultGuarantors:
#          $ref: '#/components/schemas/GuarantorDefaultGuarantors'
#        amount:
#          type: integer
#          format: int32
#        assetName:
#          type: string
#        depositAccountKey:
#          type: string
#        guarantorKey:
#          type: string
#        guarantorType:
#          type: string
#    GuarantorDefaultGuarantors:
#      type: object
#      properties:
#        exampleCheckboxGuarantors:
#          type: string
#        exampleFreeTextGuarantors:
#          type: string
#        exampleNumberFieldGuarantors:
#          type: string
#        exampleSelectFieldGuarantors:
#          type: string
#    InterestApplicationDays:
#      type: object
#      properties:
#        daysInMonth:
#          type: array
#          items:
#            type: integer
#            format: int32
#        shortMonthHandlingMethod:
#          type: string
#    InterestSettings:
#      type: object
#      properties:
#        accountInterestRateSettings:
#          type: array
#          items:
#            $ref: '#/components/schemas/AccountInterestRateSetting'
#        accrueInterestAfterMaturity:
#          type: boolean
#        interestApplicationDays:
#          $ref: '#/components/schemas/InterestApplicationDays'
#        interestApplicationMethod:
#          type: string
#        interestBalanceCalculationMethod:
#          type: string
#        interestCalculationMethod:
#          type: string
#        interestChargeFrequency:
#          type: string
#        interestRate:
#          type: integer
#          format: int32
#        interestRateReviewCount:
#          type: integer
#          format: int32
#        interestRateReviewUnit:
#          type: string
#        interestRateSource:
#          type: string
#        interestSpread:
#          type: integer
#          format: int32
#        interestType:
#          type: string
#        pmtAdjustmentThreshold:
#          $ref: '#/components/schemas/PmtAdjustmentThreshold'
#    LoansDTO:
#      type: object
#      properties:
#        accountArrearsSettings:
#          $ref: '#/components/schemas/AccountArrearsSettings'
#        accountHolderKey:
#          type: string
#        accountHolderType:
#          type: string
#        accountState:
#          type: string
#        accountSubState:
#          type: string
#        accruedInterest:
#          type: integer
#          format: int32
#        accruedPenalty:
#          type: integer
#          format: int32
#        activationTransactionKey:
#          type: string
#        allowOffset:
#          type: boolean
#        approvedDate:
#          type: string
#        arrearsTolerancePeriod:
#          type: integer
#          format: int32
#        assets:
#          type: array
#          items:
#            $ref: '#/components/schemas/Asset'
#        assignedBranchKey:
#          type: string
#        assignedCentreKey:
#          type: string
#        assignedUserKey:
#          type: string
#        balances:
#          $ref: '#/components/schemas/Balances'
#        closedDate:
#          type: string
#        creationDate:
#          type: string
#        creditArrangementKey:
#          type: string
#        currency:
#          $ref: '#/components/schemas/Currency'
#        disbursementDetails:
#          $ref: '#/components/schemas/DisbursementDetails'
#        fundingSources:
#          type: array
#          items:
#            $ref: '#/components/schemas/FundingSource'
#        futurePaymentsAcceptance:
#          type: string
#        guarantors:
#          type: array
#          items:
#            $ref: '#/components/schemas/Guarantor'
#        id:
#          type: string
#        interestCommission:
#          type: integer
#          format: int32
#        interestSettings:
#          $ref: '#/components/schemas/InterestSettings'
#        lastAccountAppraisalDate:
#          type: string
#        lastInterestAppliedDate:
#          type: string
#        lastInterestReviewDate:
#          type: string
#        lastLockedDate:
#          type: string
#        lastModifiedDate:
#          type: string
#        lastSetToArrearsDate:
#          type: string
#        lastTaxRateReviewDate:
#          type: string
#        latePaymentsRecalculationMethod:
#          type: string
#        loanAmount:
#          type: integer
#          format: int32
#        loanName:
#          type: string
#        lockedAccountTotalDueType:
#          type: string
#        lockedOperations:
#          type: array
#          items:
#            type: string
#        migrationEventKey:
#          type: string
#        notes:
#          type: string
#        originalAccountKey:
#          type: string
#        paymentHolidaysAccruedInterest:
#          type: integer
#          format: int32
#        paymentMethod:
#          type: string
#        penaltySettings:
#          $ref: '#/components/schemas/PenaltySettings'
#        plannedInstallmentFees:
#          type: array
#          items:
#            $ref: '#/components/schemas/PlannedInstallmentFee'
#        prepaymentSettings:
#          $ref: '#/components/schemas/PrepaymentSettings'
#        principalPaymentSettings:
#          $ref: '#/components/schemas/PrincipalPaymentSettings'
#        productTypeKey:
#          type: string
#        redrawSettings:
#          $ref: '#/components/schemas/RedrawSettings'
#        rescheduledAccountKey:
#          type: string
#        scheduleSettings:
#          $ref: '#/components/schemas/ScheduleSettings'
#        settlementAccountKey:
#          type: string
#        taxRate:
#          type: integer
#          format: int32
#        terminationDate:
#          type: string
#        tranches:
#          type: array
#          items:
#            $ref: '#/components/schemas/Tranch'
#    OriginalCurrency:
#      type: object
#      properties:
#        code:
#          type: string
#        currencyCode:
#          type: string
#    PaymentPlan:
#      type: object
#      properties:
#        amount:
#          type: integer
#          format: int32
#        toInstallment:
#          type: integer
#          format: int32
#    PenaltySettings:
#      type: object
#      properties:
#        loanPenaltyCalculationMethod:
#          type: string
#        penaltyRate:
#          type: integer
#          format: int32
#    PlannedInstallmentFee:
#      type: object
#      properties:
#        amount:
#          type: integer
#          format: int32
#        applyOnDate:
#          type: string
#        installmentKey:
#          type: string
#        installmentNumber:
#          type: integer
#          format: int32
#        predefinedFeeKey:
#          type: string
#    PmtAdjustmentThreshold:
#      type: object
#      properties:
#        method:
#          type: string
#        numberOfDays:
#          type: integer
#          format: int32
#    PrepaymentSettings:
#      type: object
#      properties:
#        applyInterestOnPrepaymentMethod:
#          type: string
#        elementsRecalculationMethod:
#          type: string
#        ercFreeAllowanceAmount:
#          type: integer
#          format: int32
#        ercFreeAllowancePercentage:
#          type: integer
#          format: int32
#        prepaymentRecalculationMethod:
#          type: string
#        principalPaidInstallmentStatus:
#          type: string
#    PreviewSchedule:
#      type: object
#      properties:
#        numberOfPreviewedInstalments:
#          type: integer
#          format: int32
#    PrincipalPaymentSettings:
#      type: object
#      properties:
#        amount:
#          type: integer
#          format: int32
#        includeFeesInFloorAmount:
#          type: boolean
#        includeInterestInFloorAmount:
#          type: boolean
#        percentage:
#          type: integer
#          format: int32
#        principalCeilingValue:
#          type: integer
#          format: int32
#        principalFloorValue:
#          type: integer
#          format: int32
#        principalPaymentMethod:
#          type: string
#        totalDueAmountFloor:
#          type: integer
#          format: int32
#        totalDuePayment:
#          type: string
#    RedrawSettings:
#      type: object
#      properties:
#        restrictNextDueWithdrawal:
#          type: boolean
#    ScheduleSettings:
#      type: object
#      properties:
#        amortizationPeriod:
#          type: integer
#          format: int32
#        billingCycle:
#          $ref: '#/components/schemas/BillingCycle'
#        defaultFirstRepaymentDueDateOffset:
#          type: integer
#          format: int32
#        fixedDaysOfMonth:
#          type: array
#          items:
#            type: integer
#            format: int32
#        gracePeriod:
#          type: integer
#          format: int32
#        gracePeriodType:
#          type: string
#        hasCustomSchedule:
#          type: boolean
#        paymentPlan:
#          type: array
#          items:
#            $ref: '#/components/schemas/PaymentPlan'
#        periodicPayment:
#          type: integer
#          format: int32
#        previewSchedule:
#          $ref: '#/components/schemas/PreviewSchedule'
#        principalRepaymentInterval:
#          type: integer
#          format: int32
#        repaymentInstallments:
#          type: integer
#          format: int32
#        repaymentPeriodCount:
#          type: integer
#          format: int32
#        repaymentPeriodUnit:
#          type: string
#        repaymentScheduleMethod:
#          type: string
#        scheduleDueDatesMethod:
#          type: string
#        shortMonthHandlingMethod:
#          type: string
#    Tranch:
#      type: object
#    TransactionDetails:
#      type: object
#      properties:
#        internalTransfer:
#          type: boolean
#        targetDepositAccountKey:
#          type: string
#        transactionChannelId:
#          type: string
#        transactionChannelKey:
#          type: string
#    LoansResponseDTO:
#      type: object
#      properties:
#        accountArrearsSettings:
#          $ref: '#/components/schemas/AccountArrearsSettings'
#        accountHolderKey:
#          type: string
#        accountHolderType:
#          type: string
#        accountState:
#          type: string
#        accountSubState:
#          type: string
#        accruedInterest:
#          type: integer
#          format: int32
#        accruedPenalty:
#          type: integer
#          format: int32
#        activationTransactionKey:
#          type: string
#        allowOffset:
#          type: boolean
#        approvedDate:
#          type: string
#        arrearsTolerancePeriod:
#          type: integer
#          format: int32
#        assets:
#          type: array
#          items:
#            $ref: '#/components/schemas/Asset'
#        assignedBranchKey:
#          type: string
#        assignedCentreKey:
#          type: string
#        assignedUserKey:
#          type: string
#        balances:
#          $ref: '#/components/schemas/Balances'
#        closedDate:
#          type: string
#        creationDate:
#          type: string
#        creditArrangementKey:
#          type: string
#        currency:
#          $ref: '#/components/schemas/Currency'
#        daysInArrears:
#          type: integer
#          format: int32
#        daysLate:
#          type: integer
#          format: int32
#        disbursementDetails:
#          $ref: '#/components/schemas/DisbursementDetails'
#        encodedKey:
#          type: string
#        fundingSources:
#          type: array
#          items:
#            $ref: '#/components/schemas/FundingSource'
#        futurePaymentsAcceptance:
#          type: string
#        guarantors:
#          type: array
#          items:
#            $ref: '#/components/schemas/Guarantor'
#        id:
#          type: string
#        interestAccruedInBillingCycle:
#          type: integer
#          format: int32
#        interestCommission:
#          type: integer
#          format: int32
#        interestFromArrearsAccrued:
#          type: integer
#          format: int32
#        interestSettings:
#          $ref: '#/components/schemas/InterestSettings'
#        lastAccountAppraisalDate:
#          type: string
#        lastInterestAppliedDate:
#          type: string
#        lastInterestReviewDate:
#          type: string
#        lastLockedDate:
#          type: string
#        lastModifiedDate:
#          type: string
#        lastSetToArrearsDate:
#          type: string
#        lastTaxRateReviewDate:
#          type: string
#        latePaymentsRecalculationMethod:
#          type: string
#        loanAmount:
#          type: integer
#          format: int32
#        loanName:
#          type: string
#        lockedAccountTotalDueType:
#          type: string
#        lockedOperations:
#          type: array
#          items:
#            type: string
#        migrationEventKey:
#          type: string
#        modifyInterestForFirstInstallment:
#          type: boolean
#        notes:
#          type: string
#        originalAccountKey:
#          type: string
#        paymentHolidaysAccruedInterest:
#          type: integer
#          format: int32
#        paymentMethod:
#          type: string
#        penaltySettings:
#          $ref: '#/components/schemas/PenaltySettings'
#        plannedInstallmentFees:
#          type: array
#          items:
#            $ref: '#/components/schemas/PlannedInstallmentFee'
#        prepaymentSettings:
#          $ref: '#/components/schemas/PrepaymentSettings'
#        principalPaymentSettings:
#          $ref: '#/components/schemas/PrincipalPaymentSettings'
#        productTypeKey:
#          type: string
#        redrawSettings:
#          $ref: '#/components/schemas/RedrawSettings'
#        rescheduledAccountKey:
#          type: string
#        scheduleSettings:
#          $ref: '#/components/schemas/ScheduleSettings'
#        settlementAccountKey:
#          type: string
#        taxRate:
#          type: integer
#          format: int32
#        terminationDate:
#          type: string
#        tranches:
#          type: array
#          items:
#            $ref: '#/components/schemas/Tranch'
#    LoansChangeStateDTO:
#      type: object
#      properties:
#        action:
#          type: string
#        notes:
#          type: string
#    LoansChangeStateResponseDTO:
#      type: object
#      properties:
#        accountArrearsSettings:
#          $ref: '#/components/schemas/AccountArrearsSettings'
#        accountHolderKey:
#          type: string
#        accountHolderType:
#          type: string
#        accountState:
#          type: string
#        accountSubState:
#          type: string
#        accruedInterest:
#          type: integer
#          format: int32
#        accruedPenalty:
#          type: integer
#          format: int32
#        activationTransactionKey:
#          type: string
#        allowOffset:
#          type: boolean
#        approvedDate:
#          type: string
#        arrearsTolerancePeriod:
#          type: integer
#          format: int32
#        assets:
#          type: array
#          items:
#            $ref: '#/components/schemas/Asset'
#        assignedBranchKey:
#          type: string
#        assignedCentreKey:
#          type: string
#        assignedUserKey:
#          type: string
#        balances:
#          $ref: '#/components/schemas/Balances'
#        closedDate:
#          type: string
#        creationDate:
#          type: string
#        creditArrangementKey:
#          type: string
#        currency:
#          $ref: '#/components/schemas/Currency'
#        daysInArrears:
#          type: integer
#          format: int32
#        daysLate:
#          type: integer
#          format: int32
#        disbursementDetails:
#          $ref: '#/components/schemas/DisbursementDetails'
#        encodedKey:
#          type: string
#        fundingSources:
#          type: array
#          items:
#            $ref: '#/components/schemas/FundingSource'
#        futurePaymentsAcceptance:
#          type: string
#        guarantors:
#          type: array
#          items:
#            $ref: '#/components/schemas/Guarantor'
#        id:
#          type: string
#        interestAccruedInBillingCycle:
#          type: integer
#          format: int32
#        interestCommission:
#          type: integer
#          format: int32
#        interestFromArrearsAccrued:
#          type: integer
#          format: int32
#        interestSettings:
#          $ref: '#/components/schemas/InterestSettings'
#        lastAccountAppraisalDate:
#          type: string
#        lastInterestAppliedDate:
#          type: string
#        lastInterestReviewDate:
#          type: string
#        lastLockedDate:
#          type: string
#        lastModifiedDate:
#          type: string
#        lastSetToArrearsDate:
#          type: string
#        lastTaxRateReviewDate:
#          type: string
#        latePaymentsRecalculationMethod:
#          type: string
#        loanAmount:
#          type: integer
#          format: int32
#        loanName:
#          type: string
#        lockedAccountTotalDueType:
#          type: string
#        lockedOperations:
#          type: array
#          items:
#            type: string
#        migrationEventKey:
#          type: string
#        modifyInterestForFirstInstallment:
#          type: boolean
#        notes:
#          type: string
#        originalAccountKey:
#          type: string
#        paymentHolidaysAccruedInterest:
#          type: integer
#          format: int32
#        paymentMethod:
#          type: string
#        penaltySettings:
#          $ref: '#/components/schemas/PenaltySettings'
#        plannedInstallmentFees:
#          type: array
#          items:
#            $ref: '#/components/schemas/PlannedInstallmentFee'
#        prepaymentSettings:
#          $ref: '#/components/schemas/PrepaymentSettings'
#        principalPaymentSettings:
#          $ref: '#/components/schemas/PrincipalPaymentSettings'
#        productTypeKey:
#          type: string
#        redrawSettings:
#          $ref: '#/components/schemas/RedrawSettings'
#        rescheduledAccountKey:
#          type: string
#        scheduleSettings:
#          $ref: '#/components/schemas/ScheduleSettings'
#        settlementAccountKey:
#          type: string
#        taxRate:
#          type: integer
#          format: int32
#        terminationDate:
#          type: string
#        tranches:
#          type: array
#          items:
#            $ref: '#/components/schemas/Tranch'
#    LoansDisbursementTransactionDTO:
#      type: object
#      properties:
#        amount:
#          type: integer
#          format: int32
#        bookingDate:
#          type: string
#        externalId:
#          type: string
#        fees:
#          type: array
#          items:
#            $ref: '#/components/schemas/Fee'
#        firstRepaymentDate:
#          type: string
#        notes:
#          type: string
#        originalCurrencyCode:
#          type: string
#        shiftAdjustableInterestPeriods:
#          type: boolean
#        transactionDetails:
#          $ref: '#/components/schemas/TransactionDetails'
#        transferDetails:
#          $ref: '#/components/schemas/TransferDetails'
#        valueDate:
#          type: string
#    TransferDetails:
#      type: object
#      properties:
#        linkedAccountId:
#          type: string
#        linkedAccountKey:
#          type: string
#    AccountBalances:
#      type: object
#      properties:
#        advancePosition:
#          type: integer
#          format: int32
#        arrearsPosition:
#          type: integer
#          format: int32
#        expectedPrincipalRedraw:
#          type: integer
#          format: int32
#        principalBalance:
#          type: integer
#          format: int32
#        redrawBalance:
#          type: integer
#          format: int32
#        totalBalance:
#          type: integer
#          format: int32
#    AffectedAmounts:
#      type: object
#      properties:
#        deferredInterestAmount:
#          type: integer
#          format: int32
#        feesAmount:
#          type: integer
#          format: int32
#        fundersInterestAmount:
#          type: integer
#          format: int32
#        interestAmount:
#          type: integer
#          format: int32
#        interestFromArrearsAmount:
#          type: integer
#          format: int32
#        organizationCommissionAmount:
#          type: integer
#          format: int32
#        paymentHolidaysInterestAmount:
#          type: integer
#          format: int32
#        penaltyAmount:
#          type: integer
#          format: int32
#        principalAmount:
#          type: integer
#          format: int32
#    CardAcceptor:
#      type: object
#      properties:
#        city:
#          type: string
#        country:
#          type: string
#        mcc:
#          type: integer
#          format: int32
#        name:
#          type: string
#        state:
#          type: string
#        street:
#          type: string
#        zip:
#          type: string
#    CardTransaction:
#      type: object
#      properties:
#        advice:
#          type: boolean
#        amount:
#          type: integer
#          format: int32
#        cardAcceptor:
#          $ref: '#/components/schemas/CardAcceptor'
#        cardToken:
#          type: string
#        currencyCode:
#          type: string
#        encodedKey:
#          type: string
#        externalAuthorizationReferenceId:
#          type: string
#        externalReferenceId:
#          type: string
#        userTransactionTime:
#          type: string
#    CustomPaymentAmount:
#      type: object
#      properties:
#        amount:
#          type: integer
#          format: int32
#        customPaymentAmountType:
#          type: string
#        predefinedFeeKey:
#          type: string
#        taxOnAmount:
#          type: integer
#          format: int32
#    LoansDisbursementTransactionResponseDTO:
#      type: object
#      properties:
#        accountBalances:
#          $ref: '#/components/schemas/AccountBalances'
#        adjustmentTransactionKey:
#          type: string
#        affectedAmounts:
#          $ref: '#/components/schemas/AffectedAmounts'
#        amount:
#          type: integer
#          format: int32
#        bookingDate:
#          type: string
#        branchKey:
#          type: string
#        cardTransaction:
#          $ref: '#/components/schemas/CardTransaction'
#        centreKey:
#          type: string
#        creationDate:
#          type: string
#        currency:
#          $ref: '#/components/schemas/Currency'
#        customPaymentAmounts:
#          type: array
#          items:
#            $ref: '#/components/schemas/CustomPaymentAmount'
#        encodedKey:
#          type: string
#        externalId:
#          type: string
#        fees:
#          type: array
#          items:
#            $ref: '#/components/schemas/Fee'
#        id:
#          type: string
#        installmentEncodedKey:
#          type: string
#        migrationEventKey:
#          type: string
#        notes:
#          type: string
#        originalAmount:
#          type: integer
#          format: int32
#        originalCurrencyCode:
#          type: string
#        originalTransactionKey:
#          type: string
#        parentAccountKey:
#          type: string
#        parentLoanTransactionKey:
#          type: string
#        prepaymentRecalculationMethod:
#          type: string
#        taxes:
#          $ref: '#/components/schemas/Taxes'
#        terms:
#          $ref: '#/components/schemas/Terms'
#        tillKey:
#          type: string
#        transactionDetails:
#          $ref: '#/components/schemas/TransactionDetails'
#        transferDetails:
#          $ref: '#/components/schemas/TransferDetails'
#        type:
#          type: string
#        userKey:
#          type: string
#        valueDate:
#          type: string
#    Taxes:
#      type: object
#      properties:
#        deferredTaxOnInterestAmount:
#          type: integer
#          format: int32
#        taxOnFeesAmount:
#          type: integer
#          format: int32
#        taxOnInterestAmount:
#          type: integer
#          format: int32
#        taxOnInterestFromArrearsAmount:
#          type: integer
#          format: int32
#        taxOnPaymentHolidaysInterest:
#          type: integer
#          format: int32
#        taxOnPenaltyAmount:
#          type: integer
#          format: int32
#        taxRate:
#          type: integer
#          format: int32
#    Terms:
#      type: object
#      properties:
#        interestSettings:
#          $ref: '#/components/schemas/InterestSettings'
#        periodicPayment:
#          type: integer
#          format: int32
#        principalPaymentAmount:
#          type: integer
#          format: int32
#        principalPaymentPercentage:
#          type: integer
#          format: int32
#    Address:
#      type: object
#      properties:
#        city:
#          type: string
#        country:
#          type: string
#        indexInList:
#          type: integer
#          format: int32
#        latitude:
#          type: integer
#          format: int32
#        line1:
#          type: string
#        line2:
#          type: string
#        longitude:
#          type: integer
#          format: int32
#        postcode:
#          type: string
#        region:
#          type: string
#    GroupDTO:
#      type: object
#      properties:
#        addresses:
#          type: array
#          items:
#            $ref: '#/components/schemas/Address'
#        assignedBranchKey:
#          type: string
#        assignedCentreKey:
#          type: string
#        assignedUserKey:
#          type: string
#        emailAddress:
#          type: string
#        groupMembers:
#          type: array
#          items:
#            $ref: '#/components/schemas/GroupMember'
#        groupName:
#          type: string
#        groupRoleKey:
#          type: string
#        homePhone:
#          type: string
#        id:
#          type: string
#        mobilePhone:
#          type: string
#        notes:
#          type: string
#        preferredLanguage:
#          type: string
#    GroupMember:
#      type: object
#      properties:
#        clientKey:
#          type: string
#        roles:
#          type: array
#          items:
#            $ref: '#/components/schemas/Role'
#    Role:
#      type: object
#      properties:
#        groupRoleNameKey:
#          type: string
#    GroupResponseDTO:
#      type: object
#      properties:
#        addresses:
#          type: array
#          items:
#            $ref: '#/components/schemas/Address'
#        assignedBranchKey:
#          type: string
#        assignedCentreKey:
#          type: string
#        assignedUserKey:
#          type: string
#        creationDate:
#          type: string
#        emailAddress:
#          type: string
#        encodedKey:
#          type: string
#        groupMembers:
#          type: array
#          items:
#            $ref: '#/components/schemas/GroupMember'
#        groupName:
#          type: string
#        groupRoleKey:
#          type: string
#        homePhone:
#          type: string
#        id:
#          type: string
#        lastModifiedDate:
#          type: string
#        loanCycle:
#          type: integer
#          format: int32
#        migrationEventKey:
#          type: string
#        mobilePhone:
#          type: string
#        notes:
#          type: string
#        preferredLanguage:
#          type: string
#    AccruedAmounts:
#      type: object
#    DepositsDTO:
#      type: object
#      properties:
#        accountHolderKey:
#          type: string
#        accountHolderType:
#          type: string
#        accountType:
#          type: string
#        accruedAmounts:
#          $ref: '#/components/schemas/AccruedAmounts'
#        assignedBranchKey:
#          type: string
#        assignedCentreKey:
#          type: string
#        assignedUserKey:
#          type: string
#        balances:
#          $ref: '#/components/schemas/Balances'
#        creditArrangementKey:
#          type: string
#        currencyCode:
#          type: string
#        id:
#          type: string
#        interestSettings:
#          $ref: '#/components/schemas/InterestSettings'
#        internalControls:
#          $ref: '#/components/schemas/InternalControls'
#        name:
#          type: string
#        notes:
#          type: string
#        overdraftInterestSettings:
#          $ref: '#/components/schemas/OverdraftInterestSettings'
#        overdraftSettings:
#          $ref: '#/components/schemas/OverdraftSettings'
#        productTypeKey:
#          type: string
#        withholdingTaxSourceKey:
#          type: string
#    InterestRateSettings:
#      type: object
#      properties:
#        interestChargeFrequency:
#          type: string
#        interestChargeFrequencyCount:
#          type: integer
#          format: int32
#        interestRate:
#          type: integer
#          format: int32
#        interestRateReviewCount:
#          type: integer
#          format: int32
#        interestRateReviewUnit:
#          type: string
#        interestRateTerms:
#          type: string
#        interestRateTiers:
#          type: array
#          items:
#            $ref: '#/components/schemas/InterestRateTier'
#        interestSpread:
#          type: integer
#          format: int32
#    InterestRateTier:
#      type: object
#      properties:
#        endingBalance:
#          type: integer
#          format: int32
#        endingDay:
#          type: integer
#          format: int32
#        interestRate:
#          type: integer
#          format: int32
#    InternalControls:
#      type: object
#      properties:
#        maxDepositBalance:
#          type: integer
#          format: int32
#        maxWithdrawalAmount:
#          type: integer
#          format: int32
#        recommendedDepositAmount:
#          type: integer
#          format: int32
#        targetAmount:
#          type: integer
#          format: int32
#    OverdraftInterestSettings:
#      type: object
#      properties:
#        interestRateSettings:
#          $ref: '#/components/schemas/InterestRateSettings'
#    OverdraftSettings:
#      type: object
#      properties:
#        allowOverdraft:
#          type: boolean
#        overdraftExpiryDate:
#          type: string
#        overdraftLimit:
#          type: integer
#          format: int32
#    DepositsResponseDTO:
#      type: object
#      properties:
#        accountHolderKey:
#          type: string
#        accountHolderType:
#          type: string
#        accountState:
#          type: string
#        accountType:
#          type: string
#        accruedAmounts:
#          $ref: '#/components/schemas/AccruedAmounts'
#        activationDate:
#          type: string
#        approvedDate:
#          type: string
#        assignedBranchKey:
#          type: string
#        assignedCentreKey:
#          type: string
#        assignedUserKey:
#          type: string
#        balances:
#          $ref: '#/components/schemas/Balances'
#        closedDate:
#          type: string
#        creationDate:
#          type: string
#        creditArrangementKey:
#          type: string
#        currencyCode:
#          type: string
#        encodedKey:
#          type: string
#        id:
#          type: string
#        interestSettings:
#          $ref: '#/components/schemas/InterestSettings'
#        internalControls:
#          $ref: '#/components/schemas/InternalControls'
#        lastAccountAppraisalDate:
#          type: string
#        lastInterestCalculationDate:
#          type: string
#        lastInterestReviewDate:
#          type: string
#        lastInterestStoredDate:
#          type: string
#        lastModifiedDate:
#          type: string
#        lastOverdraftInterestReviewDate:
#          type: string
#        lastSetToArrearsDate:
#          type: string
#        linkedSettlementAccountKeys:
#          type: array
#          items:
#            type: string
#        lockedDate:
#          type: string
#        maturityDate:
#          type: string
#        migrationEventKey:
#          type: string
#        name:
#          type: string
#        notes:
#          type: string
#        overdraftInterestSettings:
#          $ref: '#/components/schemas/OverdraftInterestSettings'
#        overdraftSettings:
#          $ref: '#/components/schemas/OverdraftSettings'
#        ownershipHistory:
#          type: array
#          items:
#            $ref: '#/components/schemas/OwnershipHistory'
#        productTypeKey:
#          type: string
#        withholdingTaxSourceKey:
#          type: string
#    OwnershipHistory:
#      type: object
#      properties:
#        previousOwnerKey:
#          type: string
#        transferDate:
#          type: string
#    DepositsMaturity:
#      type: object
#      properties:
#        maturityDate:
#          type: string
#        notes:
#          type: string
#    DepositsMaturityResponse:
#      type: object
#      properties:
#        accountHolderKey:
#          type: string
#        accountHolderType:
#          type: string
#        accountState:
#          type: string
#        accountType:
#          type: string
#        accruedAmounts:
#          $ref: '#/components/schemas/AccruedAmounts'
#        activationDate:
#          type: string
#        approvedDate:
#          type: string
#        assignedBranchKey:
#          type: string
#        assignedCentreKey:
#          type: string
#        assignedUserKey:
#          type: string
#        balances:
#          $ref: '#/components/schemas/Balances'
#        closedDate:
#          type: string
#        creationDate:
#          type: string
#        creditArrangementKey:
#          type: string
#        currencyCode:
#          type: string
#        encodedKey:
#          type: string
#        id:
#          type: string
#        interestSettings:
#          $ref: '#/components/schemas/InterestSettings'
#        internalControls:
#          $ref: '#/components/schemas/InternalControls'
#        lastAccountAppraisalDate:
#          type: string
#        lastInterestCalculationDate:
#          type: string
#        lastInterestReviewDate:
#          type: string
#        lastInterestStoredDate:
#          type: string
#        lastModifiedDate:
#          type: string
#        lastOverdraftInterestReviewDate:
#          type: string
#        lastSetToArrearsDate:
#          type: string
#        linkedSettlementAccountKeys:
#          type: array
#          items:
#            type: string
#        lockedDate:
#          type: string
#        maturityDate:
#          type: string
#        migrationEventKey:
#          type: string
#        name:
#          type: string
#        notes:
#          type: string
#        overdraftInterestSettings:
#          $ref: '#/components/schemas/OverdraftInterestSettings'
#        overdraftSettings:
#          $ref: '#/components/schemas/OverdraftSettings'
#        ownershipHistory:
#          type: array
#          items:
#            $ref: '#/components/schemas/OwnershipHistory'
#        productTypeKey:
#          type: string
#        withholdingTaxSourceKey:
#          type: string
#    Creditor:
#      type: object
#      properties:
#        name:
#          type: string
#    CreditorAccount:
#      type: object
#      properties:
#        currency:
#          type: string
#        identification:
#          $ref: '#/components/schemas/Identification'
#    CreditorAgent:
#      type: object
#      properties:
#        financialInstitutionIdentification:
#          $ref: '#/components/schemas/FinancialInstitutionIdentification'
#    CreditorReferenceInformation:
#      type: object
#      properties:
#        reference:
#          type: string
#        referenceIssuer:
#          type: string
#        referenceType:
#          type: string
#    Debtor:
#      type: object
#      properties:
#        name:
#          type: string
#    DebtorAccount:
#      type: object
#      properties:
#        currency:
#          type: string
#        identification:
#          $ref: '#/components/schemas/Identification'
#    DebtorAgent:
#      type: object
#      properties:
#        financialInstitutionIdentification:
#          $ref: '#/components/schemas/FinancialInstitutionIdentification'
#    FinancialInstitutionIdentification:
#      type: object
#      properties:
#        bic:
#          type: string
#    Identification:
#      type: object
#      properties:
#        iban:
#          type: string
#        other:
#          $ref: '#/components/schemas/Other'
#    Other:
#      type: object
#      properties:
#        identification:
#          type: string
#        scheme:
#          type: string
#    PaymentDetails:
#      type: object
#      properties:
#        creditor:
#          $ref: '#/components/schemas/Creditor'
#        creditorAccount:
#          $ref: '#/components/schemas/CreditorAccount'
#        creditorAgent:
#          $ref: '#/components/schemas/CreditorAgent'
#        debtor:
#          $ref: '#/components/schemas/Debtor'
#        debtorAccount:
#          $ref: '#/components/schemas/DebtorAccount'
#        debtorAgent:
#          $ref: '#/components/schemas/DebtorAgent'
#        paymentIdentification:
#          $ref: '#/components/schemas/PaymentIdentification'
#        paymentTypeInformation:
#          $ref: '#/components/schemas/PaymentTypeInformation'
#        remittanceInformation:
#          $ref: '#/components/schemas/RemittanceInformation'
#    PaymentIdentification:
#      type: object
#      properties:
#        endToEndIdentification:
#          type: string
#        instructionIdentification:
#          type: string
#        transactionIdentification:
#          type: string
#    PaymentTypeInformation:
#      type: object
#      properties:
#        serviceLevel:
#          $ref: '#/components/schemas/ServiceLevel'
#    RemittanceInformation:
#      type: object
#      properties:
#        structured:
#          $ref: '#/components/schemas/Structured'
#        unstructured:
#          type: string
#    ServiceLevel:
#      type: object
#      properties:
#        code:
#          type: string
#    Structured:
#      type: object
#      properties:
#        creditorReferenceInformation:
#          $ref: '#/components/schemas/CreditorReferenceInformation'
#    WithdrawalTransactionsDTO:
#      type: object
#      properties:
#        amount:
#          type: integer
#          format: int32
#        bookingDate:
#          type: string
#        externalId:
#          type: string
#        holdExternalReferenceId:
#          type: string
#        notes:
#          type: string
#        paymentDetails:
#          $ref: '#/components/schemas/PaymentDetails'
#        paymentOrderId:
#          type: string
#        transactionDetails:
#          $ref: '#/components/schemas/TransactionDetails'
#        valueDate:
#          type: string
#    InterestAccruedAmounts:
#      type: object
#      properties:
#        interestAccrued:
#          type: integer
#          format: int32
#        negativeInterestAccrued:
#          type: integer
#          format: int32
#        overdraftInterestAccrued:
#          type: integer
#          format: int32
#        technicalOverdraftInterestAccrued:
#          type: integer
#          format: int32
#    WithdrawalTransactionsResponseDTO:
#      type: object
#      properties:
#        accountBalances:
#          $ref: '#/components/schemas/AccountBalances'
#        adjustmentTransactionKey:
#          type: string
#        affectedAmounts:
#          $ref: '#/components/schemas/AffectedAmounts'
#        amount:
#          type: integer
#          format: int32
#        blockId:
#          type: string
#        bookingDate:
#          type: string
#        branchKey:
#          type: string
#        cardTransaction:
#          $ref: '#/components/schemas/CardTransaction'
#        centreKey:
#          type: string
#        creationDate:
#          type: string
#        currencyCode:
#          type: string
#        encodedKey:
#          type: string
#        externalId:
#          type: string
#        fees:
#          type: array
#          items:
#            $ref: '#/components/schemas/Fee'
#        holdExternalReferenceId:
#          type: string
#        id:
#          type: string
#        interestAccruedAmounts:
#          $ref: '#/components/schemas/InterestAccruedAmounts'
#        migrationEventKey:
#          type: string
#        notes:
#          type: string
#        originalTransactionKey:
#          type: string
#        parentAccountKey:
#          type: string
#        paymentDetails:
#          $ref: '#/components/schemas/PaymentDetails'
#        paymentOrderId:
#          type: string
#        taxes:
#          $ref: '#/components/schemas/Taxes'
#        terms:
#          $ref: '#/components/schemas/Terms'
#        tillKey:
#          type: string
#        transactionDetails:
#          $ref: '#/components/schemas/TransactionDetails'
#        transferDetails:
#          $ref: '#/components/schemas/TransferDetails'
#        type:
#          type: string
#        userKey:
#          type: string
#        valueDate:
#          type: string
#    DepositsTransactionsDTO:
#      type: object
#      properties:
#        amount:
#          type: integer
#          format: int32
#        bookingDate:
#          type: string
#        externalId:
#          type: string
#        holdExternalReferenceId:
#          type: string
#        notes:
#          type: string
#        paymentDetails:
#          $ref: '#/components/schemas/PaymentDetails'
#        paymentOrderId:
#          type: string
#        skipMaximumBalanceValidation:
#          type: boolean
#        transactionDetails:
#          $ref: '#/components/schemas/TransactionDetails'
#        valueDate:
#          type: string
#    DepositsTransactionsResponseDTO:
#      type: object
#      properties:
#        accountBalances:
#          $ref: '#/components/schemas/AccountBalances'
#        adjustmentTransactionKey:
#          type: string
#        affectedAmounts:
#          $ref: '#/components/schemas/AffectedAmounts'
#        amount:
#          type: integer
#          format: int32
#        blockId:
#          type: string
#        bookingDate:
#          type: string
#        branchKey:
#          type: string
#        cardTransaction:
#          $ref: '#/components/schemas/CardTransaction'
#        centreKey:
#          type: string
#        creationDate:
#          type: string
#        currencyCode:
#          type: string
#        encodedKey:
#          type: string
#        externalId:
#          type: string
#        fees:
#          type: array
#          items:
#            $ref: '#/components/schemas/Fee'
#        holdExternalReferenceId:
#          type: string
#        id:
#          type: string
#        interestAccruedAmounts:
#          $ref: '#/components/schemas/InterestAccruedAmounts'
#        migrationEventKey:
#          type: string
#        notes:
#          type: string
#        originalTransactionKey:
#          type: string
#        parentAccountKey:
#          type: string
#        paymentDetails:
#          $ref: '#/components/schemas/PaymentDetails'
#        paymentOrderId:
#          type: string
#        taxes:
#          $ref: '#/components/schemas/Taxes'
#        terms:
#          $ref: '#/components/schemas/Terms'
#        tillKey:
#          type: string
#        transactionDetails:
#          $ref: '#/components/schemas/TransactionDetails'
#        transferDetails:
#          $ref: '#/components/schemas/TransferDetails'
#        type:
#          type: string
#        userKey:
#          type: string
#        valueDate:
#          type: string
#    AccountingRule:
#      type: object
#      properties:
#        financialResource:
#          type: string
#        glAccountKey:
#          type: string
#    AccountingSettings:
#      type: object
#      properties:
#        accountingMethod:
#          type: string
#        accountingRules:
#          type: array
#          items:
#            $ref: '#/components/schemas/AccountingRule'
#        interestAccrualCalculation:
#          type: string
#        interestAccruedAccountingMethod:
#          type: string
#    AvailabilitySettings:
#      type: object
#      properties:
#        availableFor:
#          type: array
#          items:
#            type: string
#        branchSettings:
#          $ref: '#/components/schemas/BranchSettings'
#    BranchSettings:
#      type: object
#      properties:
#        availableProductBranches:
#          type: array
#          items:
#            type: string
#        forAllBranches:
#          type: boolean
#    CreditArrangementSettings:
#      type: object
#      properties:
#        creditArrangementRequirement:
#          type: string
#    CurrencySettings:
#      type: object
#      properties:
#        currencies:
#          type: array
#          items:
#            $ref: '#/components/schemas/Currency'
#    DepositProductsDTO:
#      type: object
#      properties:
#        accountingSettings:
#          $ref: '#/components/schemas/AccountingSettings'
#        availabilitySettings:
#          $ref: '#/components/schemas/AvailabilitySettings'
#        category:
#          type: string
#        creationDate:
#          type: string
#        creditArrangementSettings:
#          $ref: '#/components/schemas/CreditArrangementSettings'
#        currencySettings:
#          $ref: '#/components/schemas/CurrencySettings'
#        feesSettings:
#          $ref: '#/components/schemas/FeesSettings'
#        id:
#          type: string
#        interestSettings:
#          $ref: '#/components/schemas/InterestSettings'
#        internalControls:
#          $ref: '#/components/schemas/InternalControls'
#        lastModifiedDate:
#          type: string
#        maturitySettings:
#          $ref: '#/components/schemas/MaturitySettings'
#        name:
#          type: string
#        newAccountSettings:
#          $ref: '#/components/schemas/NewAccountSettings'
#        notes:
#          type: string
#        offsetSettings:
#          $ref: '#/components/schemas/OffsetSettings'
#        overdraftInterestSettings:
#          $ref: '#/components/schemas/OverdraftInterestSettings'
#        overdraftSettings:
#          $ref: '#/components/schemas/OverdraftSettings'
#        state:
#          type: string
#        taxSettings:
#          $ref: '#/components/schemas/TaxSettings'
#        templates:
#          type: array
#          items:
#            $ref: '#/components/schemas/Template'
#        type:
#          type: string
#    FeesSettings:
#      type: object
#      properties:
#        allowArbitraryFees:
#          type: boolean
#        fees:
#          type: array
#          items:
#            $ref: '#/components/schemas/Fee'
#    MaturityPeriod:
#      type: object
#      properties:
#        defaultValue:
#          type: integer
#          format: int32
#        maxValue:
#          type: integer
#          format: int32
#        minValue:
#          type: integer
#          format: int32
#    MaturitySettings:
#      type: object
#      properties:
#        maturityPeriod:
#          $ref: '#/components/schemas/MaturityPeriod'
#        maturityPeriodUnit:
#          type: string
#    NewAccountSettings:
#      type: object
#      properties:
#        idGeneratorType:
#          type: string
#        idPattern:
#          type: string
#    OffsetSettings:
#      type: object
#      properties:
#        allowOffset:
#          type: boolean
#    TaxSettings:
#      type: object
#      properties:
#        withholdingTaxEnabled:
#          type: boolean
#    Template:
#      type: object
#      properties:
#        name:
#          type: string
#        type:
#          type: string
#    DepositProductResponseDTO:
#      type: object
#      properties:
#        accountingSettings:
#          $ref: '#/components/schemas/AccountingSettings'
#        availabilitySettings:
#          $ref: '#/components/schemas/AvailabilitySettings'
#        category:
#          type: string
#        creationDate:
#          type: string
#        creditArrangementSettings:
#          $ref: '#/components/schemas/CreditArrangementSettings'
#        currencySettings:
#          $ref: '#/components/schemas/CurrencySettings'
#        encodedKey:
#          type: string
#        feesSettings:
#          $ref: '#/components/schemas/FeesSettings'
#        id:
#          type: string
#        interestSettings:
#          $ref: '#/components/schemas/InterestSettings'
#        internalControls:
#          $ref: '#/components/schemas/InternalControls'
#        lastModifiedDate:
#          type: string
#        maturitySettings:
#          $ref: '#/components/schemas/MaturitySettings'
#        name:
#          type: string
#        newAccountSettings:
#          $ref: '#/components/schemas/NewAccountSettings'
#        notes:
#          type: string
#        offsetSettings:
#          $ref: '#/components/schemas/OffsetSettings'
#        overdraftInterestSettings:
#          $ref: '#/components/schemas/OverdraftInterestSettings'
#        overdraftSettings:
#          $ref: '#/components/schemas/OverdraftSettings'
#        state:
#          type: string
#        taxSettings:
#          $ref: '#/components/schemas/TaxSettings'
#        templates:
#          type: array
#          items:
#            $ref: '#/components/schemas/Template'
#        type:
#          type: string
#    ClientDTO:
#      type: object
#      properties:
#        addresses:
#          type: array
#          items:
#            $ref: '#/components/schemas/Address'
#        birthDate:
#          type: string
#        emailAddress:
#          type: string
#        firstName:
#          type: string
#        gender:
#          type: string
#        homePhone:
#          type: string
#        lastName:
#          type: string
#        middleName:
#          type: string
#        mobilePhone:
#          type: string
#        mobilePhone2:
#          type: string
#        preferredLanguage:
#          type: string
#        state:
#          type: string
#    Attachment:
#      type: object
#    ClientResponseDTO:
#      type: object
#      properties:
#        activationDate:
#          type: string
#        addresses:
#          type: array
#          items:
#            $ref: '#/components/schemas/Address'
#        approvedDate:
#          type: string
#        assignedBranchKey:
#          type: string
#        assignedCentreKey:
#          type: string
#        assignedUserKey:
#          type: string
#        birthDate:
#          type: string
#        clientRoleKey:
#          type: string
#        closedDate:
#          type: string
#        creationDate:
#          type: string
#        emailAddress:
#          type: string
#        encodedKey:
#          type: string
#        firstName:
#          type: string
#        gender:
#          type: string
#        groupKeys:
#          type: array
#          items:
#            type: string
#        groupLoanCycle:
#          type: integer
#          format: int32
#        homePhone:
#          type: string
#        id:
#          type: string
#        idDocuments:
#          type: array
#          items:
#            $ref: '#/components/schemas/IdDocument'
#        lastModifiedDate:
#          type: string
#        lastName:
#          type: string
#        loanCycle:
#          type: integer
#          format: int32
#        middleName:
#          type: string
#        migrationEventKey:
#          type: string
#        mobilePhone:
#          type: string
#        mobilePhone2:
#          type: string
#        notes:
#          type: string
#        portalSettings:
#          $ref: '#/components/schemas/PortalSettings'
#        preferredLanguage:
#          type: string
#        profilePictureKey:
#          type: string
#        profileSignatureKey:
#          type: string
#        state:
#          type: string
#    IdDocument:
#      type: object
#      properties:
#        attachments:
#          type: array
#          items:
#            $ref: '#/components/schemas/Attachment'
#        clientKey:
#          type: string
#        documentId:
#          type: string
#        documentType:
#          type: string
#        encodedKey:
#          type: string
#        identificationDocumentTemplateKey:
#          type: string
#        indexInList:
#          type: integer
#          format: int32
#        issuingAuthority:
#          type: string
#        validUntil:
#          type: string
#        additionalProperties:
#          type: object
#          additionalProperties:
#            type: object
#    PortalSettings:
#      type: object
#      properties:
#        encodedKey:
#          type: string
#        lastLoggedInDate:
#          type: string
#        portalState:
#          type: string
#        additionalProperties:
#          type: object
#          additionalProperties:
#            type: object  

x-amazon-apigateway-policy:
  Version: "2012-10-17"
  Statement:
    - Effect: "Deny"
      Principal: "*"
      Action: "execute-api:Invoke"
      Resource: "arn:aws:execute-api:eu-west-2:533267216364:lpkq11sdei/*/*/*"
      Condition:
        StringNotEquals:
          aws:SourceVpce: "vpce-016c6c170901db103"
    - Effect: "Allow"
      Principal: "*"
      Action: "execute-api:Invoke"
      Resource: "arn:aws:execute-api:eu-west-2:533267216364:lpkq11sdei/*/*/*"

x-amazon-apigateway-request-validators:
  Validate body:
    validateRequestParameters: false
    validateRequestBody: true
  Validate body, query string parameters, and headers:
    validateRequestParameters: true
    validateRequestBody: true
